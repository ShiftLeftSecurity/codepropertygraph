json = {};
json.dispatchTypes = [];
json.dispatchTypes[0] = {};
json.dispatchTypes[0].comment = "For statically dispatched calls the call target is known before program execution";
json.dispatchTypes[0].id = 1;
json.dispatchTypes[0].name = "STATIC_DISPATCH";
json.dispatchTypes[1] = {};
json.dispatchTypes[1].comment = "For dynamically dispatched calls the target is determined during runtime";
json.dispatchTypes[1].id = 2;
json.dispatchTypes[1].name = "DYNAMIC_DISPATCH";
json.edgeKeys = [];
json.edgeKeys[0] = {};
json.edgeKeys[0].cardinality = "zeroOrOne";
json.edgeKeys[0].comment = "Local name of referenced CONTAINED node";
json.edgeKeys[0].id = 6;
json.edgeKeys[0].name = "LOCAL_NAME";
json.edgeKeys[0].valueType = "string";
json.edgeKeys[1] = {};
json.edgeKeys[1].cardinality = "one";
json.edgeKeys[1].comment = "Defines whether a PROPAGATE edge creates an alias";
json.edgeKeys[1].id = 1;
json.edgeKeys[1].name = "ALIAS";
json.edgeKeys[1].valueType = "boolean";
json.edgeKeys[2] = {};
json.edgeKeys[2].cardinality = "zeroOrOne";
json.edgeKeys[2].comment = "Index of referenced CONTAINED node (0 based) - used together with cardinality=list";
json.edgeKeys[2].id = 8;
json.edgeKeys[2].name = "INDEX";
json.edgeKeys[2].valueType = "int";
json.edgeTypes = [];
json.edgeTypes[0] = {};
json.edgeTypes[0].comment = "Relation between TYPE_DECL and BINDING node";
json.edgeTypes[0].id = 155;
json.edgeTypes[0].keys = [];
json.edgeTypes[0].name = "BINDS";
json.edgeTypes[1] = {};
json.edgeTypes[1].comment = "Indicates taint removal. Only present between corresponding METHOD_PARAMETER_IN and METHOD_PARAMETER_OUT nodes";
json.edgeTypes[1].id = 17;
json.edgeTypes[1].keys = [];
json.edgeTypes[1].name = "TAINT_REMOVE";
json.edgeTypes[2] = {};
json.edgeTypes[2].comment = "Link to evaluation type";
json.edgeTypes[2].id = 21;
json.edgeTypes[2].keys = [];
json.edgeTypes[2].name = "EVAL_TYPE";
json.edgeTypes[3] = {};
json.edgeTypes[3].comment = "Connection between a captured LOCAL and the corresponding CLOSURE_BINDING";
json.edgeTypes[3].id = 41;
json.edgeTypes[3].keys = [];
json.edgeTypes[3].name = "CAPTURED_BY";
json.edgeTypes[4] = {};
json.edgeTypes[4].comment = "Points to dominated node in post DOM tree";
json.edgeTypes[4].id = 182;
json.edgeTypes[4].keys = [];
json.edgeTypes[4].name = "POST_DOMINATE";
json.edgeTypes[5] = {};
json.edgeTypes[5].comment = "";
json.edgeTypes[5].id = 902;
json.edgeTypes[5].keys = [];
json.edgeTypes[5].name = "IS_SENSITIVE_DATA_OF_TYPE";
json.edgeTypes[6] = {};
json.edgeTypes[6].comment = "Encodes propagation of data from on node to another";
json.edgeTypes[6].id = 1;
json.edgeTypes[6].keys = [];
json.edgeTypes[6].keys[0] = "ALIAS";
json.edgeTypes[6].name = "PROPAGATE";
json.edgeTypes[7] = {};
json.edgeTypes[7].comment = "";
json.edgeTypes[7].id = 901;
json.edgeTypes[7].keys = [];
json.edgeTypes[7].name = "IS_SENSITIVE_DATA_DESCR_OF_REF";
json.edgeTypes[8] = {};
json.edgeTypes[8].comment = "Edge from control structure node to the expression that holds the condition";
json.edgeTypes[8].id = 56;
json.edgeTypes[8].keys = [];
json.edgeTypes[8].name = "CONDITION";
json.edgeTypes[9] = {};
json.edgeTypes[9].comment = "The receiver of a method call which is either an object or a pointer";
json.edgeTypes[9].id = 55;
json.edgeTypes[9].keys = [];
json.edgeTypes[9].name = "RECEIVER";
json.edgeTypes[10] = {};
json.edgeTypes[10].comment = "Represents the capturing of a variable into a closure";
json.edgeTypes[10].id = 40;
json.edgeTypes[10].keys = [];
json.edgeTypes[10].name = "CAPTURE";
json.edgeTypes[11] = {};
json.edgeTypes[11].comment = "Link between FRAMEWORK and FRAMEWORK_DATA nodes";
json.edgeTypes[11].id = 18;
json.edgeTypes[11].keys = [];
json.edgeTypes[11].name = "ATTACHED_DATA";
json.edgeTypes[12] = {};
json.edgeTypes[12].comment = "Relation between a CALL and its arguments and RETURN and the returned expression";
json.edgeTypes[12].id = 156;
json.edgeTypes[12].keys = [];
json.edgeTypes[12].name = "ARGUMENT";
json.edgeTypes[13] = {};
json.edgeTypes[13].comment = "Edges from nodes to tags";
json.edgeTypes[13].id = 11;
json.edgeTypes[13].keys = [];
json.edgeTypes[13].name = "TAGGED_BY";
json.edgeTypes[14] = {};
json.edgeTypes[14].comment = "Alias relation between types";
json.edgeTypes[14].id = 138;
json.edgeTypes[14].keys = [];
json.edgeTypes[14].name = "ALIAS_OF";
json.edgeTypes[15] = {};
json.edgeTypes[15].comment = "Control dependency graph";
json.edgeTypes[15].id = 183;
json.edgeTypes[15].keys = [];
json.edgeTypes[15].name = "CDG";
json.edgeTypes[16] = {};
json.edgeTypes[16].comment = "Membership relation for a compound object";
json.edgeTypes[16].id = 9;
json.edgeTypes[16].keys = [];
json.edgeTypes[16].keys[0] = "LOCAL_NAME";
json.edgeTypes[16].keys[1] = "INDEX";
json.edgeTypes[16].name = "CONTAINS_NODE";
json.edgeTypes[17] = {};
json.edgeTypes[17].comment = "Links together corresponding METHOD_PARAMETER_IN and METHOD_PARAMETER_OUT nodes";
json.edgeTypes[17].id = 12;
json.edgeTypes[17].keys = [];
json.edgeTypes[17].name = "PARAMETER_LINK";
json.edgeTypes[18] = {};
json.edgeTypes[18].comment = "Syntax tree edge";
json.edgeTypes[18].id = 3;
json.edgeTypes[18].keys = [];
json.edgeTypes[18].name = "AST";
json.edgeTypes[19] = {};
json.edgeTypes[19].comment = "A reference to e.g. a LOCAL";
json.edgeTypes[19].id = 10;
json.edgeTypes[19].keys = [];
json.edgeTypes[19].name = "REF";
json.edgeTypes[20] = {};
json.edgeTypes[20].comment = "Shortcut over multiple AST edges";
json.edgeTypes[20].id = 28;
json.edgeTypes[20].keys = [];
json.edgeTypes[20].name = "CONTAINS";
json.edgeTypes[21] = {};
json.edgeTypes[21].comment = "Indicates the dynamic type(s) of an entity. This comes initially from the frontend provided DYNAMIC_TYPE_HINT_FULL_NAME property and is extended by our type resolution";
json.edgeTypes[21].id = 20;
json.edgeTypes[21].keys = [];
json.edgeTypes[21].name = "DYNAMIC_TYPE";
json.edgeTypes[22] = {};
json.edgeTypes[22].comment = "";
json.edgeTypes[22].id = 900;
json.edgeTypes[22].keys = [];
json.edgeTypes[22].name = "IS_SENSITIVE_DATA_DESCR_OF";
json.edgeTypes[23] = {};
json.edgeTypes[23].comment = "Source file of a node, in which its LINE_NUMBER and COLUMN_NUMBER are valid";
json.edgeTypes[23].id = 157;
json.edgeTypes[23].keys = [];
json.edgeTypes[23].name = "SOURCE_FILE";
json.edgeTypes[24] = {};
json.edgeTypes[24].comment = "Type argument binding to a type parameter";
json.edgeTypes[24].id = 22;
json.edgeTypes[24].keys = [];
json.edgeTypes[24].name = "BINDS_TO";
json.edgeTypes[25] = {};
json.edgeTypes[25].comment = "Indicates that a method is part of the vtable of a certain type declaration";
json.edgeTypes[25].id = 30;
json.edgeTypes[25].keys = [];
json.edgeTypes[25].name = "VTABLE";
json.edgeTypes[26] = {};
json.edgeTypes[26].comment = "Inheritance relation between types";
json.edgeTypes[26].id = 23;
json.edgeTypes[26].keys = [];
json.edgeTypes[26].name = "INHERITS_FROM";
json.edgeTypes[27] = {};
json.edgeTypes[27].comment = "Reaching definition edge";
json.edgeTypes[27].id = 137;
json.edgeTypes[27].keys = [];
json.edgeTypes[27].name = "REACHING_DEF";
json.edgeTypes[28] = {};
json.edgeTypes[28].comment = "Points to dominated node in DOM tree";
json.edgeTypes[28].id = 181;
json.edgeTypes[28].keys = [];
json.edgeTypes[28].name = "DOMINATE";
json.edgeTypes[29] = {};
json.edgeTypes[29].comment = "Control flow edge";
json.edgeTypes[29].id = 19;
json.edgeTypes[29].keys = [];
json.edgeTypes[29].name = "CFG";
json.edgeTypes[30] = {};
json.edgeTypes[30].comment = "Referencing to e.g. a LOCAL";
json.edgeTypes[30].id = 6;
json.edgeTypes[30].keys = [];
json.edgeTypes[30].name = "CALL";
json.evaluationStrategies = [];
json.evaluationStrategies[0] = {};
json.evaluationStrategies[0].comment = "A parameter or return of a function is passed by reference which means an address is used behind the scenes";
json.evaluationStrategies[0].id = 1;
json.evaluationStrategies[0].name = "BY_REFERENCE";
json.evaluationStrategies[1] = {};
json.evaluationStrategies[1].comment = "Only applicable to object parameter or return values. The pointer to the object is passed by value but the object itself is not copied and changes to it are thus propagated out of the method context";
json.evaluationStrategies[1].id = 2;
json.evaluationStrategies[1].name = "BY_SHARING";
json.evaluationStrategies[2] = {};
json.evaluationStrategies[2].comment = "A parameter or return of a function passed by value which means a flat copy is used";
json.evaluationStrategies[2].id = 3;
json.evaluationStrategies[2].name = "BY_VALUE";
json.frameworks = [];
json.frameworks[0] = {};
json.frameworks[0].comment = "Java spring framework";
json.frameworks[0].id = 3;
json.frameworks[0].name = "SPRING";
json.frameworks[1] = {};
json.frameworks[1].comment = "Microsoft ASP.NET MVC";
json.frameworks[1].id = 11;
json.frameworks[1].name = "ASP_NET_MVC";
json.frameworks[2] = {};
json.frameworks[2].comment = "JAX-WS";
json.frameworks[2].id = 12;
json.frameworks[2].name = "JAXWS";
json.frameworks[3] = {};
json.frameworks[3].comment = "Framework facilities directly provided by Java";
json.frameworks[3].id = 14;
json.frameworks[3].name = "JAVA_INTERNAL";
json.frameworks[4] = {};
json.frameworks[4].comment = "Microsoft ASP.NET Web UI";
json.frameworks[4].id = 13;
json.frameworks[4].name = "ASP_NET_WEB_UI";
json.frameworks[5] = {};
json.frameworks[5].comment = "JAX-RS";
json.frameworks[5].id = 7;
json.frameworks[5].name = "JAXRS";
json.frameworks[6] = {};
json.frameworks[6].comment = "Dropwizard framework";
json.frameworks[6].id = 15;
json.frameworks[6].name = "DROPWIZARD";
json.frameworks[7] = {};
json.frameworks[7].comment = "Play framework";
json.frameworks[7].id = 1;
json.frameworks[7].name = "PLAY";
json.frameworks[8] = {};
json.frameworks[8].comment = "Spark micro web framework";
json.frameworks[8].id = 8;
json.frameworks[8].name = "SPARK";
json.frameworks[9] = {};
json.frameworks[9].comment = "Polyglot event-driven framework";
json.frameworks[9].id = 4;
json.frameworks[9].name = "VERTX";
json.frameworks[10] = {};
json.frameworks[10].comment = "JavaServer Faces";
json.frameworks[10].id = 5;
json.frameworks[10].name = "JSF";
json.frameworks[11] = {};
json.frameworks[11].comment = "Microsoft ASP.NET Web API";
json.frameworks[11].id = 10;
json.frameworks[11].name = "ASP_NET_WEB_API";
json.frameworks[12] = {};
json.frameworks[12].comment = "WCF HTTP and REST";
json.frameworks[12].id = 16;
json.frameworks[12].name = "WCF";
json.frameworks[13] = {};
json.frameworks[13].comment = "Google web toolkit";
json.frameworks[13].id = 2;
json.frameworks[13].name = "GWT";
json.frameworks[14] = {};
json.frameworks[14].comment = "Java Servlet based frameworks";
json.frameworks[14].id = 6;
json.frameworks[14].name = "SERVLET";
json.frameworks[15] = {};
json.frameworks[15].comment = "Microsoft ASP.NET Core";
json.frameworks[15].id = 9;
json.frameworks[15].name = "ASP_NET_CORE";
json.languages = [];
json.languages[0] = {};
json.languages[0].comment = "";
json.languages[0].id = 1;
json.languages[0].name = "JAVA";
json.languages[1] = {};
json.languages[1].comment = "";
json.languages[1].id = 2;
json.languages[1].name = "JAVASCRIPT";
json.languages[2] = {};
json.languages[2].comment = "";
json.languages[2].id = 3;
json.languages[2].name = "GOLANG";
json.languages[3] = {};
json.languages[3].comment = "";
json.languages[3].id = 4;
json.languages[3].name = "CSHARP";
json.languages[4] = {};
json.languages[4].comment = "";
json.languages[4].id = 5;
json.languages[4].name = "C";
json.languages[5] = {};
json.languages[5].comment = "";
json.languages[5].id = 6;
json.languages[5].name = "PYTHON";
json.languages[6] = {};
json.languages[6].comment = "";
json.languages[6].id = 7;
json.languages[6].name = "LLVM";
json.modifierTypes = [];
json.modifierTypes[0] = {};
json.modifierTypes[0].comment = "The static modifier";
json.modifierTypes[0].id = 1;
json.modifierTypes[0].name = "STATIC";
json.modifierTypes[1] = {};
json.modifierTypes[1].comment = "The public modifier";
json.modifierTypes[1].id = 2;
json.modifierTypes[1].name = "PUBLIC";
json.modifierTypes[2] = {};
json.modifierTypes[2].comment = "The protected modifier";
json.modifierTypes[2].id = 3;
json.modifierTypes[2].name = "PROTECTED";
json.modifierTypes[3] = {};
json.modifierTypes[3].comment = "The private modifier";
json.modifierTypes[3].id = 4;
json.modifierTypes[3].name = "PRIVATE";
json.modifierTypes[4] = {};
json.modifierTypes[4].comment = "The abstract modifier";
json.modifierTypes[4].id = 5;
json.modifierTypes[4].name = "ABSTRACT";
json.modifierTypes[5] = {};
json.modifierTypes[5].comment = "The native modifier";
json.modifierTypes[5].id = 6;
json.modifierTypes[5].name = "NATIVE";
json.modifierTypes[6] = {};
json.modifierTypes[6].comment = "The constructor modifier";
json.modifierTypes[6].id = 7;
json.modifierTypes[6].name = "CONSTRUCTOR";
json.modifierTypes[7] = {};
json.modifierTypes[7].comment = "The virtual modifier";
json.modifierTypes[7].id = 8;
json.modifierTypes[7].name = "VIRTUAL";
json.nodeBaseTraits = [];
json.nodeBaseTraits[0] = {};
json.nodeBaseTraits[0].comment = "";
json.nodeBaseTraits[0].hasKeys = [];
json.nodeBaseTraits[0].hasKeys[0] = "NAME";
json.nodeBaseTraits[0].name = "DECLARATION";
json.nodeBaseTraits[1] = {};
json.nodeBaseTraits[1].comment = "Expression as a specialisation of tracking point";
json.nodeBaseTraits[1].hasKeys = [];
json.nodeBaseTraits[1].hasKeys[0] = "CODE";
json.nodeBaseTraits[1].hasKeys[1] = "ORDER";
json.nodeBaseTraits[1].hasKeys[2] = "ARGUMENT_INDEX";
json.nodeBaseTraits[1].name = "EXPRESSION";
json.nodeBaseTraits[1]["extends"] = [];
json.nodeBaseTraits[1]["extends"][0] = "TRACKING_POINT";
json.nodeBaseTraits[1]["extends"][1] = "CFG_NODE";
json.nodeBaseTraits[1]["extends"][2] = "AST_NODE";
json.nodeBaseTraits[2] = {};
json.nodeBaseTraits[2].comment = "Formal input parameters, locals, and identifiers";
json.nodeBaseTraits[2].hasKeys = [];
json.nodeBaseTraits[2].hasKeys[0] = "NAME";
json.nodeBaseTraits[2].name = "LOCAL_LIKE";
json.nodeBaseTraits[3] = {};
json.nodeBaseTraits[3].comment = "Any node that can occur as part of a control flow graph";
json.nodeBaseTraits[3].hasKeys = [];
json.nodeBaseTraits[3].hasKeys[0] = "LINE_NUMBER";
json.nodeBaseTraits[3].hasKeys[1] = "COLUMN_NUMBER";
json.nodeBaseTraits[3].hasKeys[2] = "INTERNAL_FLAGS";
json.nodeBaseTraits[3].name = "CFG_NODE";
json.nodeBaseTraits[3]["extends"] = [];
json.nodeBaseTraits[3]["extends"][0] = "WITHIN_METHOD";
json.nodeBaseTraits[3]["extends"][1] = "AST_NODE";
json.nodeBaseTraits[4] = {};
json.nodeBaseTraits[4].comment = "Any node that can occur in a data flow";
json.nodeBaseTraits[4].hasKeys = [];
json.nodeBaseTraits[4].name = "TRACKING_POINT";
json.nodeBaseTraits[4]["extends"] = [];
json.nodeBaseTraits[4]["extends"][0] = "WITHIN_METHOD";
json.nodeBaseTraits[5] = {};
json.nodeBaseTraits[5].comment = "Any node that can exist in a method";
json.nodeBaseTraits[5].hasKeys = [];
json.nodeBaseTraits[5].name = "WITHIN_METHOD";
json.nodeBaseTraits[6] = {};
json.nodeBaseTraits[6].comment = "Any node that can exist in an abstract syntax tree";
json.nodeBaseTraits[6].hasKeys = [];
json.nodeBaseTraits[6].hasKeys[0] = "ORDER";
json.nodeBaseTraits[6].name = "AST_NODE";
json.nodeBaseTraits[7] = {};
json.nodeBaseTraits[7].comment = "Call representation";
json.nodeBaseTraits[7].hasKeys = [];
json.nodeBaseTraits[7].hasKeys[0] = "CODE";
json.nodeBaseTraits[7].hasKeys[1] = "NAME";
json.nodeBaseTraits[7].hasKeys[2] = "SIGNATURE";
json.nodeBaseTraits[7].name = "CALL_REPR";
json.nodeBaseTraits[7]["extends"] = [];
json.nodeBaseTraits[7]["extends"][0] = "CFG_NODE";
json.nodeKeys = [];
json.nodeKeys[0] = {};
json.nodeKeys[0].cardinality = "one";
json.nodeKeys[0].comment = "";
json.nodeKeys[0].id = 105;
json.nodeKeys[0].name = "NODE_LABEL";
json.nodeKeys[0].valueType = "string";
json.nodeKeys[1] = {};
json.nodeKeys[1].cardinality = "list";
json.nodeKeys[1].comment = "";
json.nodeKeys[1].id = 814;
json.nodeKeys[1].name = "CATEGORIES";
json.nodeKeys[1].valueType = "string";
json.nodeKeys[2] = {};
json.nodeKeys[2].cardinality = "list";
json.nodeKeys[2].comment = "The static types a TYPE_DECL inherits from. This property is matched against the FULL_NAME of TYPE nodes and thus it is required to have at least one TYPE node for each TYPE_FULL_NAME";
json.nodeKeys[2].id = 53;
json.nodeKeys[2].name = "INHERITS_FROM_TYPE_FULL_NAME";
json.nodeKeys[2].valueType = "string";
json.nodeKeys[3] = {};
json.nodeKeys[3].cardinality = "one";
json.nodeKeys[3].comment = "The FULL_NAME of a method. Used to link CALL and METHOD nodes. It is required to have exactly one METHOD node for each METHOD_FULL_NAME";
json.nodeKeys[3].id = 54;
json.nodeKeys[3].name = "METHOD_FULL_NAME";
json.nodeKeys[3].valueType = "string";
json.nodeKeys[4] = {};
json.nodeKeys[4].cardinality = "one";
json.nodeKeys[4].comment = "";
json.nodeKeys[4].id = 100;
json.nodeKeys[4].name = "SYMBOL";
json.nodeKeys[4].valueType = "string";
json.nodeKeys[5] = {};
json.nodeKeys[5].cardinality = "one";
json.nodeKeys[5].comment = "The dispatch type of a call, which is either static or dynamic. See dispatchTypes";
json.nodeKeys[5].id = 25;
json.nodeKeys[5].name = "DISPATCH_TYPE";
json.nodeKeys[5].valueType = "string";
json.nodeKeys[6] = {};
json.nodeKeys[6].cardinality = "zeroOrOne";
json.nodeKeys[6].comment = "";
json.nodeKeys[6].id = 113;
json.nodeKeys[6].name = "PARAMETER_INDEX";
json.nodeKeys[6].valueType = "int";
json.nodeKeys[7] = {};
json.nodeKeys[7].cardinality = "zeroOrOne";
json.nodeKeys[7].comment = "Column where the code starts";
json.nodeKeys[7].id = 11;
json.nodeKeys[7].name = "COLUMN_NUMBER";
json.nodeKeys[7].valueType = "int";
json.nodeKeys[8] = {};
json.nodeKeys[8].cardinality = "one";
json.nodeKeys[8].comment = "";
json.nodeKeys[8].id = 815;
json.nodeKeys[8].name = "EVAL_TYPE";
json.nodeKeys[8].valueType = "string";
json.nodeKeys[9] = {};
json.nodeKeys[9].cardinality = "one";
json.nodeKeys[9].comment = "";
json.nodeKeys[9].id = 107;
json.nodeKeys[9].name = "ANNOTATION_NAME";
json.nodeKeys[9].valueType = "string";
json.nodeKeys[10] = {};
json.nodeKeys[10].cardinality = "one";
json.nodeKeys[10].comment = "";
json.nodeKeys[10].id = 102;
json.nodeKeys[10].name = "METHOD_SHORT_NAME";
json.nodeKeys[10].valueType = "string";
json.nodeKeys[11] = {};
json.nodeKeys[11].cardinality = "one";
json.nodeKeys[11].comment = "Full path of canonical file that contained this node; will be linked into corresponding FILE nodes. Possible for METHOD, TYPE_DECL and NAMESPACE_BLOCK";
json.nodeKeys[11].id = 106;
json.nodeKeys[11].name = "FILENAME";
json.nodeKeys[11].valueType = "string";
json.nodeKeys[12] = {};
json.nodeKeys[12].cardinality = "zeroOrOne";
json.nodeKeys[12].comment = "Type full name of which a TYPE_DECL is an alias of";
json.nodeKeys[12].id = 158;
json.nodeKeys[12].name = "ALIAS_TYPE_FULL_NAME";
json.nodeKeys[12].valueType = "string";
json.nodeKeys[13] = {};
json.nodeKeys[13].cardinality = "zeroOrOne";
json.nodeKeys[13].comment = "Binary type signature";
json.nodeKeys[13].id = 14;
json.nodeKeys[13].name = "BINARY_SIGNATURE";
json.nodeKeys[13].valueType = "string";
json.nodeKeys[14] = {};
json.nodeKeys[14].cardinality = "zeroOrOne";
json.nodeKeys[14].comment = "Identifier which uniquely describes a CLOSURE_BINDING. This property is used to match captured LOCAL nodes with the corresponding CLOSURE_BINDING nodes";
json.nodeKeys[14].id = 50;
json.nodeKeys[14].name = "CLOSURE_BINDING_ID";
json.nodeKeys[14].valueType = "string";
json.nodeKeys[15] = {};
json.nodeKeys[15].cardinality = "one";
json.nodeKeys[15].comment = "Type name emitted by parser, only present for logical type UNKNOWN";
json.nodeKeys[15].id = 3;
json.nodeKeys[15].name = "PARSER_TYPE_NAME";
json.nodeKeys[15].valueType = "string";
json.nodeKeys[16] = {};
json.nodeKeys[16].cardinality = "one";
json.nodeKeys[16].comment = "Evaluation strategy for function parameters and return values. One of the values in \"evaluationStrategies\"";
json.nodeKeys[16].id = 15;
json.nodeKeys[16].name = "EVALUATION_STRATEGY";
json.nodeKeys[16].valueType = "string";
json.nodeKeys[17] = {};
json.nodeKeys[17].cardinality = "zeroOrOne";
json.nodeKeys[17].comment = "The depth first ordering number used to detect back edges in reducible CFGs";
json.nodeKeys[17].id = 17;
json.nodeKeys[17].name = "DEPTH_FIRST_ORDER";
json.nodeKeys[17].valueType = "int";
json.nodeKeys[18] = {};
json.nodeKeys[18].cardinality = "one";
json.nodeKeys[18].comment = "AST-children of CALL nodes have an argument index, that is used to match call-site arguments with callee parameters. Explicit parameters are numbered from 1 to N, while index 0 is reserved for implicit self / this parameter. CALLs without implicit parameter therefore have arguments starting with index 1. AST-children of BLOCK nodes may have an argument index as well; in this case, the last argument index determines the return-value of a BLOCK expression";
json.nodeKeys[18].id = 40;
json.nodeKeys[18].name = "ARGUMENT_INDEX";
json.nodeKeys[18].valueType = "int";
json.nodeKeys[19] = {};
json.nodeKeys[19].cardinality = "one";
json.nodeKeys[19].comment = "The static type decl of a TYPE. This property is matched against the FULL_NAME of TYPE_DECL nodes. It is required to have exactly one TYPE_DECL for each different TYPE_DECL_FULL_NAME";
json.nodeKeys[19].id = 52;
json.nodeKeys[19].name = "TYPE_DECL_FULL_NAME";
json.nodeKeys[19].valueType = "string";
json.nodeKeys[20] = {};
json.nodeKeys[20].cardinality = "one";
json.nodeKeys[20].comment = "Full name of an element, e.g., the class name along, including its package (e.g. \"io.shiftleft.dataflowenging.layers.dataflows.DataFlowRunner.run\"). In theory, the FULL_NAME just needs to be unique and is used for linking references, so a consecutive integer would be valid. In practice, this should be human readable";
json.nodeKeys[20].id = 6;
json.nodeKeys[20].name = "FULL_NAME";
json.nodeKeys[20].valueType = "string";
json.nodeKeys[21] = {};
json.nodeKeys[21].cardinality = "one";
json.nodeKeys[21].comment = "The type of the AST parent. Since this is only used in some parts of the graph the list does not include all possible parents by intention. Possible parents: METHOD, TYPE_DECL, NAMESPACE_BLOCK";
json.nodeKeys[21].id = 56;
json.nodeKeys[21].name = "AST_PARENT_TYPE";
json.nodeKeys[21].valueType = "string";
json.nodeKeys[22] = {};
json.nodeKeys[22].cardinality = "one";
json.nodeKeys[22].comment = "";
json.nodeKeys[22].id = 108;
json.nodeKeys[22].name = "ANNOTATION_FULL_NAME";
json.nodeKeys[22].valueType = "string";
json.nodeKeys[23] = {};
json.nodeKeys[23].cardinality = "one";
json.nodeKeys[23].comment = "The code snippet the node represents";
json.nodeKeys[23].id = 21;
json.nodeKeys[23].name = "CODE";
json.nodeKeys[23].valueType = "string";
json.nodeKeys[24] = {};
json.nodeKeys[24].cardinality = "one";
json.nodeKeys[24].comment = "General ordering property, such that the children of each AST-node are typically numbered from 1, ..., N (this is not enforced). The ordering has no technical meaning, but is used for pretty printing and OUGHT TO reflect order in the source code";
json.nodeKeys[24].id = 4;
json.nodeKeys[24].name = "ORDER";
json.nodeKeys[24].valueType = "int";
json.nodeKeys[25] = {};
json.nodeKeys[25].cardinality = "zeroOrOne";
json.nodeKeys[25].comment = "Line where the code starts";
json.nodeKeys[25].id = 2;
json.nodeKeys[25].name = "LINE_NUMBER";
json.nodeKeys[25].valueType = "int";
json.nodeKeys[26] = {};
json.nodeKeys[26].cardinality = "one";
json.nodeKeys[26].comment = "";
json.nodeKeys[26].id = 117;
json.nodeKeys[26].name = "CATEGORY";
json.nodeKeys[26].valueType = "string";
json.nodeKeys[27] = {};
json.nodeKeys[27].cardinality = "zeroOrOne";
json.nodeKeys[27].comment = "Marks that a method has at least one mapping defined from the policies";
json.nodeKeys[27].id = 23;
json.nodeKeys[27].name = "HAS_MAPPING";
json.nodeKeys[27].valueType = "boolean";
json.nodeKeys[28] = {};
json.nodeKeys[28].cardinality = "one";
json.nodeKeys[28].comment = "Canonical token of a FIELD_IDENTIFIER. Typically identical to the CODE field, but canonicalized according to source language semantics. Human readable names are preferable. FIELD_IDENTIFIERs must share identical CANONICAL_NAME if and only if they alias, e.g. in C-style unions (if the aliasing relationship is unknown or there are partial overlaps, then one must make a reasonable guess, and trade off between false negatives and false positives)";
json.nodeKeys[28].id = 2001092;
json.nodeKeys[28].name = "CANONICAL_NAME";
json.nodeKeys[28].valueType = "string";
json.nodeKeys[29] = {};
json.nodeKeys[29].cardinality = "one";
json.nodeKeys[29].comment = "Method signature. The format is defined by the language front-end, and the backend simply compares strings to resolve function overloading, i.e. match call-sites to METHODs. In theory, consecutive integers would be valid, but in practice this should be human readable";
json.nodeKeys[29].id = 22;
json.nodeKeys[29].name = "SIGNATURE";
json.nodeKeys[29].valueType = "string";
json.nodeKeys[30] = {};
json.nodeKeys[30].cardinality = "one";
json.nodeKeys[30].comment = "";
json.nodeKeys[30].id = 104;
json.nodeKeys[30].name = "CLASS_NAME";
json.nodeKeys[30].valueType = "string";
json.nodeKeys[31] = {};
json.nodeKeys[31].cardinality = "one";
json.nodeKeys[31].comment = "A version, given as a string";
json.nodeKeys[31].id = 13;
json.nodeKeys[31].name = "VERSION";
json.nodeKeys[31].valueType = "string";
json.nodeKeys[32] = {};
json.nodeKeys[32].cardinality = "one";
json.nodeKeys[32].comment = "";
json.nodeKeys[32].id = 110;
json.nodeKeys[32].name = "IS_STATIC";
json.nodeKeys[32].valueType = "boolean";
json.nodeKeys[33] = {};
json.nodeKeys[33].cardinality = "one";
json.nodeKeys[33].comment = "";
json.nodeKeys[33].id = 103;
json.nodeKeys[33].name = "PACKAGE_NAME";
json.nodeKeys[33].valueType = "string";
json.nodeKeys[34] = {};
json.nodeKeys[34].cardinality = "zeroOrOne";
json.nodeKeys[34].comment = "Line where the code ends";
json.nodeKeys[34].id = 12;
json.nodeKeys[34].name = "LINE_NUMBER_END";
json.nodeKeys[34].valueType = "int";
json.nodeKeys[35] = {};
json.nodeKeys[35].cardinality = "one";
json.nodeKeys[35].comment = "The FULL_NAME of a the AST parent of an entity";
json.nodeKeys[35].id = 57;
json.nodeKeys[35].name = "AST_PARENT_FULL_NAME";
json.nodeKeys[35].valueType = "string";
json.nodeKeys[36] = {};
json.nodeKeys[36].cardinality = "one";
json.nodeKeys[36].comment = "";
json.nodeKeys[36].id = 111;
json.nodeKeys[36].name = "VAR_TYPE";
json.nodeKeys[36].valueType = "string";
json.nodeKeys[37] = {};
json.nodeKeys[37].cardinality = "one";
json.nodeKeys[37].comment = "";
json.nodeKeys[37].id = 132;
json.nodeKeys[37].name = "CLASS_SHORT_NAME";
json.nodeKeys[37].valueType = "string";
json.nodeKeys[38] = {};
json.nodeKeys[38].cardinality = "one";
json.nodeKeys[38].comment = "The programming language this graph originates from";
json.nodeKeys[38].id = 19;
json.nodeKeys[38].name = "LANGUAGE";
json.nodeKeys[38].valueType = "string";
json.nodeKeys[39] = {};
json.nodeKeys[39].cardinality = "zeroOrOne";
json.nodeKeys[39].comment = "True if the referenced method is never overridden by the subclasses and false otherwise";
json.nodeKeys[39].id = 1002;
json.nodeKeys[39].name = "IS_METHOD_NEVER_OVERRIDDEN";
json.nodeKeys[39].valueType = "boolean";
json.nodeKeys[40] = {};
json.nodeKeys[40].cardinality = "zeroOrOne";
json.nodeKeys[40].comment = "Indicates whether a call was already resolved. If not set this means not yet resolved";
json.nodeKeys[40].id = 24;
json.nodeKeys[40].name = "RESOLVED";
json.nodeKeys[40].valueType = "boolean";
json.nodeKeys[41] = {};
json.nodeKeys[41].cardinality = "list";
json.nodeKeys[41].comment = "Sub directories of the policy directory that should be loaded when processing the CPG";
json.nodeKeys[41].id = 119;
json.nodeKeys[41].name = "POLICY_DIRECTORIES";
json.nodeKeys[41].valueType = "string";
json.nodeKeys[42] = {};
json.nodeKeys[42].cardinality = "one";
json.nodeKeys[42].comment = "Indicates the modifier which is represented by a MODIFIER node. See modifierTypes";
json.nodeKeys[42].id = 26;
json.nodeKeys[42].name = "MODIFIER_TYPE";
json.nodeKeys[42].valueType = "string";
json.nodeKeys[43] = {};
json.nodeKeys[43].cardinality = "one";
json.nodeKeys[43].comment = "The static type of an entity. E.g. expressions, local, parameters etc. This property is matched against the FULL_NAME of TYPE nodes and thus it is required to have at least one TYPE node for each TYPE_FULL_NAME";
json.nodeKeys[43].id = 51;
json.nodeKeys[43].name = "TYPE_FULL_NAME";
json.nodeKeys[43].valueType = "string";
json.nodeKeys[44] = {};
json.nodeKeys[44].cardinality = "one";
json.nodeKeys[44].comment = "Indicates that the construct (METHOD or TYPE_DECL) is external, that is, it is referenced but not defined in the code (applies both to insular parsing and to library functions where we have header files only)";
json.nodeKeys[44].id = 7;
json.nodeKeys[44].name = "IS_EXTERNAL";
json.nodeKeys[44].valueType = "boolean";
json.nodeKeys[45] = {};
json.nodeKeys[45].cardinality = "zeroOrOne";
json.nodeKeys[45].comment = "";
json.nodeKeys[45].id = 122;
json.nodeKeys[45].name = "SPID";
json.nodeKeys[45].valueType = "string";
json.nodeKeys[46] = {};
json.nodeKeys[46].cardinality = "zeroOrOne";
json.nodeKeys[46].comment = "Deprecated";
json.nodeKeys[46].id = 55;
json.nodeKeys[46].name = "METHOD_INST_FULL_NAME";
json.nodeKeys[46].valueType = "string";
json.nodeKeys[47] = {};
json.nodeKeys[47].cardinality = "zeroOrOne";
json.nodeKeys[47].comment = "Internal flags";
json.nodeKeys[47].id = 78;
json.nodeKeys[47].name = "INTERNAL_FLAGS";
json.nodeKeys[47].valueType = "int";
json.nodeKeys[48] = {};
json.nodeKeys[48].cardinality = "one";
json.nodeKeys[48].comment = "Name of represented object, e.g., method name (e.g. \"run\")";
json.nodeKeys[48].id = 5;
json.nodeKeys[48].name = "NAME";
json.nodeKeys[48].valueType = "string";
json.nodeKeys[49] = {};
json.nodeKeys[49].cardinality = "one";
json.nodeKeys[49].comment = "";
json.nodeKeys[49].id = 99;
json.nodeKeys[49].name = "NODE_ID";
json.nodeKeys[49].valueType = "string";
json.nodeKeys[50] = {};
json.nodeKeys[50].cardinality = "one";
json.nodeKeys[50].comment = "Tag value";
json.nodeKeys[50].id = 8;
json.nodeKeys[50].name = "VALUE";
json.nodeKeys[50].valueType = "string";
json.nodeKeys[51] = {};
json.nodeKeys[51].cardinality = "one";
json.nodeKeys[51].comment = "";
json.nodeKeys[51].id = 115;
json.nodeKeys[51].name = "SOURCE_TYPE";
json.nodeKeys[51].valueType = "string";
json.nodeKeys[52] = {};
json.nodeKeys[52].cardinality = "list";
json.nodeKeys[52].comment = "";
json.nodeKeys[52].id = 123;
json.nodeKeys[52].name = "LITERALS_TO_SINK";
json.nodeKeys[52].valueType = "string";
json.nodeKeys[53] = {};
json.nodeKeys[53].cardinality = "one";
json.nodeKeys[53].comment = "Content of CONFIG_FILE node";
json.nodeKeys[53].id = 20;
json.nodeKeys[53].name = "CONTENT";
json.nodeKeys[53].valueType = "string";
json.nodeKeys[54] = {};
json.nodeKeys[54].cardinality = "zeroOrOne";
json.nodeKeys[54].comment = "The original name of the (potentially mangled) captured variable";
json.nodeKeys[54].id = 159;
json.nodeKeys[54].name = "CLOSURE_ORIGINAL_NAME";
json.nodeKeys[54].valueType = "string";
json.nodeKeys[55] = {};
json.nodeKeys[55].cardinality = "list";
json.nodeKeys[55].comment = "Names of overlays applied to this graph, in order of application";
json.nodeKeys[55].id = 118;
json.nodeKeys[55].name = "OVERLAYS";
json.nodeKeys[55].valueType = "string";
json.nodeKeys[56] = {};
json.nodeKeys[56].cardinality = "zeroOrOne";
json.nodeKeys[56].comment = "Column where the code ends";
json.nodeKeys[56].id = 16;
json.nodeKeys[56].name = "COLUMN_NUMBER_END";
json.nodeKeys[56].valueType = "int";
json.nodeKeys[57] = {};
json.nodeKeys[57].cardinality = "one";
json.nodeKeys[57].comment = "";
json.nodeKeys[57].id = 114;
json.nodeKeys[57].name = "FINGERPRINT";
json.nodeKeys[57].valueType = "string";
json.nodeKeys[58] = {};
json.nodeKeys[58].cardinality = "one";
json.nodeKeys[58].comment = "";
json.nodeKeys[58].id = 131;
json.nodeKeys[58].name = "KEY";
json.nodeKeys[58].valueType = "string";
json.nodeKeys[59] = {};
json.nodeKeys[59].cardinality = "one";
json.nodeKeys[59].comment = "";
json.nodeKeys[59].id = 121;
json.nodeKeys[59].name = "PATH";
json.nodeKeys[59].valueType = "string";
json.nodeKeys[60] = {};
json.nodeKeys[60].cardinality = "list";
json.nodeKeys[60].comment = "Type hint for the dynamic type";
json.nodeKeys[60].id = 1591;
json.nodeKeys[60].name = "DYNAMIC_TYPE_HINT_FULL_NAME";
json.nodeKeys[60].valueType = "string";
json.nodeKeys[61] = {};
json.nodeKeys[61].cardinality = "one";
json.nodeKeys[61].comment = "";
json.nodeKeys[61].id = 112;
json.nodeKeys[61].name = "EVALUATION_TYPE";
json.nodeKeys[61].valueType = "string";
json.nodeKeys[62] = {};
json.nodeKeys[62].cardinality = "one";
json.nodeKeys[62].comment = "";
json.nodeKeys[62].id = 813;
json.nodeKeys[62].name = "PATTERN";
json.nodeKeys[62].valueType = "string";
json.nodeKeys[63] = {};
json.nodeKeys[63].cardinality = "zeroOrOne";
json.nodeKeys[63].comment = "The group ID for a dependency";
json.nodeKeys[63].id = 58;
json.nodeKeys[63].name = "DEPENDENCY_GROUP_ID";
json.nodeKeys[63].valueType = "string";
json.nodeKeys[64] = {};
json.nodeKeys[64].cardinality = "one";
json.nodeKeys[64].comment = "";
json.nodeKeys[64].id = 116;
json.nodeKeys[64].name = "SINK_TYPE";
json.nodeKeys[64].valueType = "string";
json.nodeTypes = [];
json.nodeTypes[0] = {};
json.nodeTypes[0].comment = "A local variable";
json.nodeTypes[0].id = 23;
json.nodeTypes[0].is = [];
json.nodeTypes[0].is[0] = "DECLARATION";
json.nodeTypes[0].is[1] = "LOCAL_LIKE";
json.nodeTypes[0].is[2] = "AST_NODE";
json.nodeTypes[0].keys = [];
json.nodeTypes[0].keys[0] = "CODE";
json.nodeTypes[0].keys[1] = "NAME";
json.nodeTypes[0].keys[2] = "CLOSURE_BINDING_ID";
json.nodeTypes[0].keys[3] = "TYPE_FULL_NAME";
json.nodeTypes[0].keys[4] = "DYNAMIC_TYPE_HINT_FULL_NAME";
json.nodeTypes[0].keys[5] = "LINE_NUMBER";
json.nodeTypes[0].keys[6] = "COLUMN_NUMBER";
json.nodeTypes[0].keys[7] = "ORDER";
json.nodeTypes[0].name = "LOCAL";
json.nodeTypes[0].outEdges = [];
json.nodeTypes[0].outEdges[0] = {};
json.nodeTypes[0].outEdges[0].edgeName = "TAGGED_BY";
json.nodeTypes[0].outEdges[0].inNodes = [];
json.nodeTypes[0].outEdges[0].inNodes[0] = {};
json.nodeTypes[0].outEdges[0].inNodes[0].name = "TAG";
json.nodeTypes[0].outEdges[1] = {};
json.nodeTypes[0].outEdges[1].edgeName = "DYNAMIC_TYPE";
json.nodeTypes[0].outEdges[1].inNodes = [];
json.nodeTypes[0].outEdges[1].inNodes[0] = {};
json.nodeTypes[0].outEdges[1].inNodes[0].name = "METHOD";
json.nodeTypes[0].outEdges[1].inNodes[1] = {};
json.nodeTypes[0].outEdges[1].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[0].outEdges[2] = {};
json.nodeTypes[0].outEdges[2].edgeName = "CAPTURED_BY";
json.nodeTypes[0].outEdges[2].inNodes = [];
json.nodeTypes[0].outEdges[2].inNodes[0] = {};
json.nodeTypes[0].outEdges[2].inNodes[0].name = "CLOSURE_BINDING";
json.nodeTypes[0].outEdges[3] = {};
json.nodeTypes[0].outEdges[3].edgeName = "CONTAINS_NODE";
json.nodeTypes[0].outEdges[3].inNodes = [];
json.nodeTypes[0].outEdges[3].inNodes[0] = {};
json.nodeTypes[0].outEdges[3].inNodes[0].name = "NODE";
json.nodeTypes[0].outEdges[4] = {};
json.nodeTypes[0].outEdges[4].edgeName = "EVAL_TYPE";
json.nodeTypes[0].outEdges[4].inNodes = [];
json.nodeTypes[0].outEdges[4].inNodes[0] = {};
json.nodeTypes[0].outEdges[4].inNodes[0].name = "TYPE";
json.nodeTypes[1] = {};
json.nodeTypes[1].comment = "A comment";
json.nodeTypes[1].id = 511;
json.nodeTypes[1].keys = [];
json.nodeTypes[1].keys[0] = "LINE_NUMBER";
json.nodeTypes[1].keys[1] = "CODE";
json.nodeTypes[1].name = "COMMENT";
json.nodeTypes[1].outEdges = [];
json.nodeTypes[1].outEdges[0] = {};
json.nodeTypes[1].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[1].outEdges[0].inNodes = [];
json.nodeTypes[1].outEdges[0].inNodes[0] = {};
json.nodeTypes[1].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[2] = {};
json.nodeTypes[2].comment = "A method/function/procedure";
json.nodeTypes[2].id = 1;
json.nodeTypes[2].is = [];
json.nodeTypes[2].is[0] = "DECLARATION";
json.nodeTypes[2].is[1] = "CFG_NODE";
json.nodeTypes[2].is[2] = "AST_NODE";
json.nodeTypes[2].keys = [];
json.nodeTypes[2].keys[0] = "NAME";
json.nodeTypes[2].keys[1] = "FULL_NAME";
json.nodeTypes[2].keys[2] = "IS_EXTERNAL";
json.nodeTypes[2].keys[3] = "SIGNATURE";
json.nodeTypes[2].keys[4] = "AST_PARENT_TYPE";
json.nodeTypes[2].keys[5] = "AST_PARENT_FULL_NAME";
json.nodeTypes[2].keys[6] = "LINE_NUMBER";
json.nodeTypes[2].keys[7] = "COLUMN_NUMBER";
json.nodeTypes[2].keys[8] = "LINE_NUMBER_END";
json.nodeTypes[2].keys[9] = "COLUMN_NUMBER_END";
json.nodeTypes[2].keys[10] = "ORDER";
json.nodeTypes[2].keys[11] = "FILENAME";
json.nodeTypes[2].keys[12] = "HAS_MAPPING";
json.nodeTypes[2].keys[13] = "DEPTH_FIRST_ORDER";
json.nodeTypes[2].keys[14] = "INTERNAL_FLAGS";
json.nodeTypes[2].keys[15] = "BINARY_SIGNATURE";
json.nodeTypes[2].name = "METHOD";
json.nodeTypes[2].outEdges = [];
json.nodeTypes[2].outEdges[0] = {};
json.nodeTypes[2].outEdges[0].edgeName = "SOURCE_FILE";
json.nodeTypes[2].outEdges[0].inNodes = [];
json.nodeTypes[2].outEdges[0].inNodes[0] = {};
json.nodeTypes[2].outEdges[0].inNodes[0].name = "FILE";
json.nodeTypes[2].outEdges[1] = {};
json.nodeTypes[2].outEdges[1].edgeName = "TAGGED_BY";
json.nodeTypes[2].outEdges[1].inNodes = [];
json.nodeTypes[2].outEdges[1].inNodes[0] = {};
json.nodeTypes[2].outEdges[1].inNodes[0].name = "TAG";
json.nodeTypes[2].outEdges[2] = {};
json.nodeTypes[2].outEdges[2].edgeName = "CONTAINS";
json.nodeTypes[2].outEdges[2].inNodes = [];
json.nodeTypes[2].outEdges[2].inNodes[0] = {};
json.nodeTypes[2].outEdges[2].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[2].outEdges[2].inNodes[1] = {};
json.nodeTypes[2].outEdges[2].inNodes[1].name = "METHOD_REF";
json.nodeTypes[2].outEdges[2].inNodes[2] = {};
json.nodeTypes[2].outEdges[2].inNodes[2].name = "CALL";
json.nodeTypes[2].outEdges[2].inNodes[3] = {};
json.nodeTypes[2].outEdges[2].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[2].outEdges[2].inNodes[4] = {};
json.nodeTypes[2].outEdges[2].inNodes[4].name = "RETURN";
json.nodeTypes[2].outEdges[2].inNodes[5] = {};
json.nodeTypes[2].outEdges[2].inNodes[5].name = "LITERAL";
json.nodeTypes[2].outEdges[2].inNodes[6] = {};
json.nodeTypes[2].outEdges[2].inNodes[6].name = "UNKNOWN";
json.nodeTypes[2].outEdges[2].inNodes[7] = {};
json.nodeTypes[2].outEdges[2].inNodes[7].name = "BLOCK";
json.nodeTypes[2].outEdges[3] = {};
json.nodeTypes[2].outEdges[3].edgeName = "REACHING_DEF";
json.nodeTypes[2].outEdges[3].inNodes = [];
json.nodeTypes[2].outEdges[3].inNodes[0] = {};
json.nodeTypes[2].outEdges[3].inNodes[0].name = "CALL";
json.nodeTypes[2].outEdges[3].inNodes[1] = {};
json.nodeTypes[2].outEdges[3].inNodes[1].name = "RETURN";
json.nodeTypes[2].outEdges[4] = {};
json.nodeTypes[2].outEdges[4].edgeName = "CFG";
json.nodeTypes[2].outEdges[4].inNodes = [];
json.nodeTypes[2].outEdges[4].inNodes[0] = {};
json.nodeTypes[2].outEdges[4].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[2].outEdges[4].inNodes[1] = {};
json.nodeTypes[2].outEdges[4].inNodes[1].name = "METHOD_REF";
json.nodeTypes[2].outEdges[4].inNodes[2] = {};
json.nodeTypes[2].outEdges[4].inNodes[2].name = "CALL";
json.nodeTypes[2].outEdges[4].inNodes[3] = {};
json.nodeTypes[2].outEdges[4].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[2].outEdges[4].inNodes[4] = {};
json.nodeTypes[2].outEdges[4].inNodes[4].name = "RETURN";
json.nodeTypes[2].outEdges[4].inNodes[5] = {};
json.nodeTypes[2].outEdges[4].inNodes[5].name = "LITERAL";
json.nodeTypes[2].outEdges[4].inNodes[6] = {};
json.nodeTypes[2].outEdges[4].inNodes[6].cardinality = "0-1:0-1";
json.nodeTypes[2].outEdges[4].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[2].outEdges[4].inNodes[7] = {};
json.nodeTypes[2].outEdges[4].inNodes[7].name = "UNKNOWN";
json.nodeTypes[2].outEdges[4].inNodes[8] = {};
json.nodeTypes[2].outEdges[4].inNodes[8].name = "BLOCK";
json.nodeTypes[2].outEdges[5] = {};
json.nodeTypes[2].outEdges[5].edgeName = "AST";
json.nodeTypes[2].outEdges[5].inNodes = [];
json.nodeTypes[2].outEdges[5].inNodes[0] = {};
json.nodeTypes[2].outEdges[5].inNodes[0].name = "IMPLICIT_CALL";
json.nodeTypes[2].outEdges[5].inNodes[1] = {};
json.nodeTypes[2].outEdges[5].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[2].outEdges[5].inNodes[2] = {};
json.nodeTypes[2].outEdges[5].inNodes[2].name = "MODIFIER";
json.nodeTypes[2].outEdges[5].inNodes[3] = {};
json.nodeTypes[2].outEdges[5].inNodes[3].name = "METHOD_PARAMETER_IN";
json.nodeTypes[2].outEdges[5].inNodes[4] = {};
json.nodeTypes[2].outEdges[5].inNodes[4].name = "ANNOTATION";
json.nodeTypes[2].outEdges[5].inNodes[5] = {};
json.nodeTypes[2].outEdges[5].inNodes[5].name = "METHOD_PARAMETER_OUT";
json.nodeTypes[2].outEdges[5].inNodes[6] = {};
json.nodeTypes[2].outEdges[5].inNodes[6].name = "METHOD";
json.nodeTypes[2].outEdges[5].inNodes[7] = {};
json.nodeTypes[2].outEdges[5].inNodes[7].name = "TYPE_PARAMETER";
json.nodeTypes[2].outEdges[5].inNodes[8] = {};
json.nodeTypes[2].outEdges[5].inNodes[8].cardinality = "1:1";
json.nodeTypes[2].outEdges[5].inNodes[8].name = "METHOD_RETURN";
json.nodeTypes[2].outEdges[5].inNodes[9] = {};
json.nodeTypes[2].outEdges[5].inNodes[9].cardinality = "1:1";
json.nodeTypes[2].outEdges[5].inNodes[9].name = "BLOCK";
json.nodeTypes[2].outEdges[6] = {};
json.nodeTypes[2].outEdges[6].edgeName = "DOMINATE";
json.nodeTypes[2].outEdges[6].inNodes = [];
json.nodeTypes[2].outEdges[6].inNodes[0] = {};
json.nodeTypes[2].outEdges[6].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[2].outEdges[6].inNodes[1] = {};
json.nodeTypes[2].outEdges[6].inNodes[1].name = "METHOD_REF";
json.nodeTypes[2].outEdges[6].inNodes[2] = {};
json.nodeTypes[2].outEdges[6].inNodes[2].name = "CALL";
json.nodeTypes[2].outEdges[6].inNodes[3] = {};
json.nodeTypes[2].outEdges[6].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[2].outEdges[6].inNodes[4] = {};
json.nodeTypes[2].outEdges[6].inNodes[4].name = "RETURN";
json.nodeTypes[2].outEdges[6].inNodes[5] = {};
json.nodeTypes[2].outEdges[6].inNodes[5].name = "LITERAL";
json.nodeTypes[2].outEdges[6].inNodes[6] = {};
json.nodeTypes[2].outEdges[6].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[2].outEdges[6].inNodes[7] = {};
json.nodeTypes[2].outEdges[6].inNodes[7].name = "UNKNOWN";
json.nodeTypes[2].outEdges[6].inNodes[8] = {};
json.nodeTypes[2].outEdges[6].inNodes[8].name = "BLOCK";
json.nodeTypes[2].outEdges[7] = {};
json.nodeTypes[2].outEdges[7].edgeName = "CONTAINS_NODE";
json.nodeTypes[2].outEdges[7].inNodes = [];
json.nodeTypes[2].outEdges[7].inNodes[0] = {};
json.nodeTypes[2].outEdges[7].inNodes[0].name = "NODE";
json.nodeTypes[3] = {};
json.nodeTypes[3].comment = "A string tag";
json.nodeTypes[3].id = 24;
json.nodeTypes[3].keys = [];
json.nodeTypes[3].keys[0] = "NAME";
json.nodeTypes[3].keys[1] = "VALUE";
json.nodeTypes[3].name = "TAG";
json.nodeTypes[3].outEdges = [];
json.nodeTypes[3].outEdges[0] = {};
json.nodeTypes[3].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[3].outEdges[0].inNodes = [];
json.nodeTypes[3].outEdges[0].inNodes[0] = {};
json.nodeTypes[3].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[4] = {};
json.nodeTypes[4].comment = "A literal value assigned to an ANNOTATION_PARAMETER";
json.nodeTypes[4].id = 49;
json.nodeTypes[4].is = [];
json.nodeTypes[4].is[0] = "EXPRESSION";
json.nodeTypes[4].keys = [];
json.nodeTypes[4].keys[0] = "DEPTH_FIRST_ORDER";
json.nodeTypes[4].keys[1] = "INTERNAL_FLAGS";
json.nodeTypes[4].keys[2] = "CODE";
json.nodeTypes[4].keys[3] = "NAME";
json.nodeTypes[4].keys[4] = "ORDER";
json.nodeTypes[4].keys[5] = "ARGUMENT_INDEX";
json.nodeTypes[4].keys[6] = "COLUMN_NUMBER";
json.nodeTypes[4].keys[7] = "LINE_NUMBER";
json.nodeTypes[4].name = "ANNOTATION_LITERAL";
json.nodeTypes[4].outEdges = [];
json.nodeTypes[4].outEdges[0] = {};
json.nodeTypes[4].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[4].outEdges[0].inNodes = [];
json.nodeTypes[4].outEdges[0].inNodes[0] = {};
json.nodeTypes[4].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[5] = {};
json.nodeTypes[5].comment = "";
json.nodeTypes[5].containedNodes = [];
json.nodeTypes[5].containedNodes[0] = {};
json.nodeTypes[5].containedNodes[0].cardinality = "list";
json.nodeTypes[5].containedNodes[0].localName = "dataTags";
json.nodeTypes[5].containedNodes[0].nodeType = "TAG";
json.nodeTypes[5].containedNodes[1] = {};
json.nodeTypes[5].containedNodes[1].cardinality = "list";
json.nodeTypes[5].containedNodes[1].localName = "sourceDescriptorTags";
json.nodeTypes[5].containedNodes[1].nodeType = "TAG";
json.nodeTypes[5].containedNodes[2] = {};
json.nodeTypes[5].containedNodes[2].cardinality = "list";
json.nodeTypes[5].containedNodes[2].localName = "sinkDescriptorTags";
json.nodeTypes[5].containedNodes[2].nodeType = "TAG";
json.nodeTypes[5].containedNodes[3] = {};
json.nodeTypes[5].containedNodes[3].cardinality = "list";
json.nodeTypes[5].containedNodes[3].localName = "sourceTags";
json.nodeTypes[5].containedNodes[3].nodeType = "TAG";
json.nodeTypes[5].containedNodes[4] = {};
json.nodeTypes[5].containedNodes[4].cardinality = "list";
json.nodeTypes[5].containedNodes[4].localName = "dstTags";
json.nodeTypes[5].containedNodes[4].nodeType = "TAG";
json.nodeTypes[5].containedNodes[5] = {};
json.nodeTypes[5].containedNodes[5].cardinality = "one";
json.nodeTypes[5].containedNodes[5].localName = "source";
json.nodeTypes[5].containedNodes[5].nodeType = "SOURCE";
json.nodeTypes[5].containedNodes[6] = {};
json.nodeTypes[5].containedNodes[6].cardinality = "one";
json.nodeTypes[5].containedNodes[6].localName = "sink";
json.nodeTypes[5].containedNodes[6].nodeType = "SINK";
json.nodeTypes[5].containedNodes[7] = {};
json.nodeTypes[5].containedNodes[7].cardinality = "list";
json.nodeTypes[5].containedNodes[7].localName = "transforms";
json.nodeTypes[5].containedNodes[7].nodeType = "TRANSFORM";
json.nodeTypes[5].containedNodes[8] = {};
json.nodeTypes[5].containedNodes[8].cardinality = "list";
json.nodeTypes[5].containedNodes[8].localName = "sourceDescriptorFlows";
json.nodeTypes[5].containedNodes[8].nodeType = "FLOW";
json.nodeTypes[5].containedNodes[9] = {};
json.nodeTypes[5].containedNodes[9].cardinality = "list";
json.nodeTypes[5].containedNodes[9].localName = "sinkDescriptorFlows";
json.nodeTypes[5].containedNodes[9].nodeType = "FLOW";
json.nodeTypes[5].containedNodes[10] = {};
json.nodeTypes[5].containedNodes[10].cardinality = "one";
json.nodeTypes[5].containedNodes[10].localName = "primaryFlow";
json.nodeTypes[5].containedNodes[10].nodeType = "FLOW";
json.nodeTypes[5].containedNodes[11] = {};
json.nodeTypes[5].containedNodes[11].cardinality = "list";
json.nodeTypes[5].containedNodes[11].localName = "triggerMethods";
json.nodeTypes[5].containedNodes[11].nodeType = "METHOD";
json.nodeTypes[5].id = 212;
json.nodeTypes[5].keys = [];
json.nodeTypes[5].keys[0] = "FINGERPRINT";
json.nodeTypes[5].keys[1] = "LITERALS_TO_SINK";
json.nodeTypes[5].name = "IOFLOW";
json.nodeTypes[5].outEdges = [];
json.nodeTypes[5].outEdges[0] = {};
json.nodeTypes[5].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[5].outEdges[0].inNodes = [];
json.nodeTypes[5].outEdges[0].inNodes[0] = {};
json.nodeTypes[5].outEdges[0].inNodes[0].name = "SOURCE";
json.nodeTypes[5].outEdges[0].inNodes[1] = {};
json.nodeTypes[5].outEdges[0].inNodes[1].name = "TAG";
json.nodeTypes[5].outEdges[0].inNodes[2] = {};
json.nodeTypes[5].outEdges[0].inNodes[2].name = "FLOW";
json.nodeTypes[5].outEdges[0].inNodes[3] = {};
json.nodeTypes[5].outEdges[0].inNodes[3].name = "TRANSFORM";
json.nodeTypes[5].outEdges[0].inNodes[4] = {};
json.nodeTypes[5].outEdges[0].inNodes[4].name = "SINK";
json.nodeTypes[5].outEdges[0].inNodes[5] = {};
json.nodeTypes[5].outEdges[0].inNodes[5].name = "NODE";
json.nodeTypes[5].outEdges[0].inNodes[6] = {};
json.nodeTypes[5].outEdges[0].inNodes[6].name = "METHOD";
json.nodeTypes[6] = {};
json.nodeTypes[6].comment = "";
json.nodeTypes[6].containedNodes = [];
json.nodeTypes[6].containedNodes[0] = {};
json.nodeTypes[6].containedNodes[0].cardinality = "list";
json.nodeTypes[6].containedNodes[0].localName = "triggerCallChains";
json.nodeTypes[6].containedNodes[0].nodeType = "CALL_CHAIN";
json.nodeTypes[6].containedNodes[1] = {};
json.nodeTypes[6].containedNodes[1].cardinality = "list";
json.nodeTypes[6].containedNodes[1].localName = "descriptorFlows";
json.nodeTypes[6].containedNodes[1].nodeType = "FLOW";
json.nodeTypes[6].containedNodes[2] = {};
json.nodeTypes[6].containedNodes[2].cardinality = "one";
json.nodeTypes[6].containedNodes[2].localName = "call";
json.nodeTypes[6].containedNodes[2].nodeType = "CALL";
json.nodeTypes[6].containedNodes[3] = {};
json.nodeTypes[6].containedNodes[3].cardinality = "one";
json.nodeTypes[6].containedNodes[3].localName = "sink";
json.nodeTypes[6].containedNodes[3].nodeType = "SINK";
json.nodeTypes[6].id = 211;
json.nodeTypes[6].keys = [];
json.nodeTypes[6].name = "TRANSFORM";
json.nodeTypes[6].outEdges = [];
json.nodeTypes[6].outEdges[0] = {};
json.nodeTypes[6].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[6].outEdges[0].inNodes = [];
json.nodeTypes[6].outEdges[0].inNodes[0] = {};
json.nodeTypes[6].outEdges[0].inNodes[0].name = "FLOW";
json.nodeTypes[6].outEdges[0].inNodes[1] = {};
json.nodeTypes[6].outEdges[0].inNodes[1].name = "SINK";
json.nodeTypes[6].outEdges[0].inNodes[2] = {};
json.nodeTypes[6].outEdges[0].inNodes[2].name = "NODE";
json.nodeTypes[6].outEdges[0].inNodes[3] = {};
json.nodeTypes[6].outEdges[0].inNodes[3].name = "CALL";
json.nodeTypes[6].outEdges[0].inNodes[4] = {};
json.nodeTypes[6].outEdges[0].inNodes[4].name = "CALL_CHAIN";
json.nodeTypes[7] = {};
json.nodeTypes[7].comment = "";
json.nodeTypes[7].containedNodes = [];
json.nodeTypes[7].containedNodes[0] = {};
json.nodeTypes[7].containedNodes[0].cardinality = "list";
json.nodeTypes[7].containedNodes[0].localName = "triggerCallChains";
json.nodeTypes[7].containedNodes[0].nodeType = "CALL_CHAIN";
json.nodeTypes[7].containedNodes[1] = {};
json.nodeTypes[7].containedNodes[1].cardinality = "list";
json.nodeTypes[7].containedNodes[1].localName = "descriptorFlows";
json.nodeTypes[7].containedNodes[1].nodeType = "FLOW";
json.nodeTypes[7].containedNodes[2] = {};
json.nodeTypes[7].containedNodes[2].cardinality = "one";
json.nodeTypes[7].containedNodes[2].localName = "source";
json.nodeTypes[7].containedNodes[2].nodeType = "SOURCE";
json.nodeTypes[7].id = 209;
json.nodeTypes[7].keys = [];
json.nodeTypes[7].name = "READ";
json.nodeTypes[7].outEdges = [];
json.nodeTypes[7].outEdges[0] = {};
json.nodeTypes[7].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[7].outEdges[0].inNodes = [];
json.nodeTypes[7].outEdges[0].inNodes[0] = {};
json.nodeTypes[7].outEdges[0].inNodes[0].name = "CALL_CHAIN";
json.nodeTypes[7].outEdges[0].inNodes[1] = {};
json.nodeTypes[7].outEdges[0].inNodes[1].name = "SOURCE";
json.nodeTypes[7].outEdges[0].inNodes[2] = {};
json.nodeTypes[7].outEdges[0].inNodes[2].name = "NODE";
json.nodeTypes[7].outEdges[0].inNodes[3] = {};
json.nodeTypes[7].outEdges[0].inNodes[3].name = "FLOW";
json.nodeTypes[8] = {};
json.nodeTypes[8].comment = "This node represents a formal parameter going towards the callee side";
json.nodeTypes[8].id = 34;
json.nodeTypes[8].is = [];
json.nodeTypes[8].is[0] = "DECLARATION";
json.nodeTypes[8].is[1] = "LOCAL_LIKE";
json.nodeTypes[8].is[2] = "TRACKING_POINT";
json.nodeTypes[8].is[3] = "AST_NODE";
json.nodeTypes[8].keys = [];
json.nodeTypes[8].keys[0] = "CODE";
json.nodeTypes[8].keys[1] = "ORDER";
json.nodeTypes[8].keys[2] = "NAME";
json.nodeTypes[8].keys[3] = "EVALUATION_STRATEGY";
json.nodeTypes[8].keys[4] = "TYPE_FULL_NAME";
json.nodeTypes[8].keys[5] = "DYNAMIC_TYPE_HINT_FULL_NAME";
json.nodeTypes[8].keys[6] = "LINE_NUMBER";
json.nodeTypes[8].keys[7] = "COLUMN_NUMBER";
json.nodeTypes[8].name = "METHOD_PARAMETER_IN";
json.nodeTypes[8].outEdges = [];
json.nodeTypes[8].outEdges[0] = {};
json.nodeTypes[8].outEdges[0].edgeName = "TAGGED_BY";
json.nodeTypes[8].outEdges[0].inNodes = [];
json.nodeTypes[8].outEdges[0].inNodes[0] = {};
json.nodeTypes[8].outEdges[0].inNodes[0].name = "TAG";
json.nodeTypes[8].outEdges[1] = {};
json.nodeTypes[8].outEdges[1].edgeName = "REACHING_DEF";
json.nodeTypes[8].outEdges[1].inNodes = [];
json.nodeTypes[8].outEdges[1].inNodes[0] = {};
json.nodeTypes[8].outEdges[1].inNodes[0].name = "CALL";
json.nodeTypes[8].outEdges[1].inNodes[1] = {};
json.nodeTypes[8].outEdges[1].inNodes[1].name = "RETURN";
json.nodeTypes[8].outEdges[2] = {};
json.nodeTypes[8].outEdges[2].edgeName = "DYNAMIC_TYPE";
json.nodeTypes[8].outEdges[2].inNodes = [];
json.nodeTypes[8].outEdges[2].inNodes[0] = {};
json.nodeTypes[8].outEdges[2].inNodes[0].name = "METHOD";
json.nodeTypes[8].outEdges[2].inNodes[1] = {};
json.nodeTypes[8].outEdges[2].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[8].outEdges[3] = {};
json.nodeTypes[8].outEdges[3].edgeName = "AST";
json.nodeTypes[8].outEdges[3].inNodes = [];
json.nodeTypes[8].outEdges[3].inNodes[0] = {};
json.nodeTypes[8].outEdges[3].inNodes[0].name = "ANNOTATION";
json.nodeTypes[8].outEdges[4] = {};
json.nodeTypes[8].outEdges[4].edgeName = "TAINT_REMOVE";
json.nodeTypes[8].outEdges[4].inNodes = [];
json.nodeTypes[8].outEdges[4].inNodes[0] = {};
json.nodeTypes[8].outEdges[4].inNodes[0].name = "METHOD_PARAMETER_OUT";
json.nodeTypes[8].outEdges[5] = {};
json.nodeTypes[8].outEdges[5].edgeName = "CONTAINS_NODE";
json.nodeTypes[8].outEdges[5].inNodes = [];
json.nodeTypes[8].outEdges[5].inNodes[0] = {};
json.nodeTypes[8].outEdges[5].inNodes[0].name = "NODE";
json.nodeTypes[8].outEdges[6] = {};
json.nodeTypes[8].outEdges[6].edgeName = "PROPAGATE";
json.nodeTypes[8].outEdges[6].inNodes = [];
json.nodeTypes[8].outEdges[6].inNodes[0] = {};
json.nodeTypes[8].outEdges[6].inNodes[0].name = "METHOD_PARAMETER_OUT";
json.nodeTypes[8].outEdges[6].inNodes[1] = {};
json.nodeTypes[8].outEdges[6].inNodes[1].name = "METHOD_RETURN";
json.nodeTypes[8].outEdges[7] = {};
json.nodeTypes[8].outEdges[7].edgeName = "PARAMETER_LINK";
json.nodeTypes[8].outEdges[7].inNodes = [];
json.nodeTypes[8].outEdges[7].inNodes[0] = {};
json.nodeTypes[8].outEdges[7].inNodes[0].name = "METHOD_PARAMETER_OUT";
json.nodeTypes[8].outEdges[8] = {};
json.nodeTypes[8].outEdges[8].edgeName = "EVAL_TYPE";
json.nodeTypes[8].outEdges[8].inNodes = [];
json.nodeTypes[8].outEdges[8].inNodes[0] = {};
json.nodeTypes[8].outEdges[8].inNodes[0].name = "TYPE";
json.nodeTypes[9] = {};
json.nodeTypes[9].comment = "This node represents a namespace as a whole whereas the NAMESPACE_BLOCK is used for each grouping occurrence of a namespace in code. Single representing NAMESPACE node is required for easier navigation in the query language";
json.nodeTypes[9].id = 40;
json.nodeTypes[9].is = [];
json.nodeTypes[9].is[0] = "AST_NODE";
json.nodeTypes[9].keys = [];
json.nodeTypes[9].keys[0] = "NAME";
json.nodeTypes[9].keys[1] = "ORDER";
json.nodeTypes[9].name = "NAMESPACE";
json.nodeTypes[9].outEdges = [];
json.nodeTypes[9].outEdges[0] = {};
json.nodeTypes[9].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[9].outEdges[0].inNodes = [];
json.nodeTypes[9].outEdges[0].inNodes[0] = {};
json.nodeTypes[9].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[10] = {};
json.nodeTypes[10].comment = "";
json.nodeTypes[10].id = 206;
json.nodeTypes[10].keys = [];
json.nodeTypes[10].keys[0] = "VAR_TYPE";
json.nodeTypes[10].keys[1] = "EVALUATION_TYPE";
json.nodeTypes[10].keys[2] = "PARAMETER_INDEX";
json.nodeTypes[10].name = "VARIABLE_INFO";
json.nodeTypes[10].outEdges = [];
json.nodeTypes[10].outEdges[0] = {};
json.nodeTypes[10].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[10].outEdges[0].inNodes = [];
json.nodeTypes[10].outEdges[0].inNodes[0] = {};
json.nodeTypes[10].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[11] = {};
json.nodeTypes[11].comment = "";
json.nodeTypes[11].containedNodes = [];
json.nodeTypes[11].containedNodes[0] = {};
json.nodeTypes[11].containedNodes[0].cardinality = "list";
json.nodeTypes[11].containedNodes[0].localName = "points";
json.nodeTypes[11].containedNodes[0].nodeType = "PROGRAM_POINT";
json.nodeTypes[11].containedNodes[1] = {};
json.nodeTypes[11].containedNodes[1].cardinality = "one";
json.nodeTypes[11].containedNodes[1].localName = "source";
json.nodeTypes[11].containedNodes[1].nodeType = "SOURCE";
json.nodeTypes[11].containedNodes[2] = {};
json.nodeTypes[11].containedNodes[2].cardinality = "one";
json.nodeTypes[11].containedNodes[2].localName = "sink";
json.nodeTypes[11].containedNodes[2].nodeType = "SINK";
json.nodeTypes[11].containedNodes[3] = {};
json.nodeTypes[11].containedNodes[3].cardinality = "list";
json.nodeTypes[11].containedNodes[3].localName = "transformations";
json.nodeTypes[11].containedNodes[3].nodeType = "TRANSFORMATION";
json.nodeTypes[11].containedNodes[4] = {};
json.nodeTypes[11].containedNodes[4].cardinality = "list";
json.nodeTypes[11].containedNodes[4].localName = "branchPoints";
json.nodeTypes[11].containedNodes[4].nodeType = "TRACKING_POINT";
json.nodeTypes[11].containedNodes[5] = {};
json.nodeTypes[11].containedNodes[5].cardinality = "list";
json.nodeTypes[11].containedNodes[5].localName = "cfgNodes";
json.nodeTypes[11].containedNodes[5].nodeType = "CFG_NODE";
json.nodeTypes[11].id = 207;
json.nodeTypes[11].keys = [];
json.nodeTypes[11].name = "FLOW";
json.nodeTypes[11].outEdges = [];
json.nodeTypes[11].outEdges[0] = {};
json.nodeTypes[11].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[11].outEdges[0].inNodes = [];
json.nodeTypes[11].outEdges[0].inNodes[0] = {};
json.nodeTypes[11].outEdges[0].inNodes[0].name = "TRACKING_POINT";
json.nodeTypes[11].outEdges[0].inNodes[1] = {};
json.nodeTypes[11].outEdges[0].inNodes[1].name = "TRANSFORMATION";
json.nodeTypes[11].outEdges[0].inNodes[2] = {};
json.nodeTypes[11].outEdges[0].inNodes[2].name = "SOURCE";
json.nodeTypes[11].outEdges[0].inNodes[3] = {};
json.nodeTypes[11].outEdges[0].inNodes[3].name = "SINK";
json.nodeTypes[11].outEdges[0].inNodes[4] = {};
json.nodeTypes[11].outEdges[0].inNodes[4].name = "NODE";
json.nodeTypes[11].outEdges[0].inNodes[5] = {};
json.nodeTypes[11].outEdges[0].inNodes[5].name = "PROGRAM_POINT";
json.nodeTypes[11].outEdges[0].inNodes[6] = {};
json.nodeTypes[11].outEdges[0].inNodes[6].name = "CFG_NODE";
json.nodeTypes[12] = {};
json.nodeTypes[12].comment = "Represents the binding of a LOCAL or METHOD_PARAMETER_IN into the closure of a method";
json.nodeTypes[12].id = 334;
json.nodeTypes[12].keys = [];
json.nodeTypes[12].keys[0] = "CLOSURE_BINDING_ID";
json.nodeTypes[12].keys[1] = "EVALUATION_STRATEGY";
json.nodeTypes[12].keys[2] = "CLOSURE_ORIGINAL_NAME";
json.nodeTypes[12].name = "CLOSURE_BINDING";
json.nodeTypes[12].outEdges = [];
json.nodeTypes[12].outEdges[0] = {};
json.nodeTypes[12].outEdges[0].edgeName = "REF";
json.nodeTypes[12].outEdges[0].inNodes = [];
json.nodeTypes[12].outEdges[0].inNodes[0] = {};
json.nodeTypes[12].outEdges[0].inNodes[0].cardinality = "n:1";
json.nodeTypes[12].outEdges[0].inNodes[0].name = "LOCAL";
json.nodeTypes[12].outEdges[0].inNodes[1] = {};
json.nodeTypes[12].outEdges[0].inNodes[1].name = "METHOD_PARAMETER_IN";
json.nodeTypes[12].outEdges[1] = {};
json.nodeTypes[12].outEdges[1].edgeName = "CONTAINS_NODE";
json.nodeTypes[12].outEdges[1].inNodes = [];
json.nodeTypes[12].outEdges[1].inNodes[0] = {};
json.nodeTypes[12].outEdges[1].inNodes[0].name = "NODE";
json.nodeTypes[13] = {};
json.nodeTypes[13].comment = "A language-specific node";
json.nodeTypes[13].id = 44;
json.nodeTypes[13].is = [];
json.nodeTypes[13].is[0] = "EXPRESSION";
json.nodeTypes[13].keys = [];
json.nodeTypes[13].keys[0] = "CODE";
json.nodeTypes[13].keys[1] = "PARSER_TYPE_NAME";
json.nodeTypes[13].keys[2] = "ORDER";
json.nodeTypes[13].keys[3] = "ARGUMENT_INDEX";
json.nodeTypes[13].keys[4] = "TYPE_FULL_NAME";
json.nodeTypes[13].keys[5] = "DYNAMIC_TYPE_HINT_FULL_NAME";
json.nodeTypes[13].keys[6] = "LINE_NUMBER";
json.nodeTypes[13].keys[7] = "COLUMN_NUMBER";
json.nodeTypes[13].keys[8] = "DEPTH_FIRST_ORDER";
json.nodeTypes[13].keys[9] = "INTERNAL_FLAGS";
json.nodeTypes[13].name = "UNKNOWN";
json.nodeTypes[13].outEdges = [];
json.nodeTypes[13].outEdges[0] = {};
json.nodeTypes[13].outEdges[0].edgeName = "CDG";
json.nodeTypes[13].outEdges[0].inNodes = [];
json.nodeTypes[13].outEdges[0].inNodes[0] = {};
json.nodeTypes[13].outEdges[0].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[13].outEdges[0].inNodes[1] = {};
json.nodeTypes[13].outEdges[0].inNodes[1].name = "METHOD_REF";
json.nodeTypes[13].outEdges[0].inNodes[2] = {};
json.nodeTypes[13].outEdges[0].inNodes[2].name = "CALL";
json.nodeTypes[13].outEdges[0].inNodes[3] = {};
json.nodeTypes[13].outEdges[0].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[13].outEdges[0].inNodes[4] = {};
json.nodeTypes[13].outEdges[0].inNodes[4].name = "RETURN";
json.nodeTypes[13].outEdges[0].inNodes[5] = {};
json.nodeTypes[13].outEdges[0].inNodes[5].name = "LITERAL";
json.nodeTypes[13].outEdges[0].inNodes[6] = {};
json.nodeTypes[13].outEdges[0].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[13].outEdges[0].inNodes[7] = {};
json.nodeTypes[13].outEdges[0].inNodes[7].name = "UNKNOWN";
json.nodeTypes[13].outEdges[0].inNodes[8] = {};
json.nodeTypes[13].outEdges[0].inNodes[8].name = "BLOCK";
json.nodeTypes[13].outEdges[1] = {};
json.nodeTypes[13].outEdges[1].edgeName = "TAGGED_BY";
json.nodeTypes[13].outEdges[1].inNodes = [];
json.nodeTypes[13].outEdges[1].inNodes[0] = {};
json.nodeTypes[13].outEdges[1].inNodes[0].name = "TAG";
json.nodeTypes[13].outEdges[2] = {};
json.nodeTypes[13].outEdges[2].edgeName = "REACHING_DEF";
json.nodeTypes[13].outEdges[2].inNodes = [];
json.nodeTypes[13].outEdges[2].inNodes[0] = {};
json.nodeTypes[13].outEdges[2].inNodes[0].name = "CALL";
json.nodeTypes[13].outEdges[2].inNodes[1] = {};
json.nodeTypes[13].outEdges[2].inNodes[1].name = "RETURN";
json.nodeTypes[13].outEdges[3] = {};
json.nodeTypes[13].outEdges[3].edgeName = "DYNAMIC_TYPE";
json.nodeTypes[13].outEdges[3].inNodes = [];
json.nodeTypes[13].outEdges[3].inNodes[0] = {};
json.nodeTypes[13].outEdges[3].inNodes[0].name = "METHOD";
json.nodeTypes[13].outEdges[3].inNodes[1] = {};
json.nodeTypes[13].outEdges[3].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[13].outEdges[4] = {};
json.nodeTypes[13].outEdges[4].edgeName = "CFG";
json.nodeTypes[13].outEdges[4].inNodes = [];
json.nodeTypes[13].outEdges[4].inNodes[0] = {};
json.nodeTypes[13].outEdges[4].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[13].outEdges[4].inNodes[1] = {};
json.nodeTypes[13].outEdges[4].inNodes[1].name = "METHOD_REF";
json.nodeTypes[13].outEdges[4].inNodes[2] = {};
json.nodeTypes[13].outEdges[4].inNodes[2].name = "CALL";
json.nodeTypes[13].outEdges[4].inNodes[3] = {};
json.nodeTypes[13].outEdges[4].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[13].outEdges[4].inNodes[4] = {};
json.nodeTypes[13].outEdges[4].inNodes[4].name = "RETURN";
json.nodeTypes[13].outEdges[4].inNodes[5] = {};
json.nodeTypes[13].outEdges[4].inNodes[5].name = "LITERAL";
json.nodeTypes[13].outEdges[4].inNodes[6] = {};
json.nodeTypes[13].outEdges[4].inNodes[6].name = "UNKNOWN";
json.nodeTypes[13].outEdges[4].inNodes[7] = {};
json.nodeTypes[13].outEdges[4].inNodes[7].name = "BLOCK";
json.nodeTypes[13].outEdges[5] = {};
json.nodeTypes[13].outEdges[5].edgeName = "POST_DOMINATE";
json.nodeTypes[13].outEdges[5].inNodes = [];
json.nodeTypes[13].outEdges[5].inNodes[0] = {};
json.nodeTypes[13].outEdges[5].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[13].outEdges[5].inNodes[1] = {};
json.nodeTypes[13].outEdges[5].inNodes[1].name = "METHOD_REF";
json.nodeTypes[13].outEdges[5].inNodes[2] = {};
json.nodeTypes[13].outEdges[5].inNodes[2].name = "CALL";
json.nodeTypes[13].outEdges[5].inNodes[3] = {};
json.nodeTypes[13].outEdges[5].inNodes[3].name = "METHOD";
json.nodeTypes[13].outEdges[5].inNodes[4] = {};
json.nodeTypes[13].outEdges[5].inNodes[4].name = "FIELD_IDENTIFIER";
json.nodeTypes[13].outEdges[5].inNodes[5] = {};
json.nodeTypes[13].outEdges[5].inNodes[5].name = "RETURN";
json.nodeTypes[13].outEdges[5].inNodes[6] = {};
json.nodeTypes[13].outEdges[5].inNodes[6].name = "LITERAL";
json.nodeTypes[13].outEdges[5].inNodes[7] = {};
json.nodeTypes[13].outEdges[5].inNodes[7].name = "UNKNOWN";
json.nodeTypes[13].outEdges[5].inNodes[8] = {};
json.nodeTypes[13].outEdges[5].inNodes[8].name = "BLOCK";
json.nodeTypes[13].outEdges[6] = {};
json.nodeTypes[13].outEdges[6].edgeName = "AST";
json.nodeTypes[13].outEdges[6].inNodes = [];
json.nodeTypes[13].outEdges[6].inNodes[0] = {};
json.nodeTypes[13].outEdges[6].inNodes[0].name = "MEMBER";
json.nodeTypes[13].outEdges[6].inNodes[1] = {};
json.nodeTypes[13].outEdges[6].inNodes[1].name = "MODIFIER";
json.nodeTypes[13].outEdges[6].inNodes[2] = {};
json.nodeTypes[13].outEdges[6].inNodes[2].name = "IDENTIFIER";
json.nodeTypes[13].outEdges[6].inNodes[3] = {};
json.nodeTypes[13].outEdges[6].inNodes[3].name = "ARRAY_INITIALIZER";
json.nodeTypes[13].outEdges[6].inNodes[4] = {};
json.nodeTypes[13].outEdges[6].inNodes[4].name = "CALL";
json.nodeTypes[13].outEdges[6].inNodes[5] = {};
json.nodeTypes[13].outEdges[6].inNodes[5].name = "FIELD_IDENTIFIER";
json.nodeTypes[13].outEdges[6].inNodes[6] = {};
json.nodeTypes[13].outEdges[6].inNodes[6].name = "RETURN";
json.nodeTypes[13].outEdges[6].inNodes[7] = {};
json.nodeTypes[13].outEdges[6].inNodes[7].name = "LITERAL";
json.nodeTypes[13].outEdges[6].inNodes[8] = {};
json.nodeTypes[13].outEdges[6].inNodes[8].name = "LOCAL";
json.nodeTypes[13].outEdges[6].inNodes[9] = {};
json.nodeTypes[13].outEdges[6].inNodes[9].name = "CONTROL_STRUCTURE";
json.nodeTypes[13].outEdges[6].inNodes[10] = {};
json.nodeTypes[13].outEdges[6].inNodes[10].name = "UNKNOWN";
json.nodeTypes[13].outEdges[6].inNodes[11] = {};
json.nodeTypes[13].outEdges[6].inNodes[11].name = "BLOCK";
json.nodeTypes[13].outEdges[7] = {};
json.nodeTypes[13].outEdges[7].edgeName = "DOMINATE";
json.nodeTypes[13].outEdges[7].inNodes = [];
json.nodeTypes[13].outEdges[7].inNodes[0] = {};
json.nodeTypes[13].outEdges[7].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[13].outEdges[7].inNodes[1] = {};
json.nodeTypes[13].outEdges[7].inNodes[1].name = "METHOD_REF";
json.nodeTypes[13].outEdges[7].inNodes[2] = {};
json.nodeTypes[13].outEdges[7].inNodes[2].name = "CALL";
json.nodeTypes[13].outEdges[7].inNodes[3] = {};
json.nodeTypes[13].outEdges[7].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[13].outEdges[7].inNodes[4] = {};
json.nodeTypes[13].outEdges[7].inNodes[4].name = "RETURN";
json.nodeTypes[13].outEdges[7].inNodes[5] = {};
json.nodeTypes[13].outEdges[7].inNodes[5].name = "LITERAL";
json.nodeTypes[13].outEdges[7].inNodes[6] = {};
json.nodeTypes[13].outEdges[7].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[13].outEdges[7].inNodes[7] = {};
json.nodeTypes[13].outEdges[7].inNodes[7].name = "UNKNOWN";
json.nodeTypes[13].outEdges[7].inNodes[8] = {};
json.nodeTypes[13].outEdges[7].inNodes[8].name = "BLOCK";
json.nodeTypes[13].outEdges[8] = {};
json.nodeTypes[13].outEdges[8].edgeName = "CONTAINS_NODE";
json.nodeTypes[13].outEdges[8].inNodes = [];
json.nodeTypes[13].outEdges[8].inNodes[0] = {};
json.nodeTypes[13].outEdges[8].inNodes[0].name = "NODE";
json.nodeTypes[13].outEdges[9] = {};
json.nodeTypes[13].outEdges[9].edgeName = "EVAL_TYPE";
json.nodeTypes[13].outEdges[9].inNodes = [];
json.nodeTypes[13].outEdges[9].inNodes[0] = {};
json.nodeTypes[13].outEdges[9].inNodes[0].name = "TYPE";
json.nodeTypes[14] = {};
json.nodeTypes[14].comment = "Formal annotation parameter";
json.nodeTypes[14].id = 7;
json.nodeTypes[14].is = [];
json.nodeTypes[14].is[0] = "AST_NODE";
json.nodeTypes[14].keys = [];
json.nodeTypes[14].keys[0] = "CODE";
json.nodeTypes[14].keys[1] = "ORDER";
json.nodeTypes[14].name = "ANNOTATION_PARAMETER";
json.nodeTypes[14].outEdges = [];
json.nodeTypes[14].outEdges[0] = {};
json.nodeTypes[14].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[14].outEdges[0].inNodes = [];
json.nodeTypes[14].outEdges[0].inNodes[0] = {};
json.nodeTypes[14].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[15] = {};
json.nodeTypes[15].comment = "";
json.nodeTypes[15].containedNodes = [];
json.nodeTypes[15].containedNodes[0] = {};
json.nodeTypes[15].containedNodes[0].cardinality = "one";
json.nodeTypes[15].containedNodes[0].localName = "cfgNode";
json.nodeTypes[15].containedNodes[0].nodeType = "CFG_NODE";
json.nodeTypes[15].id = 1001;
json.nodeTypes[15].is = [];
json.nodeTypes[15].is[0] = "TRACKING_POINT";
json.nodeTypes[15].keys = [];
json.nodeTypes[15].name = "DETACHED_TRACKING_POINT";
json.nodeTypes[15].outEdges = [];
json.nodeTypes[15].outEdges[0] = {};
json.nodeTypes[15].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[15].outEdges[0].inNodes = [];
json.nodeTypes[15].outEdges[0].inNodes[0] = {};
json.nodeTypes[15].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[15].outEdges[0].inNodes[1] = {};
json.nodeTypes[15].outEdges[0].inNodes[1].name = "CFG_NODE";
json.nodeTypes[16] = {};
json.nodeTypes[16].comment = "";
json.nodeTypes[16].containedNodes = [];
json.nodeTypes[16].containedNodes[0] = {};
json.nodeTypes[16].containedNodes[0].cardinality = "list";
json.nodeTypes[16].containedNodes[0].localName = "names";
json.nodeTypes[16].containedNodes[0].nodeType = "MATCH_INFO";
json.nodeTypes[16].containedNodes[1] = {};
json.nodeTypes[16].containedNodes[1].cardinality = "list";
json.nodeTypes[16].containedNodes[1].localName = "members";
json.nodeTypes[16].containedNodes[1].nodeType = "SENSITIVE_MEMBER";
json.nodeTypes[16].id = 52;
json.nodeTypes[16].keys = [];
json.nodeTypes[16].keys[0] = "FULL_NAME";
json.nodeTypes[16].name = "SENSITIVE_DATA_TYPE";
json.nodeTypes[16].outEdges = [];
json.nodeTypes[16].outEdges[0] = {};
json.nodeTypes[16].outEdges[0].edgeName = "IS_SENSITIVE_DATA_DESCR_OF";
json.nodeTypes[16].outEdges[0].inNodes = [];
json.nodeTypes[16].outEdges[0].inNodes[0] = {};
json.nodeTypes[16].outEdges[0].inNodes[0].name = "TYPE_DECL";
json.nodeTypes[16].outEdges[1] = {};
json.nodeTypes[16].outEdges[1].edgeName = "CONTAINS_NODE";
json.nodeTypes[16].outEdges[1].inNodes = [];
json.nodeTypes[16].outEdges[1].inNodes[0] = {};
json.nodeTypes[16].outEdges[1].inNodes[0].name = "MATCH_INFO";
json.nodeTypes[16].outEdges[1].inNodes[1] = {};
json.nodeTypes[16].outEdges[1].inNodes[1].name = "NODE";
json.nodeTypes[16].outEdges[1].inNodes[2] = {};
json.nodeTypes[16].outEdges[1].inNodes[2].name = "SENSITIVE_MEMBER";
json.nodeTypes[17] = {};
json.nodeTypes[17].comment = "Member of a class struct or union";
json.nodeTypes[17].id = 9;
json.nodeTypes[17].is = [];
json.nodeTypes[17].is[0] = "DECLARATION";
json.nodeTypes[17].is[1] = "AST_NODE";
json.nodeTypes[17].keys = [];
json.nodeTypes[17].keys[0] = "CODE";
json.nodeTypes[17].keys[1] = "NAME";
json.nodeTypes[17].keys[2] = "TYPE_FULL_NAME";
json.nodeTypes[17].keys[3] = "DYNAMIC_TYPE_HINT_FULL_NAME";
json.nodeTypes[17].keys[4] = "ORDER";
json.nodeTypes[17].name = "MEMBER";
json.nodeTypes[17].outEdges = [];
json.nodeTypes[17].outEdges[0] = {};
json.nodeTypes[17].outEdges[0].edgeName = "TAGGED_BY";
json.nodeTypes[17].outEdges[0].inNodes = [];
json.nodeTypes[17].outEdges[0].inNodes[0] = {};
json.nodeTypes[17].outEdges[0].inNodes[0].name = "TAG";
json.nodeTypes[17].outEdges[1] = {};
json.nodeTypes[17].outEdges[1].edgeName = "DYNAMIC_TYPE";
json.nodeTypes[17].outEdges[1].inNodes = [];
json.nodeTypes[17].outEdges[1].inNodes[0] = {};
json.nodeTypes[17].outEdges[1].inNodes[0].name = "TYPE_DECL";
json.nodeTypes[17].outEdges[2] = {};
json.nodeTypes[17].outEdges[2].edgeName = "AST";
json.nodeTypes[17].outEdges[2].inNodes = [];
json.nodeTypes[17].outEdges[2].inNodes[0] = {};
json.nodeTypes[17].outEdges[2].inNodes[0].name = "ANNOTATION";
json.nodeTypes[17].outEdges[3] = {};
json.nodeTypes[17].outEdges[3].edgeName = "CONTAINS_NODE";
json.nodeTypes[17].outEdges[3].inNodes = [];
json.nodeTypes[17].outEdges[3].inNodes[0] = {};
json.nodeTypes[17].outEdges[3].inNodes[0].name = "NODE";
json.nodeTypes[17].outEdges[4] = {};
json.nodeTypes[17].outEdges[4].edgeName = "EVAL_TYPE";
json.nodeTypes[17].outEdges[4].inNodes = [];
json.nodeTypes[17].outEdges[4].inNodes[0] = {};
json.nodeTypes[17].outEdges[4].inNodes[0].name = "TYPE";
json.nodeTypes[18] = {};
json.nodeTypes[18].comment = "";
json.nodeTypes[18].containedNodes = [];
json.nodeTypes[18].containedNodes[0] = {};
json.nodeTypes[18].containedNodes[0].cardinality = "one";
json.nodeTypes[18].containedNodes[0].localName = "method";
json.nodeTypes[18].containedNodes[0].nodeType = "METHOD";
json.nodeTypes[18].containedNodes[1] = {};
json.nodeTypes[18].containedNodes[1].cardinality = "one";
json.nodeTypes[18].containedNodes[1].localName = "call";
json.nodeTypes[18].containedNodes[1].nodeType = "CALL";
json.nodeTypes[18].containedNodes[2] = {};
json.nodeTypes[18].containedNodes[2].cardinality = "one";
json.nodeTypes[18].containedNodes[2].localName = "callerMethod";
json.nodeTypes[18].containedNodes[2].nodeType = "METHOD";
json.nodeTypes[18].id = 201;
json.nodeTypes[18].keys = [];
json.nodeTypes[18].name = "CALL_SITE";
json.nodeTypes[18].outEdges = [];
json.nodeTypes[18].outEdges[0] = {};
json.nodeTypes[18].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[18].outEdges[0].inNodes = [];
json.nodeTypes[18].outEdges[0].inNodes[0] = {};
json.nodeTypes[18].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[18].outEdges[0].inNodes[1] = {};
json.nodeTypes[18].outEdges[0].inNodes[1].name = "CALL";
json.nodeTypes[18].outEdges[0].inNodes[2] = {};
json.nodeTypes[18].outEdges[0].inNodes[2].name = "METHOD";
json.nodeTypes[19] = {};
json.nodeTypes[19].comment = "A method instance which always has to reference a method and may have type argument children if the referred to method is a template";
json.nodeTypes[19].id = 32;
json.nodeTypes[19].is = [];
json.nodeTypes[19].is[0] = "AST_NODE";
json.nodeTypes[19].keys = [];
json.nodeTypes[19].keys[0] = "NAME";
json.nodeTypes[19].keys[1] = "SIGNATURE";
json.nodeTypes[19].keys[2] = "FULL_NAME";
json.nodeTypes[19].keys[3] = "METHOD_FULL_NAME";
json.nodeTypes[19].keys[4] = "ORDER";
json.nodeTypes[19].name = "METHOD_INST";
json.nodeTypes[19].outEdges = [];
json.nodeTypes[19].outEdges[0] = {};
json.nodeTypes[19].outEdges[0].edgeName = "AST";
json.nodeTypes[19].outEdges[0].inNodes = [];
json.nodeTypes[19].outEdges[0].inNodes[0] = {};
json.nodeTypes[19].outEdges[0].inNodes[0].name = "TYPE_ARGUMENT";
json.nodeTypes[19].outEdges[1] = {};
json.nodeTypes[19].outEdges[1].edgeName = "CONTAINS_NODE";
json.nodeTypes[19].outEdges[1].inNodes = [];
json.nodeTypes[19].outEdges[1].inNodes[0] = {};
json.nodeTypes[19].outEdges[1].inNodes[0].name = "NODE";
json.nodeTypes[20] = {};
json.nodeTypes[20].comment = "Configuration file contents. Might be in use by a framework";
json.nodeTypes[20].id = 50;
json.nodeTypes[20].keys = [];
json.nodeTypes[20].keys[0] = "NAME";
json.nodeTypes[20].keys[1] = "CONTENT";
json.nodeTypes[20].name = "CONFIG_FILE";
json.nodeTypes[20].outEdges = [];
json.nodeTypes[20].outEdges[0] = {};
json.nodeTypes[20].outEdges[0].edgeName = "CONTAINS";
json.nodeTypes[20].outEdges[0].inNodes = [];
json.nodeTypes[20].outEdges[0].inNodes[0] = {};
json.nodeTypes[20].outEdges[0].inNodes[0].name = "DOM_NODE";
json.nodeTypes[20].outEdges[1] = {};
json.nodeTypes[20].outEdges[1].edgeName = "CONTAINS_NODE";
json.nodeTypes[20].outEdges[1].inNodes = [];
json.nodeTypes[20].outEdges[1].inNodes[0] = {};
json.nodeTypes[20].outEdges[1].inNodes[0].name = "NODE";
json.nodeTypes[21] = {};
json.nodeTypes[21].comment = "";
json.nodeTypes[21].containedNodes = [];
json.nodeTypes[21].containedNodes[0] = {};
json.nodeTypes[21].containedNodes[0].cardinality = "list";
json.nodeTypes[21].containedNodes[0].localName = "ioflows";
json.nodeTypes[21].containedNodes[0].nodeType = "IOFLOW";
json.nodeTypes[21].id = 55;
json.nodeTypes[21].keys = [];
json.nodeTypes[21].name = "SENSITIVE_REFERENCE";
json.nodeTypes[21].outEdges = [];
json.nodeTypes[21].outEdges[0] = {};
json.nodeTypes[21].outEdges[0].edgeName = "IS_SENSITIVE_DATA_DESCR_OF_REF";
json.nodeTypes[21].outEdges[0].inNodes = [];
json.nodeTypes[21].outEdges[0].inNodes[0] = {};
json.nodeTypes[21].outEdges[0].inNodes[0].name = "LOCAL";
json.nodeTypes[21].outEdges[0].inNodes[1] = {};
json.nodeTypes[21].outEdges[0].inNodes[1].name = "IDENTIFIER";
json.nodeTypes[21].outEdges[0].inNodes[2] = {};
json.nodeTypes[21].outEdges[0].inNodes[2].name = "METHOD_PARAMETER_IN";
json.nodeTypes[21].outEdges[1] = {};
json.nodeTypes[21].outEdges[1].edgeName = "CONTAINS_NODE";
json.nodeTypes[21].outEdges[1].inNodes = [];
json.nodeTypes[21].outEdges[1].inNodes[0] = {};
json.nodeTypes[21].outEdges[1].inNodes[0].name = "NODE";
json.nodeTypes[21].outEdges[1].inNodes[1] = {};
json.nodeTypes[21].outEdges[1].inNodes[1].name = "IOFLOW";
json.nodeTypes[22] = {};
json.nodeTypes[22].comment = "";
json.nodeTypes[22].containedNodes = [];
json.nodeTypes[22].containedNodes[0] = {};
json.nodeTypes[22].containedNodes[0].cardinality = "zeroOrOne";
json.nodeTypes[22].containedNodes[0].localName = "node";
json.nodeTypes[22].containedNodes[0].nodeType = "NODE";
json.nodeTypes[22].id = 25;
json.nodeTypes[22].keys = [];
json.nodeTypes[22].keys[0] = "SYMBOL";
json.nodeTypes[22].keys[1] = "METHOD_FULL_NAME";
json.nodeTypes[22].keys[2] = "METHOD_SHORT_NAME";
json.nodeTypes[22].keys[3] = "PACKAGE_NAME";
json.nodeTypes[22].keys[4] = "LINE_NUMBER";
json.nodeTypes[22].keys[5] = "CLASS_NAME";
json.nodeTypes[22].keys[6] = "CLASS_SHORT_NAME";
json.nodeTypes[22].keys[7] = "NODE_LABEL";
json.nodeTypes[22].keys[8] = "FILENAME";
json.nodeTypes[22].name = "LOCATION";
json.nodeTypes[22].outEdges = [];
json.nodeTypes[22].outEdges[0] = {};
json.nodeTypes[22].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[22].outEdges[0].inNodes = [];
json.nodeTypes[22].outEdges[0].inNodes[0] = {};
json.nodeTypes[22].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[23] = {};
json.nodeTypes[23].comment = "Node to save meta data about the graph on its properties. Exactly one node of this type per graph";
json.nodeTypes[23].id = 39;
json.nodeTypes[23].keys = [];
json.nodeTypes[23].keys[0] = "LANGUAGE";
json.nodeTypes[23].keys[1] = "VERSION";
json.nodeTypes[23].keys[2] = "OVERLAYS";
json.nodeTypes[23].keys[3] = "POLICY_DIRECTORIES";
json.nodeTypes[23].keys[4] = "SPID";
json.nodeTypes[23].name = "META_DATA";
json.nodeTypes[23].outEdges = [];
json.nodeTypes[23].outEdges[0] = {};
json.nodeTypes[23].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[23].outEdges[0].inNodes = [];
json.nodeTypes[23].outEdges[0].inNodes[0] = {};
json.nodeTypes[23].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[24] = {};
json.nodeTypes[24].comment = "A return instruction";
json.nodeTypes[24].id = 30;
json.nodeTypes[24].is = [];
json.nodeTypes[24].is[0] = "EXPRESSION";
json.nodeTypes[24].keys = [];
json.nodeTypes[24].keys[0] = "LINE_NUMBER";
json.nodeTypes[24].keys[1] = "COLUMN_NUMBER";
json.nodeTypes[24].keys[2] = "ORDER";
json.nodeTypes[24].keys[3] = "ARGUMENT_INDEX";
json.nodeTypes[24].keys[4] = "CODE";
json.nodeTypes[24].keys[5] = "DEPTH_FIRST_ORDER";
json.nodeTypes[24].keys[6] = "INTERNAL_FLAGS";
json.nodeTypes[24].name = "RETURN";
json.nodeTypes[24].outEdges = [];
json.nodeTypes[24].outEdges[0] = {};
json.nodeTypes[24].outEdges[0].edgeName = "ARGUMENT";
json.nodeTypes[24].outEdges[0].inNodes = [];
json.nodeTypes[24].outEdges[0].inNodes[0] = {};
json.nodeTypes[24].outEdges[0].inNodes[0].cardinality = "0-1:0-1";
json.nodeTypes[24].outEdges[0].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[24].outEdges[0].inNodes[1] = {};
json.nodeTypes[24].outEdges[0].inNodes[1].cardinality = "0-1:0-1";
json.nodeTypes[24].outEdges[0].inNodes[1].name = "METHOD_REF";
json.nodeTypes[24].outEdges[0].inNodes[2] = {};
json.nodeTypes[24].outEdges[0].inNodes[2].cardinality = "0-1:0-1";
json.nodeTypes[24].outEdges[0].inNodes[2].name = "CALL";
json.nodeTypes[24].outEdges[0].inNodes[3] = {};
json.nodeTypes[24].outEdges[0].inNodes[3].cardinality = "0-1:0-1";
json.nodeTypes[24].outEdges[0].inNodes[3].name = "RETURN";
json.nodeTypes[24].outEdges[0].inNodes[4] = {};
json.nodeTypes[24].outEdges[0].inNodes[4].cardinality = "0-1:0-1";
json.nodeTypes[24].outEdges[0].inNodes[4].name = "LITERAL";
json.nodeTypes[24].outEdges[0].inNodes[5] = {};
json.nodeTypes[24].outEdges[0].inNodes[5].name = "UNKNOWN";
json.nodeTypes[24].outEdges[0].inNodes[6] = {};
json.nodeTypes[24].outEdges[0].inNodes[6].cardinality = "0-1:0-1";
json.nodeTypes[24].outEdges[0].inNodes[6].name = "BLOCK";
json.nodeTypes[24].outEdges[1] = {};
json.nodeTypes[24].outEdges[1].edgeName = "REACHING_DEF";
json.nodeTypes[24].outEdges[1].inNodes = [];
json.nodeTypes[24].outEdges[1].inNodes[0] = {};
json.nodeTypes[24].outEdges[1].inNodes[0].name = "METHOD_RETURN";
json.nodeTypes[24].outEdges[2] = {};
json.nodeTypes[24].outEdges[2].edgeName = "CFG";
json.nodeTypes[24].outEdges[2].inNodes = [];
json.nodeTypes[24].outEdges[2].inNodes[0] = {};
json.nodeTypes[24].outEdges[2].inNodes[0].cardinality = "0-1:1";
json.nodeTypes[24].outEdges[2].inNodes[0].name = "METHOD_RETURN";
json.nodeTypes[24].outEdges[3] = {};
json.nodeTypes[24].outEdges[3].edgeName = "POST_DOMINATE";
json.nodeTypes[24].outEdges[3].inNodes = [];
json.nodeTypes[24].outEdges[3].inNodes[0] = {};
json.nodeTypes[24].outEdges[3].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[24].outEdges[3].inNodes[1] = {};
json.nodeTypes[24].outEdges[3].inNodes[1].name = "METHOD_REF";
json.nodeTypes[24].outEdges[3].inNodes[2] = {};
json.nodeTypes[24].outEdges[3].inNodes[2].name = "CALL";
json.nodeTypes[24].outEdges[3].inNodes[3] = {};
json.nodeTypes[24].outEdges[3].inNodes[3].name = "METHOD";
json.nodeTypes[24].outEdges[3].inNodes[4] = {};
json.nodeTypes[24].outEdges[3].inNodes[4].name = "FIELD_IDENTIFIER";
json.nodeTypes[24].outEdges[3].inNodes[5] = {};
json.nodeTypes[24].outEdges[3].inNodes[5].name = "RETURN";
json.nodeTypes[24].outEdges[3].inNodes[6] = {};
json.nodeTypes[24].outEdges[3].inNodes[6].name = "LITERAL";
json.nodeTypes[24].outEdges[3].inNodes[7] = {};
json.nodeTypes[24].outEdges[3].inNodes[7].name = "UNKNOWN";
json.nodeTypes[24].outEdges[3].inNodes[8] = {};
json.nodeTypes[24].outEdges[3].inNodes[8].name = "BLOCK";
json.nodeTypes[24].outEdges[4] = {};
json.nodeTypes[24].outEdges[4].edgeName = "AST";
json.nodeTypes[24].outEdges[4].inNodes = [];
json.nodeTypes[24].outEdges[4].inNodes[0] = {};
json.nodeTypes[24].outEdges[4].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[24].outEdges[4].inNodes[1] = {};
json.nodeTypes[24].outEdges[4].inNodes[1].name = "METHOD_REF";
json.nodeTypes[24].outEdges[4].inNodes[2] = {};
json.nodeTypes[24].outEdges[4].inNodes[2].name = "CALL";
json.nodeTypes[24].outEdges[4].inNodes[3] = {};
json.nodeTypes[24].outEdges[4].inNodes[3].name = "RETURN";
json.nodeTypes[24].outEdges[4].inNodes[4] = {};
json.nodeTypes[24].outEdges[4].inNodes[4].name = "LITERAL";
json.nodeTypes[24].outEdges[4].inNodes[5] = {};
json.nodeTypes[24].outEdges[4].inNodes[5].name = "CONTROL_STRUCTURE";
json.nodeTypes[24].outEdges[4].inNodes[6] = {};
json.nodeTypes[24].outEdges[4].inNodes[6].name = "UNKNOWN";
json.nodeTypes[24].outEdges[4].inNodes[7] = {};
json.nodeTypes[24].outEdges[4].inNodes[7].name = "BLOCK";
json.nodeTypes[24].outEdges[5] = {};
json.nodeTypes[24].outEdges[5].edgeName = "DOMINATE";
json.nodeTypes[24].outEdges[5].inNodes = [];
json.nodeTypes[24].outEdges[5].inNodes[0] = {};
json.nodeTypes[24].outEdges[5].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[24].outEdges[5].inNodes[1] = {};
json.nodeTypes[24].outEdges[5].inNodes[1].name = "METHOD_REF";
json.nodeTypes[24].outEdges[5].inNodes[2] = {};
json.nodeTypes[24].outEdges[5].inNodes[2].name = "CALL";
json.nodeTypes[24].outEdges[5].inNodes[3] = {};
json.nodeTypes[24].outEdges[5].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[24].outEdges[5].inNodes[4] = {};
json.nodeTypes[24].outEdges[5].inNodes[4].name = "RETURN";
json.nodeTypes[24].outEdges[5].inNodes[5] = {};
json.nodeTypes[24].outEdges[5].inNodes[5].name = "LITERAL";
json.nodeTypes[24].outEdges[5].inNodes[6] = {};
json.nodeTypes[24].outEdges[5].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[24].outEdges[5].inNodes[7] = {};
json.nodeTypes[24].outEdges[5].inNodes[7].name = "UNKNOWN";
json.nodeTypes[24].outEdges[5].inNodes[8] = {};
json.nodeTypes[24].outEdges[5].inNodes[8].name = "BLOCK";
json.nodeTypes[24].outEdges[6] = {};
json.nodeTypes[24].outEdges[6].edgeName = "CONTAINS_NODE";
json.nodeTypes[24].outEdges[6].inNodes = [];
json.nodeTypes[24].outEdges[6].inNodes[0] = {};
json.nodeTypes[24].outEdges[6].inNodes[0].name = "NODE";
json.nodeTypes[25] = {};
json.nodeTypes[25].comment = "";
json.nodeTypes[25].containedNodes = [];
json.nodeTypes[25].containedNodes[0] = {};
json.nodeTypes[25].containedNodes[0].cardinality = "one";
json.nodeTypes[25].containedNodes[0].localName = "tag";
json.nodeTypes[25].containedNodes[0].nodeType = "TAG";
json.nodeTypes[25].containedNodes[1] = {};
json.nodeTypes[25].containedNodes[1].cardinality = "one";
json.nodeTypes[25].containedNodes[1].localName = "node";
json.nodeTypes[25].containedNodes[1].nodeType = "NODE";
json.nodeTypes[25].id = 208;
json.nodeTypes[25].keys = [];
json.nodeTypes[25].name = "TAG_NODE_PAIR";
json.nodeTypes[25].outEdges = [];
json.nodeTypes[25].outEdges[0] = {};
json.nodeTypes[25].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[25].outEdges[0].inNodes = [];
json.nodeTypes[25].outEdges[0].inNodes[0] = {};
json.nodeTypes[25].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[25].outEdges[0].inNodes[1] = {};
json.nodeTypes[25].outEdges[0].inNodes[1].name = "TAG";
json.nodeTypes[26] = {};
json.nodeTypes[26].comment = "Attribute of a DOM node";
json.nodeTypes[26].id = 601;
json.nodeTypes[26].keys = [];
json.nodeTypes[26].keys[0] = "NAME";
json.nodeTypes[26].keys[1] = "VALUE";
json.nodeTypes[26].name = "DOM_ATTRIBUTE";
json.nodeTypes[26].outEdges = [];
json.nodeTypes[26].outEdges[0] = {};
json.nodeTypes[26].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[26].outEdges[0].inNodes = [];
json.nodeTypes[26].outEdges[0].inNodes[0] = {};
json.nodeTypes[26].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[27] = {};
json.nodeTypes[27].comment = "Argument for a TYPE_PARAMETER that belongs to a TYPE. It binds another TYPE to a TYPE_PARAMETER";
json.nodeTypes[27].id = 48;
json.nodeTypes[27].is = [];
json.nodeTypes[27].is[0] = "AST_NODE";
json.nodeTypes[27].keys = [];
json.nodeTypes[27].keys[0] = "ORDER";
json.nodeTypes[27].name = "TYPE_ARGUMENT";
json.nodeTypes[27].outEdges = [];
json.nodeTypes[27].outEdges[0] = {};
json.nodeTypes[27].outEdges[0].edgeName = "BINDS_TO";
json.nodeTypes[27].outEdges[0].inNodes = [];
json.nodeTypes[27].outEdges[0].inNodes[0] = {};
json.nodeTypes[27].outEdges[0].inNodes[0].name = "TYPE_PARAMETER";
json.nodeTypes[27].outEdges[1] = {};
json.nodeTypes[27].outEdges[1].edgeName = "REF";
json.nodeTypes[27].outEdges[1].inNodes = [];
json.nodeTypes[27].outEdges[1].inNodes[0] = {};
json.nodeTypes[27].outEdges[1].inNodes[0].name = "TYPE";
json.nodeTypes[27].outEdges[2] = {};
json.nodeTypes[27].outEdges[2].edgeName = "CONTAINS_NODE";
json.nodeTypes[27].outEdges[2].inNodes = [];
json.nodeTypes[27].outEdges[2].inNodes[0] = {};
json.nodeTypes[27].outEdges[2].inNodes[0].name = "NODE";
json.nodeTypes[28] = {};
json.nodeTypes[28].comment = "";
json.nodeTypes[28].containedNodes = [];
json.nodeTypes[28].containedNodes[0] = {};
json.nodeTypes[28].containedNodes[0].cardinality = "one";
json.nodeTypes[28].containedNodes[0].localName = "node";
json.nodeTypes[28].containedNodes[0].nodeType = "TRACKING_POINT";
json.nodeTypes[28].containedNodes[1] = {};
json.nodeTypes[28].containedNodes[1].cardinality = "one";
json.nodeTypes[28].containedNodes[1].localName = "method";
json.nodeTypes[28].containedNodes[1].nodeType = "METHOD";
json.nodeTypes[28].containedNodes[2] = {};
json.nodeTypes[28].containedNodes[2].cardinality = "list";
json.nodeTypes[28].containedNodes[2].localName = "methodTags";
json.nodeTypes[28].containedNodes[2].nodeType = "TAG";
json.nodeTypes[28].containedNodes[3] = {};
json.nodeTypes[28].containedNodes[3].cardinality = "zeroOrOne";
json.nodeTypes[28].containedNodes[3].localName = "callingMethod";
json.nodeTypes[28].containedNodes[3].nodeType = "METHOD";
json.nodeTypes[28].containedNodes[4] = {};
json.nodeTypes[28].containedNodes[4].cardinality = "zeroOrOne";
json.nodeTypes[28].containedNodes[4].localName = "callsite";
json.nodeTypes[28].containedNodes[4].nodeType = "CALL";
json.nodeTypes[28].containedNodes[5] = {};
json.nodeTypes[28].containedNodes[5].cardinality = "list";
json.nodeTypes[28].containedNodes[5].localName = "tags";
json.nodeTypes[28].containedNodes[5].nodeType = "TAG";
json.nodeTypes[28].containedNodes[6] = {};
json.nodeTypes[28].containedNodes[6].cardinality = "one";
json.nodeTypes[28].containedNodes[6].localName = "nodeType";
json.nodeTypes[28].containedNodes[6].nodeType = "TYPE";
json.nodeTypes[28].id = 202;
json.nodeTypes[28].keys = [];
json.nodeTypes[28].keys[0] = "SOURCE_TYPE";
json.nodeTypes[28].name = "SOURCE";
json.nodeTypes[28].outEdges = [];
json.nodeTypes[28].outEdges[0] = {};
json.nodeTypes[28].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[28].outEdges[0].inNodes = [];
json.nodeTypes[28].outEdges[0].inNodes[0] = {};
json.nodeTypes[28].outEdges[0].inNodes[0].name = "TRACKING_POINT";
json.nodeTypes[28].outEdges[0].inNodes[1] = {};
json.nodeTypes[28].outEdges[0].inNodes[1].name = "TAG";
json.nodeTypes[28].outEdges[0].inNodes[2] = {};
json.nodeTypes[28].outEdges[0].inNodes[2].name = "NODE";
json.nodeTypes[28].outEdges[0].inNodes[3] = {};
json.nodeTypes[28].outEdges[0].inNodes[3].name = "CALL";
json.nodeTypes[28].outEdges[0].inNodes[4] = {};
json.nodeTypes[28].outEdges[0].inNodes[4].name = "METHOD";
json.nodeTypes[28].outEdges[0].inNodes[5] = {};
json.nodeTypes[28].outEdges[0].inNodes[5].name = "TYPE";
json.nodeTypes[29] = {};
json.nodeTypes[29].comment = "";
json.nodeTypes[29].containedNodes = [];
json.nodeTypes[29].containedNodes[0] = {};
json.nodeTypes[29].containedNodes[0].cardinality = "one";
json.nodeTypes[29].containedNodes[0].localName = "node";
json.nodeTypes[29].containedNodes[0].nodeType = "LOCAL_LIKE";
json.nodeTypes[29].id = 54;
json.nodeTypes[29].keys = [];
json.nodeTypes[29].keys[0] = "NAME";
json.nodeTypes[29].keys[1] = "EVAL_TYPE";
json.nodeTypes[29].keys[2] = "CATEGORIES";
json.nodeTypes[29].name = "SENSITIVE_VARIABLE";
json.nodeTypes[29].outEdges = [];
json.nodeTypes[29].outEdges[0] = {};
json.nodeTypes[29].outEdges[0].edgeName = "IS_SENSITIVE_DATA_DESCR_OF_REF";
json.nodeTypes[29].outEdges[0].inNodes = [];
json.nodeTypes[29].outEdges[0].inNodes[0] = {};
json.nodeTypes[29].outEdges[0].inNodes[0].name = "SENSITIVE_REFERENCE";
json.nodeTypes[29].outEdges[1] = {};
json.nodeTypes[29].outEdges[1].edgeName = "IS_SENSITIVE_DATA_DESCR_OF";
json.nodeTypes[29].outEdges[1].inNodes = [];
json.nodeTypes[29].outEdges[1].inNodes[0] = {};
json.nodeTypes[29].outEdges[1].inNodes[0].name = "LOCAL";
json.nodeTypes[29].outEdges[1].inNodes[1] = {};
json.nodeTypes[29].outEdges[1].inNodes[1].name = "IDENTIFIER";
json.nodeTypes[29].outEdges[1].inNodes[2] = {};
json.nodeTypes[29].outEdges[1].inNodes[2].name = "METHOD_PARAMETER_IN";
json.nodeTypes[29].outEdges[2] = {};
json.nodeTypes[29].outEdges[2].edgeName = "IS_SENSITIVE_DATA_OF_TYPE";
json.nodeTypes[29].outEdges[2].inNodes = [];
json.nodeTypes[29].outEdges[2].inNodes[0] = {};
json.nodeTypes[29].outEdges[2].inNodes[0].name = "SENSITIVE_DATA_TYPE";
json.nodeTypes[29].outEdges[3] = {};
json.nodeTypes[29].outEdges[3].edgeName = "CONTAINS_NODE";
json.nodeTypes[29].outEdges[3].inNodes = [];
json.nodeTypes[29].outEdges[3].inNodes[0] = {};
json.nodeTypes[29].outEdges[3].inNodes[0].name = "NODE";
json.nodeTypes[29].outEdges[3].inNodes[1] = {};
json.nodeTypes[29].outEdges[3].inNodes[1].name = "LOCAL_LIKE";
json.nodeTypes[30] = {};
json.nodeTypes[30].comment = "A node that represents which field is accessed in a <operator>.fieldAccess, in e.g. obj.field. The CODE part is used for human display and matching to MEMBER nodes. The CANONICAL_NAME is used for dataflow tracking; typically both coincide. However, suppose that two fields foo and bar are a C-style union; then CODE refers to whatever the programmer wrote (obj.foo or obj.bar), but both share the same CANONICAL_NAME (e.g. GENERATED_foo_bar)";
json.nodeTypes[30].id = 2001081;
json.nodeTypes[30].is = [];
json.nodeTypes[30].is[0] = "EXPRESSION";
json.nodeTypes[30].keys = [];
json.nodeTypes[30].keys[0] = "CODE";
json.nodeTypes[30].keys[1] = "CANONICAL_NAME";
json.nodeTypes[30].keys[2] = "ORDER";
json.nodeTypes[30].keys[3] = "ARGUMENT_INDEX";
json.nodeTypes[30].keys[4] = "LINE_NUMBER";
json.nodeTypes[30].keys[5] = "COLUMN_NUMBER";
json.nodeTypes[30].keys[6] = "DEPTH_FIRST_ORDER";
json.nodeTypes[30].keys[7] = "INTERNAL_FLAGS";
json.nodeTypes[30].name = "FIELD_IDENTIFIER";
json.nodeTypes[30].outEdges = [];
json.nodeTypes[30].outEdges[0] = {};
json.nodeTypes[30].outEdges[0].edgeName = "CDG";
json.nodeTypes[30].outEdges[0].inNodes = [];
json.nodeTypes[30].outEdges[0].inNodes[0] = {};
json.nodeTypes[30].outEdges[0].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[30].outEdges[0].inNodes[1] = {};
json.nodeTypes[30].outEdges[0].inNodes[1].name = "METHOD_REF";
json.nodeTypes[30].outEdges[0].inNodes[2] = {};
json.nodeTypes[30].outEdges[0].inNodes[2].name = "CALL";
json.nodeTypes[30].outEdges[0].inNodes[3] = {};
json.nodeTypes[30].outEdges[0].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[30].outEdges[0].inNodes[4] = {};
json.nodeTypes[30].outEdges[0].inNodes[4].name = "RETURN";
json.nodeTypes[30].outEdges[0].inNodes[5] = {};
json.nodeTypes[30].outEdges[0].inNodes[5].name = "LITERAL";
json.nodeTypes[30].outEdges[0].inNodes[6] = {};
json.nodeTypes[30].outEdges[0].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[30].outEdges[0].inNodes[7] = {};
json.nodeTypes[30].outEdges[0].inNodes[7].name = "UNKNOWN";
json.nodeTypes[30].outEdges[0].inNodes[8] = {};
json.nodeTypes[30].outEdges[0].inNodes[8].name = "BLOCK";
json.nodeTypes[30].outEdges[1] = {};
json.nodeTypes[30].outEdges[1].edgeName = "TAGGED_BY";
json.nodeTypes[30].outEdges[1].inNodes = [];
json.nodeTypes[30].outEdges[1].inNodes[0] = {};
json.nodeTypes[30].outEdges[1].inNodes[0].name = "TAG";
json.nodeTypes[30].outEdges[2] = {};
json.nodeTypes[30].outEdges[2].edgeName = "DYNAMIC_TYPE";
json.nodeTypes[30].outEdges[2].inNodes = [];
json.nodeTypes[30].outEdges[2].inNodes[0] = {};
json.nodeTypes[30].outEdges[2].inNodes[0].name = "METHOD";
json.nodeTypes[30].outEdges[2].inNodes[1] = {};
json.nodeTypes[30].outEdges[2].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[30].outEdges[3] = {};
json.nodeTypes[30].outEdges[3].edgeName = "CFG";
json.nodeTypes[30].outEdges[3].inNodes = [];
json.nodeTypes[30].outEdges[3].inNodes[0] = {};
json.nodeTypes[30].outEdges[3].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[30].outEdges[3].inNodes[1] = {};
json.nodeTypes[30].outEdges[3].inNodes[1].name = "METHOD_REF";
json.nodeTypes[30].outEdges[3].inNodes[2] = {};
json.nodeTypes[30].outEdges[3].inNodes[2].cardinality = "0-1:1";
json.nodeTypes[30].outEdges[3].inNodes[2].name = "CALL";
json.nodeTypes[30].outEdges[3].inNodes[3] = {};
json.nodeTypes[30].outEdges[3].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[30].outEdges[3].inNodes[4] = {};
json.nodeTypes[30].outEdges[3].inNodes[4].name = "RETURN";
json.nodeTypes[30].outEdges[3].inNodes[5] = {};
json.nodeTypes[30].outEdges[3].inNodes[5].name = "LITERAL";
json.nodeTypes[30].outEdges[3].inNodes[6] = {};
json.nodeTypes[30].outEdges[3].inNodes[6].name = "UNKNOWN";
json.nodeTypes[30].outEdges[3].inNodes[7] = {};
json.nodeTypes[30].outEdges[3].inNodes[7].name = "BLOCK";
json.nodeTypes[30].outEdges[4] = {};
json.nodeTypes[30].outEdges[4].edgeName = "POST_DOMINATE";
json.nodeTypes[30].outEdges[4].inNodes = [];
json.nodeTypes[30].outEdges[4].inNodes[0] = {};
json.nodeTypes[30].outEdges[4].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[30].outEdges[4].inNodes[1] = {};
json.nodeTypes[30].outEdges[4].inNodes[1].name = "METHOD_REF";
json.nodeTypes[30].outEdges[4].inNodes[2] = {};
json.nodeTypes[30].outEdges[4].inNodes[2].name = "CALL";
json.nodeTypes[30].outEdges[4].inNodes[3] = {};
json.nodeTypes[30].outEdges[4].inNodes[3].name = "METHOD";
json.nodeTypes[30].outEdges[4].inNodes[4] = {};
json.nodeTypes[30].outEdges[4].inNodes[4].name = "FIELD_IDENTIFIER";
json.nodeTypes[30].outEdges[4].inNodes[5] = {};
json.nodeTypes[30].outEdges[4].inNodes[5].name = "RETURN";
json.nodeTypes[30].outEdges[4].inNodes[6] = {};
json.nodeTypes[30].outEdges[4].inNodes[6].name = "LITERAL";
json.nodeTypes[30].outEdges[4].inNodes[7] = {};
json.nodeTypes[30].outEdges[4].inNodes[7].name = "UNKNOWN";
json.nodeTypes[30].outEdges[4].inNodes[8] = {};
json.nodeTypes[30].outEdges[4].inNodes[8].name = "BLOCK";
json.nodeTypes[30].outEdges[5] = {};
json.nodeTypes[30].outEdges[5].edgeName = "DOMINATE";
json.nodeTypes[30].outEdges[5].inNodes = [];
json.nodeTypes[30].outEdges[5].inNodes[0] = {};
json.nodeTypes[30].outEdges[5].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[30].outEdges[5].inNodes[1] = {};
json.nodeTypes[30].outEdges[5].inNodes[1].name = "METHOD_REF";
json.nodeTypes[30].outEdges[5].inNodes[2] = {};
json.nodeTypes[30].outEdges[5].inNodes[2].name = "CALL";
json.nodeTypes[30].outEdges[5].inNodes[3] = {};
json.nodeTypes[30].outEdges[5].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[30].outEdges[5].inNodes[4] = {};
json.nodeTypes[30].outEdges[5].inNodes[4].name = "RETURN";
json.nodeTypes[30].outEdges[5].inNodes[5] = {};
json.nodeTypes[30].outEdges[5].inNodes[5].name = "LITERAL";
json.nodeTypes[30].outEdges[5].inNodes[6] = {};
json.nodeTypes[30].outEdges[5].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[30].outEdges[5].inNodes[7] = {};
json.nodeTypes[30].outEdges[5].inNodes[7].name = "UNKNOWN";
json.nodeTypes[30].outEdges[5].inNodes[8] = {};
json.nodeTypes[30].outEdges[5].inNodes[8].name = "BLOCK";
json.nodeTypes[30].outEdges[6] = {};
json.nodeTypes[30].outEdges[6].edgeName = "CONTAINS_NODE";
json.nodeTypes[30].outEdges[6].inNodes = [];
json.nodeTypes[30].outEdges[6].inNodes[0] = {};
json.nodeTypes[30].outEdges[6].inNodes[0].name = "NODE";
json.nodeTypes[31] = {};
json.nodeTypes[31].comment = "";
json.nodeTypes[31].containedNodes = [];
json.nodeTypes[31].containedNodes[0] = {};
json.nodeTypes[31].containedNodes[0].cardinality = "list";
json.nodeTypes[31].containedNodes[0].localName = "triggerCallChains";
json.nodeTypes[31].containedNodes[0].nodeType = "CALL_CHAIN";
json.nodeTypes[31].containedNodes[1] = {};
json.nodeTypes[31].containedNodes[1].cardinality = "list";
json.nodeTypes[31].containedNodes[1].localName = "descriptorFlows";
json.nodeTypes[31].containedNodes[1].nodeType = "FLOW";
json.nodeTypes[31].containedNodes[2] = {};
json.nodeTypes[31].containedNodes[2].cardinality = "one";
json.nodeTypes[31].containedNodes[2].localName = "sink";
json.nodeTypes[31].containedNodes[2].nodeType = "SINK";
json.nodeTypes[31].containedNodes[3] = {};
json.nodeTypes[31].containedNodes[3].cardinality = "list";
json.nodeTypes[31].containedNodes[3].localName = "flows";
json.nodeTypes[31].containedNodes[3].nodeType = "FLOW";
json.nodeTypes[31].id = 210;
json.nodeTypes[31].keys = [];
json.nodeTypes[31].name = "WRITE";
json.nodeTypes[31].outEdges = [];
json.nodeTypes[31].outEdges[0] = {};
json.nodeTypes[31].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[31].outEdges[0].inNodes = [];
json.nodeTypes[31].outEdges[0].inNodes[0] = {};
json.nodeTypes[31].outEdges[0].inNodes[0].name = "CALL_CHAIN";
json.nodeTypes[31].outEdges[0].inNodes[1] = {};
json.nodeTypes[31].outEdges[0].inNodes[1].name = "SINK";
json.nodeTypes[31].outEdges[0].inNodes[2] = {};
json.nodeTypes[31].outEdges[0].inNodes[2].name = "NODE";
json.nodeTypes[31].outEdges[0].inNodes[3] = {};
json.nodeTypes[31].outEdges[0].inNodes[3].name = "FLOW";
json.nodeTypes[32] = {};
json.nodeTypes[32].comment = "";
json.nodeTypes[32].id = 217;
json.nodeTypes[32].keys = [];
json.nodeTypes[32].keys[0] = "KEY";
json.nodeTypes[32].keys[1] = "VALUE";
json.nodeTypes[32].name = "KEY_VALUE_PAIR";
json.nodeTypes[32].outEdges = [];
json.nodeTypes[32].outEdges[0] = {};
json.nodeTypes[32].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[32].outEdges[0].inNodes = [];
json.nodeTypes[32].outEdges[0].inNodes[0] = {};
json.nodeTypes[32].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[33] = {};
json.nodeTypes[33].comment = "A node in a Document Object Model (Tree) as obtained from, e.g., an HTML parser";
json.nodeTypes[33].containedNodes = [];
json.nodeTypes[33].containedNodes[0] = {};
json.nodeTypes[33].containedNodes[0].cardinality = "list";
json.nodeTypes[33].containedNodes[0].localName = "attributes";
json.nodeTypes[33].containedNodes[0].nodeType = "DOM_ATTRIBUTE";
json.nodeTypes[33].id = 600;
json.nodeTypes[33].keys = [];
json.nodeTypes[33].keys[0] = "NAME";
json.nodeTypes[33].name = "DOM_NODE";
json.nodeTypes[33].outEdges = [];
json.nodeTypes[33].outEdges[0] = {};
json.nodeTypes[33].outEdges[0].edgeName = "AST";
json.nodeTypes[33].outEdges[0].inNodes = [];
json.nodeTypes[33].outEdges[0].inNodes[0] = {};
json.nodeTypes[33].outEdges[0].inNodes[0].name = "DOM_NODE";
json.nodeTypes[33].outEdges[1] = {};
json.nodeTypes[33].outEdges[1].edgeName = "CONTAINS_NODE";
json.nodeTypes[33].outEdges[1].inNodes = [];
json.nodeTypes[33].outEdges[1].inNodes[0] = {};
json.nodeTypes[33].outEdges[1].inNodes[0].name = "NODE";
json.nodeTypes[33].outEdges[1].inNodes[1] = {};
json.nodeTypes[33].outEdges[1].inNodes[1].name = "DOM_ATTRIBUTE";
json.nodeTypes[34] = {};
json.nodeTypes[34].comment = "";
json.nodeTypes[34].containedNodes = [];
json.nodeTypes[34].containedNodes[0] = {};
json.nodeTypes[34].containedNodes[0].cardinality = "one";
json.nodeTypes[34].containedNodes[0].localName = "method";
json.nodeTypes[34].containedNodes[0].nodeType = "METHOD";
json.nodeTypes[34].containedNodes[1] = {};
json.nodeTypes[34].containedNodes[1].cardinality = "list";
json.nodeTypes[34].containedNodes[1].localName = "parameters";
json.nodeTypes[34].containedNodes[1].nodeType = "METHOD_PARAMETER_IN";
json.nodeTypes[34].containedNodes[2] = {};
json.nodeTypes[34].containedNodes[2].cardinality = "list";
json.nodeTypes[34].containedNodes[2].localName = "outParameters";
json.nodeTypes[34].containedNodes[2].nodeType = "METHOD_PARAMETER_OUT";
json.nodeTypes[34].containedNodes[3] = {};
json.nodeTypes[34].containedNodes[3].cardinality = "one";
json.nodeTypes[34].containedNodes[3].localName = "returnParameter";
json.nodeTypes[34].containedNodes[3].nodeType = "METHOD_RETURN";
json.nodeTypes[34].containedNodes[4] = {};
json.nodeTypes[34].containedNodes[4].cardinality = "list";
json.nodeTypes[34].containedNodes[4].localName = "paramTypes";
json.nodeTypes[34].containedNodes[4].nodeType = "TYPE";
json.nodeTypes[34].containedNodes[5] = {};
json.nodeTypes[34].containedNodes[5].cardinality = "one";
json.nodeTypes[34].containedNodes[5].localName = "returnParameterType";
json.nodeTypes[34].containedNodes[5].nodeType = "TYPE";
json.nodeTypes[34].containedNodes[6] = {};
json.nodeTypes[34].containedNodes[6].cardinality = "list";
json.nodeTypes[34].containedNodes[6].localName = "tags";
json.nodeTypes[34].containedNodes[6].nodeType = "TAG";
json.nodeTypes[34].containedNodes[7] = {};
json.nodeTypes[34].containedNodes[7].cardinality = "list";
json.nodeTypes[34].containedNodes[7].localName = "paramTags";
json.nodeTypes[34].containedNodes[7].nodeType = "TAGS";
json.nodeTypes[34].containedNodes[8] = {};
json.nodeTypes[34].containedNodes[8].cardinality = "list";
json.nodeTypes[34].containedNodes[8].localName = "outParamTags";
json.nodeTypes[34].containedNodes[8].nodeType = "TAGS";
json.nodeTypes[34].containedNodes[9] = {};
json.nodeTypes[34].containedNodes[9].cardinality = "list";
json.nodeTypes[34].containedNodes[9].localName = "returnParamTags";
json.nodeTypes[34].containedNodes[9].nodeType = "TAG";
json.nodeTypes[34].containedNodes[10] = {};
json.nodeTypes[34].containedNodes[10].cardinality = "list";
json.nodeTypes[34].containedNodes[10].localName = "annotationParameters";
json.nodeTypes[34].containedNodes[10].nodeType = "SP_ANNOTATION_PARAMETER";
json.nodeTypes[34].containedNodes[11] = {};
json.nodeTypes[34].containedNodes[11].cardinality = "list";
json.nodeTypes[34].containedNodes[11].localName = "modifiers";
json.nodeTypes[34].containedNodes[11].nodeType = "MODIFIER";
json.nodeTypes[34].containedNodes[12] = {};
json.nodeTypes[34].containedNodes[12].cardinality = "list";
json.nodeTypes[34].containedNodes[12].localName = "routes";
json.nodeTypes[34].containedNodes[12].nodeType = "ROUTE";
json.nodeTypes[34].id = 199;
json.nodeTypes[34].keys = [];
json.nodeTypes[34].keys[0] = "IS_STATIC";
json.nodeTypes[34].keys[1] = "IS_EXTERNAL";
json.nodeTypes[34].keys[2] = "BINARY_SIGNATURE";
json.nodeTypes[34].name = "METHOD_SUMMARY";
json.nodeTypes[34].outEdges = [];
json.nodeTypes[34].outEdges[0] = {};
json.nodeTypes[34].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[34].outEdges[0].inNodes = [];
json.nodeTypes[34].outEdges[0].inNodes[0] = {};
json.nodeTypes[34].outEdges[0].inNodes[0].name = "MODIFIER";
json.nodeTypes[34].outEdges[0].inNodes[1] = {};
json.nodeTypes[34].outEdges[0].inNodes[1].name = "METHOD_PARAMETER_IN";
json.nodeTypes[34].outEdges[0].inNodes[2] = {};
json.nodeTypes[34].outEdges[0].inNodes[2].name = "TAG";
json.nodeTypes[34].outEdges[0].inNodes[3] = {};
json.nodeTypes[34].outEdges[0].inNodes[3].name = "SP_ANNOTATION_PARAMETER";
json.nodeTypes[34].outEdges[0].inNodes[4] = {};
json.nodeTypes[34].outEdges[0].inNodes[4].name = "METHOD_PARAMETER_OUT";
json.nodeTypes[34].outEdges[0].inNodes[5] = {};
json.nodeTypes[34].outEdges[0].inNodes[5].name = "NODE";
json.nodeTypes[34].outEdges[0].inNodes[6] = {};
json.nodeTypes[34].outEdges[0].inNodes[6].name = "TAGS";
json.nodeTypes[34].outEdges[0].inNodes[7] = {};
json.nodeTypes[34].outEdges[0].inNodes[7].name = "METHOD";
json.nodeTypes[34].outEdges[0].inNodes[8] = {};
json.nodeTypes[34].outEdges[0].inNodes[8].name = "ROUTE";
json.nodeTypes[34].outEdges[0].inNodes[9] = {};
json.nodeTypes[34].outEdges[0].inNodes[9].name = "METHOD_RETURN";
json.nodeTypes[34].outEdges[0].inNodes[10] = {};
json.nodeTypes[34].outEdges[0].inNodes[10].name = "TYPE";
json.nodeTypes[35] = {};
json.nodeTypes[35].comment = "A reference to a namespace";
json.nodeTypes[35].id = 41;
json.nodeTypes[35].is = [];
json.nodeTypes[35].is[0] = "AST_NODE";
json.nodeTypes[35].keys = [];
json.nodeTypes[35].keys[0] = "NAME";
json.nodeTypes[35].keys[1] = "FULL_NAME";
json.nodeTypes[35].keys[2] = "ORDER";
json.nodeTypes[35].keys[3] = "FILENAME";
json.nodeTypes[35].name = "NAMESPACE_BLOCK";
json.nodeTypes[35].outEdges = [];
json.nodeTypes[35].outEdges[0] = {};
json.nodeTypes[35].outEdges[0].edgeName = "SOURCE_FILE";
json.nodeTypes[35].outEdges[0].inNodes = [];
json.nodeTypes[35].outEdges[0].inNodes[0] = {};
json.nodeTypes[35].outEdges[0].inNodes[0].name = "FILE";
json.nodeTypes[35].outEdges[1] = {};
json.nodeTypes[35].outEdges[1].edgeName = "REF";
json.nodeTypes[35].outEdges[1].inNodes = [];
json.nodeTypes[35].outEdges[1].inNodes[0] = {};
json.nodeTypes[35].outEdges[1].inNodes[0].name = "NAMESPACE";
json.nodeTypes[35].outEdges[2] = {};
json.nodeTypes[35].outEdges[2].edgeName = "AST";
json.nodeTypes[35].outEdges[2].inNodes = [];
json.nodeTypes[35].outEdges[2].inNodes[0] = {};
json.nodeTypes[35].outEdges[2].inNodes[0].name = "METHOD";
json.nodeTypes[35].outEdges[2].inNodes[1] = {};
json.nodeTypes[35].outEdges[2].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[35].outEdges[3] = {};
json.nodeTypes[35].outEdges[3].edgeName = "CONTAINS_NODE";
json.nodeTypes[35].outEdges[3].inNodes = [];
json.nodeTypes[35].outEdges[3].inNodes[0] = {};
json.nodeTypes[35].outEdges[3].inNodes[0].name = "NODE";
json.nodeTypes[36] = {};
json.nodeTypes[36].comment = "Initialization construct for arrays";
json.nodeTypes[36].id = 14;
json.nodeTypes[36].is = [];
json.nodeTypes[36].is[0] = "AST_NODE";
json.nodeTypes[36].is[1] = "EXPRESSION";
json.nodeTypes[36].keys = [];
json.nodeTypes[36].keys[0] = "DEPTH_FIRST_ORDER";
json.nodeTypes[36].keys[1] = "INTERNAL_FLAGS";
json.nodeTypes[36].keys[2] = "CODE";
json.nodeTypes[36].keys[3] = "ORDER";
json.nodeTypes[36].keys[4] = "ARGUMENT_INDEX";
json.nodeTypes[36].keys[5] = "COLUMN_NUMBER";
json.nodeTypes[36].keys[6] = "LINE_NUMBER";
json.nodeTypes[36].name = "ARRAY_INITIALIZER";
json.nodeTypes[36].outEdges = [];
json.nodeTypes[36].outEdges[0] = {};
json.nodeTypes[36].outEdges[0].edgeName = "EVAL_TYPE";
json.nodeTypes[36].outEdges[0].inNodes = [];
json.nodeTypes[36].outEdges[0].inNodes[0] = {};
json.nodeTypes[36].outEdges[0].inNodes[0].name = "TYPE";
json.nodeTypes[36].outEdges[1] = {};
json.nodeTypes[36].outEdges[1].edgeName = "AST";
json.nodeTypes[36].outEdges[1].inNodes = [];
json.nodeTypes[36].outEdges[1].inNodes[0] = {};
json.nodeTypes[36].outEdges[1].inNodes[0].name = "LITERAL";
json.nodeTypes[36].outEdges[2] = {};
json.nodeTypes[36].outEdges[2].edgeName = "CONTAINS_NODE";
json.nodeTypes[36].outEdges[2].inNodes = [];
json.nodeTypes[36].outEdges[2].inNodes[0] = {};
json.nodeTypes[36].outEdges[2].inNodes[0].name = "NODE";
json.nodeTypes[37] = {};
json.nodeTypes[37].comment = "";
json.nodeTypes[37].containedNodes = [];
json.nodeTypes[37].containedNodes[0] = {};
json.nodeTypes[37].containedNodes[0].cardinality = "one";
json.nodeTypes[37].containedNodes[0].localName = "elem";
json.nodeTypes[37].containedNodes[0].nodeType = "TRACKING_POINT";
json.nodeTypes[37].containedNodes[1] = {};
json.nodeTypes[37].containedNodes[1].cardinality = "zeroOrOne";
json.nodeTypes[37].containedNodes[1].localName = "method";
json.nodeTypes[37].containedNodes[1].nodeType = "METHOD";
json.nodeTypes[37].containedNodes[2] = {};
json.nodeTypes[37].containedNodes[2].cardinality = "list";
json.nodeTypes[37].containedNodes[2].localName = "methodTags";
json.nodeTypes[37].containedNodes[2].nodeType = "TAG";
json.nodeTypes[37].containedNodes[3] = {};
json.nodeTypes[37].containedNodes[3].cardinality = "list";
json.nodeTypes[37].containedNodes[3].localName = "paramTags";
json.nodeTypes[37].containedNodes[3].nodeType = "TAG";
json.nodeTypes[37].id = 205;
json.nodeTypes[37].keys = [];
json.nodeTypes[37].name = "PROGRAM_POINT";
json.nodeTypes[37].outEdges = [];
json.nodeTypes[37].outEdges[0] = {};
json.nodeTypes[37].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[37].outEdges[0].inNodes = [];
json.nodeTypes[37].outEdges[0].inNodes[0] = {};
json.nodeTypes[37].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[37].outEdges[0].inNodes[1] = {};
json.nodeTypes[37].outEdges[0].inNodes[1].name = "METHOD";
json.nodeTypes[37].outEdges[0].inNodes[2] = {};
json.nodeTypes[37].outEdges[0].inNodes[2].name = "TRACKING_POINT";
json.nodeTypes[37].outEdges[0].inNodes[3] = {};
json.nodeTypes[37].outEdges[0].inNodes[3].name = "TAG";
json.nodeTypes[38] = {};
json.nodeTypes[38].comment = "A method annotation";
json.nodeTypes[38].id = 5;
json.nodeTypes[38].is = [];
json.nodeTypes[38].is[0] = "AST_NODE";
json.nodeTypes[38].keys = [];
json.nodeTypes[38].keys[0] = "CODE";
json.nodeTypes[38].keys[1] = "NAME";
json.nodeTypes[38].keys[2] = "FULL_NAME";
json.nodeTypes[38].keys[3] = "ORDER";
json.nodeTypes[38].name = "ANNOTATION";
json.nodeTypes[38].outEdges = [];
json.nodeTypes[38].outEdges[0] = {};
json.nodeTypes[38].outEdges[0].edgeName = "AST";
json.nodeTypes[38].outEdges[0].inNodes = [];
json.nodeTypes[38].outEdges[0].inNodes[0] = {};
json.nodeTypes[38].outEdges[0].inNodes[0].name = "ANNOTATION_PARAMETER_ASSIGN";
json.nodeTypes[38].outEdges[1] = {};
json.nodeTypes[38].outEdges[1].edgeName = "CONTAINS_NODE";
json.nodeTypes[38].outEdges[1].inNodes = [];
json.nodeTypes[38].outEdges[1].inNodes[0] = {};
json.nodeTypes[38].outEdges[1].inNodes[0].name = "NODE";
json.nodeTypes[39] = {};
json.nodeTypes[39].comment = "";
json.nodeTypes[39].containedNodes = [];
json.nodeTypes[39].containedNodes[0] = {};
json.nodeTypes[39].containedNodes[0].cardinality = "list";
json.nodeTypes[39].containedNodes[0].localName = "names";
json.nodeTypes[39].containedNodes[0].nodeType = "MATCH_INFO";
json.nodeTypes[39].id = 53;
json.nodeTypes[39].keys = [];
json.nodeTypes[39].keys[0] = "NAME";
json.nodeTypes[39].name = "SENSITIVE_MEMBER";
json.nodeTypes[39].outEdges = [];
json.nodeTypes[39].outEdges[0] = {};
json.nodeTypes[39].outEdges[0].edgeName = "IS_SENSITIVE_DATA_DESCR_OF";
json.nodeTypes[39].outEdges[0].inNodes = [];
json.nodeTypes[39].outEdges[0].inNodes[0] = {};
json.nodeTypes[39].outEdges[0].inNodes[0].name = "MEMBER";
json.nodeTypes[39].outEdges[0].inNodes[1] = {};
json.nodeTypes[39].outEdges[0].inNodes[1].name = "TYPE";
json.nodeTypes[39].outEdges[1] = {};
json.nodeTypes[39].outEdges[1].edgeName = "CONTAINS_NODE";
json.nodeTypes[39].outEdges[1].inNodes = [];
json.nodeTypes[39].outEdges[1].inNodes[0] = {};
json.nodeTypes[39].outEdges[1].inNodes[0].name = "MATCH_INFO";
json.nodeTypes[39].outEdges[1].inNodes[1] = {};
json.nodeTypes[39].outEdges[1].inNodes[1].name = "NODE";
json.nodeTypes[40] = {};
json.nodeTypes[40].comment = "An arbitrary identifier/reference";
json.nodeTypes[40].id = 27;
json.nodeTypes[40].is = [];
json.nodeTypes[40].is[0] = "EXPRESSION";
json.nodeTypes[40].is[1] = "LOCAL_LIKE";
json.nodeTypes[40].keys = [];
json.nodeTypes[40].keys[0] = "CODE";
json.nodeTypes[40].keys[1] = "NAME";
json.nodeTypes[40].keys[2] = "ORDER";
json.nodeTypes[40].keys[3] = "ARGUMENT_INDEX";
json.nodeTypes[40].keys[4] = "TYPE_FULL_NAME";
json.nodeTypes[40].keys[5] = "DYNAMIC_TYPE_HINT_FULL_NAME";
json.nodeTypes[40].keys[6] = "LINE_NUMBER";
json.nodeTypes[40].keys[7] = "COLUMN_NUMBER";
json.nodeTypes[40].keys[8] = "DEPTH_FIRST_ORDER";
json.nodeTypes[40].keys[9] = "INTERNAL_FLAGS";
json.nodeTypes[40].name = "IDENTIFIER";
json.nodeTypes[40].outEdges = [];
json.nodeTypes[40].outEdges[0] = {};
json.nodeTypes[40].outEdges[0].edgeName = "CDG";
json.nodeTypes[40].outEdges[0].inNodes = [];
json.nodeTypes[40].outEdges[0].inNodes[0] = {};
json.nodeTypes[40].outEdges[0].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[40].outEdges[0].inNodes[1] = {};
json.nodeTypes[40].outEdges[0].inNodes[1].name = "METHOD_REF";
json.nodeTypes[40].outEdges[0].inNodes[2] = {};
json.nodeTypes[40].outEdges[0].inNodes[2].name = "CALL";
json.nodeTypes[40].outEdges[0].inNodes[3] = {};
json.nodeTypes[40].outEdges[0].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[40].outEdges[0].inNodes[4] = {};
json.nodeTypes[40].outEdges[0].inNodes[4].name = "RETURN";
json.nodeTypes[40].outEdges[0].inNodes[5] = {};
json.nodeTypes[40].outEdges[0].inNodes[5].name = "LITERAL";
json.nodeTypes[40].outEdges[0].inNodes[6] = {};
json.nodeTypes[40].outEdges[0].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[40].outEdges[0].inNodes[7] = {};
json.nodeTypes[40].outEdges[0].inNodes[7].name = "UNKNOWN";
json.nodeTypes[40].outEdges[0].inNodes[8] = {};
json.nodeTypes[40].outEdges[0].inNodes[8].name = "BLOCK";
json.nodeTypes[40].outEdges[1] = {};
json.nodeTypes[40].outEdges[1].edgeName = "REF";
json.nodeTypes[40].outEdges[1].inNodes = [];
json.nodeTypes[40].outEdges[1].inNodes[0] = {};
json.nodeTypes[40].outEdges[1].inNodes[0].cardinality = "n:0-1";
json.nodeTypes[40].outEdges[1].inNodes[0].name = "LOCAL";
json.nodeTypes[40].outEdges[1].inNodes[1] = {};
json.nodeTypes[40].outEdges[1].inNodes[1].cardinality = "n:0-1";
json.nodeTypes[40].outEdges[1].inNodes[1].name = "METHOD_PARAMETER_IN";
json.nodeTypes[40].outEdges[2] = {};
json.nodeTypes[40].outEdges[2].edgeName = "TAGGED_BY";
json.nodeTypes[40].outEdges[2].inNodes = [];
json.nodeTypes[40].outEdges[2].inNodes[0] = {};
json.nodeTypes[40].outEdges[2].inNodes[0].name = "TAG";
json.nodeTypes[40].outEdges[3] = {};
json.nodeTypes[40].outEdges[3].edgeName = "DYNAMIC_TYPE";
json.nodeTypes[40].outEdges[3].inNodes = [];
json.nodeTypes[40].outEdges[3].inNodes[0] = {};
json.nodeTypes[40].outEdges[3].inNodes[0].name = "METHOD";
json.nodeTypes[40].outEdges[3].inNodes[1] = {};
json.nodeTypes[40].outEdges[3].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[40].outEdges[4] = {};
json.nodeTypes[40].outEdges[4].edgeName = "CFG";
json.nodeTypes[40].outEdges[4].inNodes = [];
json.nodeTypes[40].outEdges[4].inNodes[0] = {};
json.nodeTypes[40].outEdges[4].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[40].outEdges[4].inNodes[1] = {};
json.nodeTypes[40].outEdges[4].inNodes[1].name = "METHOD_REF";
json.nodeTypes[40].outEdges[4].inNodes[2] = {};
json.nodeTypes[40].outEdges[4].inNodes[2].name = "CALL";
json.nodeTypes[40].outEdges[4].inNodes[3] = {};
json.nodeTypes[40].outEdges[4].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[40].outEdges[4].inNodes[4] = {};
json.nodeTypes[40].outEdges[4].inNodes[4].name = "RETURN";
json.nodeTypes[40].outEdges[4].inNodes[5] = {};
json.nodeTypes[40].outEdges[4].inNodes[5].name = "LITERAL";
json.nodeTypes[40].outEdges[4].inNodes[6] = {};
json.nodeTypes[40].outEdges[4].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[40].outEdges[4].inNodes[7] = {};
json.nodeTypes[40].outEdges[4].inNodes[7].name = "UNKNOWN";
json.nodeTypes[40].outEdges[4].inNodes[8] = {};
json.nodeTypes[40].outEdges[4].inNodes[8].name = "BLOCK";
json.nodeTypes[40].outEdges[5] = {};
json.nodeTypes[40].outEdges[5].edgeName = "POST_DOMINATE";
json.nodeTypes[40].outEdges[5].inNodes = [];
json.nodeTypes[40].outEdges[5].inNodes[0] = {};
json.nodeTypes[40].outEdges[5].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[40].outEdges[5].inNodes[1] = {};
json.nodeTypes[40].outEdges[5].inNodes[1].name = "METHOD_REF";
json.nodeTypes[40].outEdges[5].inNodes[2] = {};
json.nodeTypes[40].outEdges[5].inNodes[2].name = "CALL";
json.nodeTypes[40].outEdges[5].inNodes[3] = {};
json.nodeTypes[40].outEdges[5].inNodes[3].name = "METHOD";
json.nodeTypes[40].outEdges[5].inNodes[4] = {};
json.nodeTypes[40].outEdges[5].inNodes[4].name = "FIELD_IDENTIFIER";
json.nodeTypes[40].outEdges[5].inNodes[5] = {};
json.nodeTypes[40].outEdges[5].inNodes[5].name = "RETURN";
json.nodeTypes[40].outEdges[5].inNodes[6] = {};
json.nodeTypes[40].outEdges[5].inNodes[6].name = "LITERAL";
json.nodeTypes[40].outEdges[5].inNodes[7] = {};
json.nodeTypes[40].outEdges[5].inNodes[7].name = "UNKNOWN";
json.nodeTypes[40].outEdges[5].inNodes[8] = {};
json.nodeTypes[40].outEdges[5].inNodes[8].name = "BLOCK";
json.nodeTypes[40].outEdges[6] = {};
json.nodeTypes[40].outEdges[6].edgeName = "DOMINATE";
json.nodeTypes[40].outEdges[6].inNodes = [];
json.nodeTypes[40].outEdges[6].inNodes[0] = {};
json.nodeTypes[40].outEdges[6].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[40].outEdges[6].inNodes[1] = {};
json.nodeTypes[40].outEdges[6].inNodes[1].name = "METHOD_REF";
json.nodeTypes[40].outEdges[6].inNodes[2] = {};
json.nodeTypes[40].outEdges[6].inNodes[2].name = "CALL";
json.nodeTypes[40].outEdges[6].inNodes[3] = {};
json.nodeTypes[40].outEdges[6].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[40].outEdges[6].inNodes[4] = {};
json.nodeTypes[40].outEdges[6].inNodes[4].name = "RETURN";
json.nodeTypes[40].outEdges[6].inNodes[5] = {};
json.nodeTypes[40].outEdges[6].inNodes[5].name = "LITERAL";
json.nodeTypes[40].outEdges[6].inNodes[6] = {};
json.nodeTypes[40].outEdges[6].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[40].outEdges[6].inNodes[7] = {};
json.nodeTypes[40].outEdges[6].inNodes[7].name = "UNKNOWN";
json.nodeTypes[40].outEdges[6].inNodes[8] = {};
json.nodeTypes[40].outEdges[6].inNodes[8].name = "BLOCK";
json.nodeTypes[40].outEdges[7] = {};
json.nodeTypes[40].outEdges[7].edgeName = "CONTAINS_NODE";
json.nodeTypes[40].outEdges[7].inNodes = [];
json.nodeTypes[40].outEdges[7].inNodes[0] = {};
json.nodeTypes[40].outEdges[7].inNodes[0].name = "NODE";
json.nodeTypes[40].outEdges[8] = {};
json.nodeTypes[40].outEdges[8].edgeName = "EVAL_TYPE";
json.nodeTypes[40].outEdges[8].inNodes = [];
json.nodeTypes[40].outEdges[8].inNodes[0] = {};
json.nodeTypes[40].outEdges[8].inNodes[0].name = "TYPE";
json.nodeTypes[41] = {};
json.nodeTypes[41].comment = "";
json.nodeTypes[41].containedNodes = [];
json.nodeTypes[41].containedNodes[0] = {};
json.nodeTypes[41].containedNodes[0].cardinality = "one";
json.nodeTypes[41].containedNodes[0].localName = "node";
json.nodeTypes[41].containedNodes[0].nodeType = "TRACKING_POINT";
json.nodeTypes[41].id = 213;
json.nodeTypes[41].keys = [];
json.nodeTypes[41].name = "TRANSFORMATION";
json.nodeTypes[41].outEdges = [];
json.nodeTypes[41].outEdges[0] = {};
json.nodeTypes[41].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[41].outEdges[0].inNodes = [];
json.nodeTypes[41].outEdges[0].inNodes[0] = {};
json.nodeTypes[41].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[41].outEdges[0].inNodes[1] = {};
json.nodeTypes[41].outEdges[0].inNodes[1].name = "TRACKING_POINT";
json.nodeTypes[42] = {};
json.nodeTypes[42].comment = "Node representing a source file. Often also the AST root";
json.nodeTypes[42].id = 38;
json.nodeTypes[42].is = [];
json.nodeTypes[42].is[0] = "AST_NODE";
json.nodeTypes[42].keys = [];
json.nodeTypes[42].keys[0] = "NAME";
json.nodeTypes[42].keys[1] = "ORDER";
json.nodeTypes[42].name = "FILE";
json.nodeTypes[42].outEdges = [];
json.nodeTypes[42].outEdges[0] = {};
json.nodeTypes[42].outEdges[0].edgeName = "AST";
json.nodeTypes[42].outEdges[0].inNodes = [];
json.nodeTypes[42].outEdges[0].inNodes[0] = {};
json.nodeTypes[42].outEdges[0].inNodes[0].name = "COMMENT";
json.nodeTypes[42].outEdges[0].inNodes[1] = {};
json.nodeTypes[42].outEdges[0].inNodes[1].name = "NAMESPACE_BLOCK";
json.nodeTypes[42].outEdges[1] = {};
json.nodeTypes[42].outEdges[1].edgeName = "CONTAINS";
json.nodeTypes[42].outEdges[1].inNodes = [];
json.nodeTypes[42].outEdges[1].inNodes[0] = {};
json.nodeTypes[42].outEdges[1].inNodes[0].name = "METHOD";
json.nodeTypes[42].outEdges[1].inNodes[1] = {};
json.nodeTypes[42].outEdges[1].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[42].outEdges[2] = {};
json.nodeTypes[42].outEdges[2].edgeName = "CONTAINS_NODE";
json.nodeTypes[42].outEdges[2].inNodes = [];
json.nodeTypes[42].outEdges[2].inNodes[0] = {};
json.nodeTypes[42].outEdges[2].inNodes[0].name = "NODE";
json.nodeTypes[43] = {};
json.nodeTypes[43].comment = "This node represents a dependency";
json.nodeTypes[43].id = 35;
json.nodeTypes[43].keys = [];
json.nodeTypes[43].keys[0] = "VERSION";
json.nodeTypes[43].keys[1] = "NAME";
json.nodeTypes[43].keys[2] = "DEPENDENCY_GROUP_ID";
json.nodeTypes[43].name = "DEPENDENCY";
json.nodeTypes[43].outEdges = [];
json.nodeTypes[43].outEdges[0] = {};
json.nodeTypes[43].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[43].outEdges[0].inNodes = [];
json.nodeTypes[43].outEdges[0].inNodes[0] = {};
json.nodeTypes[43].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[44] = {};
json.nodeTypes[44].comment = "This node records what package prefix is most common to all analysed classes in the CPG";
json.nodeTypes[44].id = 36;
json.nodeTypes[44].keys = [];
json.nodeTypes[44].keys[0] = "VALUE";
json.nodeTypes[44].name = "PACKAGE_PREFIX";
json.nodeTypes[44].outEdges = [];
json.nodeTypes[44].outEdges[0] = {};
json.nodeTypes[44].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[44].outEdges[0].inNodes = [];
json.nodeTypes[44].outEdges[0].inNodes[0] = {};
json.nodeTypes[44].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[45] = {};
json.nodeTypes[45].comment = "An implicit call site hidden in a method indicated by METHOD_MAP policy entries";
json.nodeTypes[45].id = 307;
json.nodeTypes[45].is = [];
json.nodeTypes[45].is[0] = "CALL_REPR";
json.nodeTypes[45].is[1] = "TRACKING_POINT";
json.nodeTypes[45].keys = [];
json.nodeTypes[45].keys[0] = "DEPTH_FIRST_ORDER";
json.nodeTypes[45].keys[1] = "INTERNAL_FLAGS";
json.nodeTypes[45].keys[2] = "CODE";
json.nodeTypes[45].keys[3] = "NAME";
json.nodeTypes[45].keys[4] = "SIGNATURE";
json.nodeTypes[45].keys[5] = "LINE_NUMBER";
json.nodeTypes[45].keys[6] = "COLUMN_NUMBER";
json.nodeTypes[45].keys[7] = "ORDER";
json.nodeTypes[45].name = "IMPLICIT_CALL";
json.nodeTypes[45].outEdges = [];
json.nodeTypes[45].outEdges[0] = {};
json.nodeTypes[45].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[45].outEdges[0].inNodes = [];
json.nodeTypes[45].outEdges[0].inNodes[0] = {};
json.nodeTypes[45].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[46] = {};
json.nodeTypes[46].comment = "";
json.nodeTypes[46].id = 51;
json.nodeTypes[46].keys = [];
json.nodeTypes[46].keys[0] = "PATTERN";
json.nodeTypes[46].keys[1] = "CATEGORY";
json.nodeTypes[46].name = "MATCH_INFO";
json.nodeTypes[46].outEdges = [];
json.nodeTypes[46].outEdges[0] = {};
json.nodeTypes[46].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[46].outEdges[0].inNodes = [];
json.nodeTypes[46].outEdges[0].inNodes[0] = {};
json.nodeTypes[46].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[47] = {};
json.nodeTypes[47].comment = "Indicates the usage of a framework. E.g. java spring. The name key is one of the values from frameworks list";
json.nodeTypes[47].id = 42;
json.nodeTypes[47].keys = [];
json.nodeTypes[47].keys[0] = "NAME";
json.nodeTypes[47].name = "FRAMEWORK";
json.nodeTypes[47].outEdges = [];
json.nodeTypes[47].outEdges[0] = {};
json.nodeTypes[47].outEdges[0].edgeName = "ATTACHED_DATA";
json.nodeTypes[47].outEdges[0].inNodes = [];
json.nodeTypes[47].outEdges[0].inNodes[0] = {};
json.nodeTypes[47].outEdges[0].inNodes[0].name = "FRAMEWORK_DATA";
json.nodeTypes[47].outEdges[1] = {};
json.nodeTypes[47].outEdges[1].edgeName = "CONTAINS_NODE";
json.nodeTypes[47].outEdges[1].inNodes = [];
json.nodeTypes[47].outEdges[1].inNodes[0] = {};
json.nodeTypes[47].outEdges[1].inNodes[0].name = "NODE";
json.nodeTypes[48] = {};
json.nodeTypes[48].comment = "A modifier, e.g., static, public, private";
json.nodeTypes[48].id = 300;
json.nodeTypes[48].is = [];
json.nodeTypes[48].is[0] = "AST_NODE";
json.nodeTypes[48].keys = [];
json.nodeTypes[48].keys[0] = "MODIFIER_TYPE";
json.nodeTypes[48].keys[1] = "ORDER";
json.nodeTypes[48].name = "MODIFIER";
json.nodeTypes[48].outEdges = [];
json.nodeTypes[48].outEdges[0] = {};
json.nodeTypes[48].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[48].outEdges[0].inNodes = [];
json.nodeTypes[48].outEdges[0].inNodes[0] = {};
json.nodeTypes[48].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[49] = {};
json.nodeTypes[49].comment = "A control structure such as if, while, or for";
json.nodeTypes[49].id = 339;
json.nodeTypes[49].is = [];
json.nodeTypes[49].is[0] = "EXPRESSION";
json.nodeTypes[49].keys = [];
json.nodeTypes[49].keys[0] = "CODE";
json.nodeTypes[49].keys[1] = "COLUMN_NUMBER";
json.nodeTypes[49].keys[2] = "LINE_NUMBER";
json.nodeTypes[49].keys[3] = "ORDER";
json.nodeTypes[49].keys[4] = "PARSER_TYPE_NAME";
json.nodeTypes[49].keys[5] = "ARGUMENT_INDEX";
json.nodeTypes[49].keys[6] = "DEPTH_FIRST_ORDER";
json.nodeTypes[49].keys[7] = "INTERNAL_FLAGS";
json.nodeTypes[49].name = "CONTROL_STRUCTURE";
json.nodeTypes[49].outEdges = [];
json.nodeTypes[49].outEdges[0] = {};
json.nodeTypes[49].outEdges[0].edgeName = "CONDITION";
json.nodeTypes[49].outEdges[0].inNodes = [];
json.nodeTypes[49].outEdges[0].inNodes[0] = {};
json.nodeTypes[49].outEdges[0].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[49].outEdges[0].inNodes[1] = {};
json.nodeTypes[49].outEdges[0].inNodes[1].name = "METHOD_REF";
json.nodeTypes[49].outEdges[0].inNodes[2] = {};
json.nodeTypes[49].outEdges[0].inNodes[2].name = "ARRAY_INITIALIZER";
json.nodeTypes[49].outEdges[0].inNodes[3] = {};
json.nodeTypes[49].outEdges[0].inNodes[3].name = "CALL";
json.nodeTypes[49].outEdges[0].inNodes[4] = {};
json.nodeTypes[49].outEdges[0].inNodes[4].name = "RETURN";
json.nodeTypes[49].outEdges[0].inNodes[5] = {};
json.nodeTypes[49].outEdges[0].inNodes[5].name = "LITERAL";
json.nodeTypes[49].outEdges[0].inNodes[6] = {};
json.nodeTypes[49].outEdges[0].inNodes[6].name = "CONTROL_STRUCTURE";
json.nodeTypes[49].outEdges[0].inNodes[7] = {};
json.nodeTypes[49].outEdges[0].inNodes[7].name = "UNKNOWN";
json.nodeTypes[49].outEdges[0].inNodes[8] = {};
json.nodeTypes[49].outEdges[0].inNodes[8].name = "BLOCK";
json.nodeTypes[49].outEdges[1] = {};
json.nodeTypes[49].outEdges[1].edgeName = "AST";
json.nodeTypes[49].outEdges[1].inNodes = [];
json.nodeTypes[49].outEdges[1].inNodes[0] = {};
json.nodeTypes[49].outEdges[1].inNodes[0].name = "MODIFIER";
json.nodeTypes[49].outEdges[1].inNodes[1] = {};
json.nodeTypes[49].outEdges[1].inNodes[1].name = "IDENTIFIER";
json.nodeTypes[49].outEdges[1].inNodes[2] = {};
json.nodeTypes[49].outEdges[1].inNodes[2].name = "ARRAY_INITIALIZER";
json.nodeTypes[49].outEdges[1].inNodes[3] = {};
json.nodeTypes[49].outEdges[1].inNodes[3].name = "CALL";
json.nodeTypes[49].outEdges[1].inNodes[4] = {};
json.nodeTypes[49].outEdges[1].inNodes[4].name = "RETURN";
json.nodeTypes[49].outEdges[1].inNodes[5] = {};
json.nodeTypes[49].outEdges[1].inNodes[5].name = "LITERAL";
json.nodeTypes[49].outEdges[1].inNodes[6] = {};
json.nodeTypes[49].outEdges[1].inNodes[6].name = "LOCAL";
json.nodeTypes[49].outEdges[1].inNodes[7] = {};
json.nodeTypes[49].outEdges[1].inNodes[7].name = "CONTROL_STRUCTURE";
json.nodeTypes[49].outEdges[1].inNodes[8] = {};
json.nodeTypes[49].outEdges[1].inNodes[8].name = "UNKNOWN";
json.nodeTypes[49].outEdges[1].inNodes[9] = {};
json.nodeTypes[49].outEdges[1].inNodes[9].name = "BLOCK";
json.nodeTypes[49].outEdges[2] = {};
json.nodeTypes[49].outEdges[2].edgeName = "CONTAINS_NODE";
json.nodeTypes[49].outEdges[2].inNodes = [];
json.nodeTypes[49].outEdges[2].inNodes[0] = {};
json.nodeTypes[49].outEdges[2].inNodes[0].name = "NODE";
json.nodeTypes[50] = {};
json.nodeTypes[50].comment = "A structuring block in the AST";
json.nodeTypes[50].id = 31;
json.nodeTypes[50].is = [];
json.nodeTypes[50].is[0] = "EXPRESSION";
json.nodeTypes[50].keys = [];
json.nodeTypes[50].keys[0] = "CODE";
json.nodeTypes[50].keys[1] = "ORDER";
json.nodeTypes[50].keys[2] = "ARGUMENT_INDEX";
json.nodeTypes[50].keys[3] = "TYPE_FULL_NAME";
json.nodeTypes[50].keys[4] = "DYNAMIC_TYPE_HINT_FULL_NAME";
json.nodeTypes[50].keys[5] = "LINE_NUMBER";
json.nodeTypes[50].keys[6] = "COLUMN_NUMBER";
json.nodeTypes[50].keys[7] = "DEPTH_FIRST_ORDER";
json.nodeTypes[50].keys[8] = "INTERNAL_FLAGS";
json.nodeTypes[50].name = "BLOCK";
json.nodeTypes[50].outEdges = [];
json.nodeTypes[50].outEdges[0] = {};
json.nodeTypes[50].outEdges[0].edgeName = "CDG";
json.nodeTypes[50].outEdges[0].inNodes = [];
json.nodeTypes[50].outEdges[0].inNodes[0] = {};
json.nodeTypes[50].outEdges[0].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[50].outEdges[0].inNodes[1] = {};
json.nodeTypes[50].outEdges[0].inNodes[1].name = "METHOD_REF";
json.nodeTypes[50].outEdges[0].inNodes[2] = {};
json.nodeTypes[50].outEdges[0].inNodes[2].name = "CALL";
json.nodeTypes[50].outEdges[0].inNodes[3] = {};
json.nodeTypes[50].outEdges[0].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[50].outEdges[0].inNodes[4] = {};
json.nodeTypes[50].outEdges[0].inNodes[4].name = "RETURN";
json.nodeTypes[50].outEdges[0].inNodes[5] = {};
json.nodeTypes[50].outEdges[0].inNodes[5].name = "LITERAL";
json.nodeTypes[50].outEdges[0].inNodes[6] = {};
json.nodeTypes[50].outEdges[0].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[50].outEdges[0].inNodes[7] = {};
json.nodeTypes[50].outEdges[0].inNodes[7].name = "UNKNOWN";
json.nodeTypes[50].outEdges[0].inNodes[8] = {};
json.nodeTypes[50].outEdges[0].inNodes[8].name = "BLOCK";
json.nodeTypes[50].outEdges[1] = {};
json.nodeTypes[50].outEdges[1].edgeName = "REACHING_DEF";
json.nodeTypes[50].outEdges[1].inNodes = [];
json.nodeTypes[50].outEdges[1].inNodes[0] = {};
json.nodeTypes[50].outEdges[1].inNodes[0].name = "BLOCK";
json.nodeTypes[50].outEdges[1].inNodes[1] = {};
json.nodeTypes[50].outEdges[1].inNodes[1].name = "CALL";
json.nodeTypes[50].outEdges[1].inNodes[2] = {};
json.nodeTypes[50].outEdges[1].inNodes[2].name = "RETURN";
json.nodeTypes[50].outEdges[2] = {};
json.nodeTypes[50].outEdges[2].edgeName = "DYNAMIC_TYPE";
json.nodeTypes[50].outEdges[2].inNodes = [];
json.nodeTypes[50].outEdges[2].inNodes[0] = {};
json.nodeTypes[50].outEdges[2].inNodes[0].name = "METHOD";
json.nodeTypes[50].outEdges[2].inNodes[1] = {};
json.nodeTypes[50].outEdges[2].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[50].outEdges[3] = {};
json.nodeTypes[50].outEdges[3].edgeName = "CFG";
json.nodeTypes[50].outEdges[3].inNodes = [];
json.nodeTypes[50].outEdges[3].inNodes[0] = {};
json.nodeTypes[50].outEdges[3].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[50].outEdges[3].inNodes[1] = {};
json.nodeTypes[50].outEdges[3].inNodes[1].name = "METHOD_REF";
json.nodeTypes[50].outEdges[3].inNodes[2] = {};
json.nodeTypes[50].outEdges[3].inNodes[2].name = "CALL";
json.nodeTypes[50].outEdges[3].inNodes[3] = {};
json.nodeTypes[50].outEdges[3].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[50].outEdges[3].inNodes[4] = {};
json.nodeTypes[50].outEdges[3].inNodes[4].name = "RETURN";
json.nodeTypes[50].outEdges[3].inNodes[5] = {};
json.nodeTypes[50].outEdges[3].inNodes[5].name = "LITERAL";
json.nodeTypes[50].outEdges[3].inNodes[6] = {};
json.nodeTypes[50].outEdges[3].inNodes[6].name = "UNKNOWN";
json.nodeTypes[50].outEdges[3].inNodes[7] = {};
json.nodeTypes[50].outEdges[3].inNodes[7].name = "BLOCK";
json.nodeTypes[50].outEdges[4] = {};
json.nodeTypes[50].outEdges[4].edgeName = "POST_DOMINATE";
json.nodeTypes[50].outEdges[4].inNodes = [];
json.nodeTypes[50].outEdges[4].inNodes[0] = {};
json.nodeTypes[50].outEdges[4].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[50].outEdges[4].inNodes[1] = {};
json.nodeTypes[50].outEdges[4].inNodes[1].name = "METHOD_REF";
json.nodeTypes[50].outEdges[4].inNodes[2] = {};
json.nodeTypes[50].outEdges[4].inNodes[2].name = "CALL";
json.nodeTypes[50].outEdges[4].inNodes[3] = {};
json.nodeTypes[50].outEdges[4].inNodes[3].name = "METHOD";
json.nodeTypes[50].outEdges[4].inNodes[4] = {};
json.nodeTypes[50].outEdges[4].inNodes[4].name = "FIELD_IDENTIFIER";
json.nodeTypes[50].outEdges[4].inNodes[5] = {};
json.nodeTypes[50].outEdges[4].inNodes[5].name = "RETURN";
json.nodeTypes[50].outEdges[4].inNodes[6] = {};
json.nodeTypes[50].outEdges[4].inNodes[6].name = "LITERAL";
json.nodeTypes[50].outEdges[4].inNodes[7] = {};
json.nodeTypes[50].outEdges[4].inNodes[7].name = "UNKNOWN";
json.nodeTypes[50].outEdges[4].inNodes[8] = {};
json.nodeTypes[50].outEdges[4].inNodes[8].name = "BLOCK";
json.nodeTypes[50].outEdges[5] = {};
json.nodeTypes[50].outEdges[5].edgeName = "AST";
json.nodeTypes[50].outEdges[5].inNodes = [];
json.nodeTypes[50].outEdges[5].inNodes[0] = {};
json.nodeTypes[50].outEdges[5].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[50].outEdges[5].inNodes[1] = {};
json.nodeTypes[50].outEdges[5].inNodes[1].name = "METHOD_REF";
json.nodeTypes[50].outEdges[5].inNodes[2] = {};
json.nodeTypes[50].outEdges[5].inNodes[2].name = "CALL";
json.nodeTypes[50].outEdges[5].inNodes[3] = {};
json.nodeTypes[50].outEdges[5].inNodes[3].name = "RETURN";
json.nodeTypes[50].outEdges[5].inNodes[4] = {};
json.nodeTypes[50].outEdges[5].inNodes[4].name = "LITERAL";
json.nodeTypes[50].outEdges[5].inNodes[5] = {};
json.nodeTypes[50].outEdges[5].inNodes[5].name = "LOCAL";
json.nodeTypes[50].outEdges[5].inNodes[6] = {};
json.nodeTypes[50].outEdges[5].inNodes[6].name = "CONTROL_STRUCTURE";
json.nodeTypes[50].outEdges[5].inNodes[7] = {};
json.nodeTypes[50].outEdges[5].inNodes[7].name = "UNKNOWN";
json.nodeTypes[50].outEdges[5].inNodes[8] = {};
json.nodeTypes[50].outEdges[5].inNodes[8].name = "BLOCK";
json.nodeTypes[50].outEdges[6] = {};
json.nodeTypes[50].outEdges[6].edgeName = "DOMINATE";
json.nodeTypes[50].outEdges[6].inNodes = [];
json.nodeTypes[50].outEdges[6].inNodes[0] = {};
json.nodeTypes[50].outEdges[6].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[50].outEdges[6].inNodes[1] = {};
json.nodeTypes[50].outEdges[6].inNodes[1].name = "METHOD_REF";
json.nodeTypes[50].outEdges[6].inNodes[2] = {};
json.nodeTypes[50].outEdges[6].inNodes[2].name = "CALL";
json.nodeTypes[50].outEdges[6].inNodes[3] = {};
json.nodeTypes[50].outEdges[6].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[50].outEdges[6].inNodes[4] = {};
json.nodeTypes[50].outEdges[6].inNodes[4].name = "RETURN";
json.nodeTypes[50].outEdges[6].inNodes[5] = {};
json.nodeTypes[50].outEdges[6].inNodes[5].name = "LITERAL";
json.nodeTypes[50].outEdges[6].inNodes[6] = {};
json.nodeTypes[50].outEdges[6].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[50].outEdges[6].inNodes[7] = {};
json.nodeTypes[50].outEdges[6].inNodes[7].name = "UNKNOWN";
json.nodeTypes[50].outEdges[6].inNodes[8] = {};
json.nodeTypes[50].outEdges[6].inNodes[8].name = "BLOCK";
json.nodeTypes[50].outEdges[7] = {};
json.nodeTypes[50].outEdges[7].edgeName = "CONTAINS_NODE";
json.nodeTypes[50].outEdges[7].inNodes = [];
json.nodeTypes[50].outEdges[7].inNodes[0] = {};
json.nodeTypes[50].outEdges[7].inNodes[0].name = "NODE";
json.nodeTypes[50].outEdges[8] = {};
json.nodeTypes[50].outEdges[8].edgeName = "EVAL_TYPE";
json.nodeTypes[50].outEdges[8].inNodes = [];
json.nodeTypes[50].outEdges[8].inNodes[0] = {};
json.nodeTypes[50].outEdges[8].inNodes[0].name = "TYPE";
json.nodeTypes[51] = {};
json.nodeTypes[51].comment = "";
json.nodeTypes[51].containedNodes = [];
json.nodeTypes[51].containedNodes[0] = {};
json.nodeTypes[51].containedNodes[0].cardinality = "list";
json.nodeTypes[51].containedNodes[0].comment = "";
json.nodeTypes[51].containedNodes[0].localName = "tags";
json.nodeTypes[51].containedNodes[0].nodeType = "TAG";
json.nodeTypes[51].id = 216;
json.nodeTypes[51].keys = [];
json.nodeTypes[51].name = "SP_BLACKLIST";
json.nodeTypes[51].outEdges = [];
json.nodeTypes[51].outEdges[0] = {};
json.nodeTypes[51].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[51].outEdges[0].inNodes = [];
json.nodeTypes[51].outEdges[0].inNodes[0] = {};
json.nodeTypes[51].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[51].outEdges[0].inNodes[1] = {};
json.nodeTypes[51].outEdges[0].inNodes[1].name = "TAG";
json.nodeTypes[52] = {};
json.nodeTypes[52].comment = "Data used by a framework";
json.nodeTypes[52].id = 43;
json.nodeTypes[52].keys = [];
json.nodeTypes[52].keys[0] = "NAME";
json.nodeTypes[52].keys[1] = "CONTENT";
json.nodeTypes[52].name = "FRAMEWORK_DATA";
json.nodeTypes[52].outEdges = [];
json.nodeTypes[52].outEdges[0] = {};
json.nodeTypes[52].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[52].outEdges[0].inNodes = [];
json.nodeTypes[52].outEdges[0].inNodes[0] = {};
json.nodeTypes[52].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[53] = {};
json.nodeTypes[53].comment = "Literal/Constant";
json.nodeTypes[53].id = 8;
json.nodeTypes[53].is = [];
json.nodeTypes[53].is[0] = "EXPRESSION";
json.nodeTypes[53].keys = [];
json.nodeTypes[53].keys[0] = "CODE";
json.nodeTypes[53].keys[1] = "ORDER";
json.nodeTypes[53].keys[2] = "ARGUMENT_INDEX";
json.nodeTypes[53].keys[3] = "TYPE_FULL_NAME";
json.nodeTypes[53].keys[4] = "DYNAMIC_TYPE_HINT_FULL_NAME";
json.nodeTypes[53].keys[5] = "LINE_NUMBER";
json.nodeTypes[53].keys[6] = "COLUMN_NUMBER";
json.nodeTypes[53].keys[7] = "DEPTH_FIRST_ORDER";
json.nodeTypes[53].keys[8] = "INTERNAL_FLAGS";
json.nodeTypes[53].name = "LITERAL";
json.nodeTypes[53].outEdges = [];
json.nodeTypes[53].outEdges[0] = {};
json.nodeTypes[53].outEdges[0].edgeName = "CDG";
json.nodeTypes[53].outEdges[0].inNodes = [];
json.nodeTypes[53].outEdges[0].inNodes[0] = {};
json.nodeTypes[53].outEdges[0].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[53].outEdges[0].inNodes[1] = {};
json.nodeTypes[53].outEdges[0].inNodes[1].name = "METHOD_REF";
json.nodeTypes[53].outEdges[0].inNodes[2] = {};
json.nodeTypes[53].outEdges[0].inNodes[2].name = "CALL";
json.nodeTypes[53].outEdges[0].inNodes[3] = {};
json.nodeTypes[53].outEdges[0].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[53].outEdges[0].inNodes[4] = {};
json.nodeTypes[53].outEdges[0].inNodes[4].name = "RETURN";
json.nodeTypes[53].outEdges[0].inNodes[5] = {};
json.nodeTypes[53].outEdges[0].inNodes[5].name = "LITERAL";
json.nodeTypes[53].outEdges[0].inNodes[6] = {};
json.nodeTypes[53].outEdges[0].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[53].outEdges[0].inNodes[7] = {};
json.nodeTypes[53].outEdges[0].inNodes[7].name = "UNKNOWN";
json.nodeTypes[53].outEdges[0].inNodes[8] = {};
json.nodeTypes[53].outEdges[0].inNodes[8].name = "BLOCK";
json.nodeTypes[53].outEdges[1] = {};
json.nodeTypes[53].outEdges[1].edgeName = "TAGGED_BY";
json.nodeTypes[53].outEdges[1].inNodes = [];
json.nodeTypes[53].outEdges[1].inNodes[0] = {};
json.nodeTypes[53].outEdges[1].inNodes[0].name = "TAG";
json.nodeTypes[53].outEdges[2] = {};
json.nodeTypes[53].outEdges[2].edgeName = "DYNAMIC_TYPE";
json.nodeTypes[53].outEdges[2].inNodes = [];
json.nodeTypes[53].outEdges[2].inNodes[0] = {};
json.nodeTypes[53].outEdges[2].inNodes[0].name = "METHOD";
json.nodeTypes[53].outEdges[2].inNodes[1] = {};
json.nodeTypes[53].outEdges[2].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[53].outEdges[3] = {};
json.nodeTypes[53].outEdges[3].edgeName = "CFG";
json.nodeTypes[53].outEdges[3].inNodes = [];
json.nodeTypes[53].outEdges[3].inNodes[0] = {};
json.nodeTypes[53].outEdges[3].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[53].outEdges[3].inNodes[1] = {};
json.nodeTypes[53].outEdges[3].inNodes[1].name = "METHOD_REF";
json.nodeTypes[53].outEdges[3].inNodes[2] = {};
json.nodeTypes[53].outEdges[3].inNodes[2].name = "CALL";
json.nodeTypes[53].outEdges[3].inNodes[3] = {};
json.nodeTypes[53].outEdges[3].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[53].outEdges[3].inNodes[4] = {};
json.nodeTypes[53].outEdges[3].inNodes[4].name = "RETURN";
json.nodeTypes[53].outEdges[3].inNodes[5] = {};
json.nodeTypes[53].outEdges[3].inNodes[5].name = "LITERAL";
json.nodeTypes[53].outEdges[3].inNodes[6] = {};
json.nodeTypes[53].outEdges[3].inNodes[6].name = "UNKNOWN";
json.nodeTypes[53].outEdges[3].inNodes[7] = {};
json.nodeTypes[53].outEdges[3].inNodes[7].name = "BLOCK";
json.nodeTypes[53].outEdges[4] = {};
json.nodeTypes[53].outEdges[4].edgeName = "POST_DOMINATE";
json.nodeTypes[53].outEdges[4].inNodes = [];
json.nodeTypes[53].outEdges[4].inNodes[0] = {};
json.nodeTypes[53].outEdges[4].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[53].outEdges[4].inNodes[1] = {};
json.nodeTypes[53].outEdges[4].inNodes[1].name = "METHOD_REF";
json.nodeTypes[53].outEdges[4].inNodes[2] = {};
json.nodeTypes[53].outEdges[4].inNodes[2].name = "CALL";
json.nodeTypes[53].outEdges[4].inNodes[3] = {};
json.nodeTypes[53].outEdges[4].inNodes[3].name = "METHOD";
json.nodeTypes[53].outEdges[4].inNodes[4] = {};
json.nodeTypes[53].outEdges[4].inNodes[4].name = "FIELD_IDENTIFIER";
json.nodeTypes[53].outEdges[4].inNodes[5] = {};
json.nodeTypes[53].outEdges[4].inNodes[5].name = "RETURN";
json.nodeTypes[53].outEdges[4].inNodes[6] = {};
json.nodeTypes[53].outEdges[4].inNodes[6].name = "LITERAL";
json.nodeTypes[53].outEdges[4].inNodes[7] = {};
json.nodeTypes[53].outEdges[4].inNodes[7].name = "UNKNOWN";
json.nodeTypes[53].outEdges[4].inNodes[8] = {};
json.nodeTypes[53].outEdges[4].inNodes[8].name = "BLOCK";
json.nodeTypes[53].outEdges[5] = {};
json.nodeTypes[53].outEdges[5].edgeName = "DOMINATE";
json.nodeTypes[53].outEdges[5].inNodes = [];
json.nodeTypes[53].outEdges[5].inNodes[0] = {};
json.nodeTypes[53].outEdges[5].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[53].outEdges[5].inNodes[1] = {};
json.nodeTypes[53].outEdges[5].inNodes[1].name = "METHOD_REF";
json.nodeTypes[53].outEdges[5].inNodes[2] = {};
json.nodeTypes[53].outEdges[5].inNodes[2].name = "CALL";
json.nodeTypes[53].outEdges[5].inNodes[3] = {};
json.nodeTypes[53].outEdges[5].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[53].outEdges[5].inNodes[4] = {};
json.nodeTypes[53].outEdges[5].inNodes[4].name = "RETURN";
json.nodeTypes[53].outEdges[5].inNodes[5] = {};
json.nodeTypes[53].outEdges[5].inNodes[5].name = "LITERAL";
json.nodeTypes[53].outEdges[5].inNodes[6] = {};
json.nodeTypes[53].outEdges[5].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[53].outEdges[5].inNodes[7] = {};
json.nodeTypes[53].outEdges[5].inNodes[7].name = "UNKNOWN";
json.nodeTypes[53].outEdges[5].inNodes[8] = {};
json.nodeTypes[53].outEdges[5].inNodes[8].name = "BLOCK";
json.nodeTypes[53].outEdges[6] = {};
json.nodeTypes[53].outEdges[6].edgeName = "CONTAINS_NODE";
json.nodeTypes[53].outEdges[6].inNodes = [];
json.nodeTypes[53].outEdges[6].inNodes[0] = {};
json.nodeTypes[53].outEdges[6].inNodes[0].name = "NODE";
json.nodeTypes[53].outEdges[7] = {};
json.nodeTypes[53].outEdges[7].edgeName = "EVAL_TYPE";
json.nodeTypes[53].outEdges[7].inNodes = [];
json.nodeTypes[53].outEdges[7].inNodes[0] = {};
json.nodeTypes[53].outEdges[7].inNodes[0].name = "TYPE";
json.nodeTypes[54] = {};
json.nodeTypes[54].comment = "";
json.nodeTypes[54].id = 215;
json.nodeTypes[54].keys = [];
json.nodeTypes[54].keys[0] = "PATH";
json.nodeTypes[54].name = "ROUTE";
json.nodeTypes[54].outEdges = [];
json.nodeTypes[54].outEdges[0] = {};
json.nodeTypes[54].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[54].outEdges[0].inNodes = [];
json.nodeTypes[54].outEdges[0].inNodes[0] = {};
json.nodeTypes[54].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[55] = {};
json.nodeTypes[55].comment = "A formal method return";
json.nodeTypes[55].id = 3;
json.nodeTypes[55].is = [];
json.nodeTypes[55].is[0] = "CFG_NODE";
json.nodeTypes[55].is[1] = "TRACKING_POINT";
json.nodeTypes[55].keys = [];
json.nodeTypes[55].keys[0] = "CODE";
json.nodeTypes[55].keys[1] = "EVALUATION_STRATEGY";
json.nodeTypes[55].keys[2] = "TYPE_FULL_NAME";
json.nodeTypes[55].keys[3] = "DYNAMIC_TYPE_HINT_FULL_NAME";
json.nodeTypes[55].keys[4] = "LINE_NUMBER";
json.nodeTypes[55].keys[5] = "COLUMN_NUMBER";
json.nodeTypes[55].keys[6] = "ORDER";
json.nodeTypes[55].keys[7] = "DEPTH_FIRST_ORDER";
json.nodeTypes[55].keys[8] = "INTERNAL_FLAGS";
json.nodeTypes[55].name = "METHOD_RETURN";
json.nodeTypes[55].outEdges = [];
json.nodeTypes[55].outEdges[0] = {};
json.nodeTypes[55].outEdges[0].edgeName = "TAGGED_BY";
json.nodeTypes[55].outEdges[0].inNodes = [];
json.nodeTypes[55].outEdges[0].inNodes[0] = {};
json.nodeTypes[55].outEdges[0].inNodes[0].name = "TAG";
json.nodeTypes[55].outEdges[1] = {};
json.nodeTypes[55].outEdges[1].edgeName = "DYNAMIC_TYPE";
json.nodeTypes[55].outEdges[1].inNodes = [];
json.nodeTypes[55].outEdges[1].inNodes[0] = {};
json.nodeTypes[55].outEdges[1].inNodes[0].cardinality = "n:0-1";
json.nodeTypes[55].outEdges[1].inNodes[0].name = "METHOD";
json.nodeTypes[55].outEdges[1].inNodes[1] = {};
json.nodeTypes[55].outEdges[1].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[55].outEdges[2] = {};
json.nodeTypes[55].outEdges[2].edgeName = "POST_DOMINATE";
json.nodeTypes[55].outEdges[2].inNodes = [];
json.nodeTypes[55].outEdges[2].inNodes[0] = {};
json.nodeTypes[55].outEdges[2].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[55].outEdges[2].inNodes[1] = {};
json.nodeTypes[55].outEdges[2].inNodes[1].name = "METHOD_REF";
json.nodeTypes[55].outEdges[2].inNodes[2] = {};
json.nodeTypes[55].outEdges[2].inNodes[2].name = "CALL";
json.nodeTypes[55].outEdges[2].inNodes[3] = {};
json.nodeTypes[55].outEdges[2].inNodes[3].name = "METHOD";
json.nodeTypes[55].outEdges[2].inNodes[4] = {};
json.nodeTypes[55].outEdges[2].inNodes[4].name = "FIELD_IDENTIFIER";
json.nodeTypes[55].outEdges[2].inNodes[5] = {};
json.nodeTypes[55].outEdges[2].inNodes[5].name = "RETURN";
json.nodeTypes[55].outEdges[2].inNodes[6] = {};
json.nodeTypes[55].outEdges[2].inNodes[6].name = "LITERAL";
json.nodeTypes[55].outEdges[2].inNodes[7] = {};
json.nodeTypes[55].outEdges[2].inNodes[7].name = "UNKNOWN";
json.nodeTypes[55].outEdges[2].inNodes[8] = {};
json.nodeTypes[55].outEdges[2].inNodes[8].name = "BLOCK";
json.nodeTypes[55].outEdges[3] = {};
json.nodeTypes[55].outEdges[3].edgeName = "CONTAINS_NODE";
json.nodeTypes[55].outEdges[3].inNodes = [];
json.nodeTypes[55].outEdges[3].inNodes[0] = {};
json.nodeTypes[55].outEdges[3].inNodes[0].name = "NODE";
json.nodeTypes[55].outEdges[4] = {};
json.nodeTypes[55].outEdges[4].edgeName = "EVAL_TYPE";
json.nodeTypes[55].outEdges[4].inNodes = [];
json.nodeTypes[55].outEdges[4].inNodes[0] = {};
json.nodeTypes[55].outEdges[4].inNodes[0].name = "TYPE";
json.nodeTypes[56] = {};
json.nodeTypes[56].comment = "This node represents a formal parameter going towards the caller side";
json.nodeTypes[56].id = 33;
json.nodeTypes[56].is = [];
json.nodeTypes[56].is[0] = "DECLARATION";
json.nodeTypes[56].is[1] = "TRACKING_POINT";
json.nodeTypes[56].is[2] = "AST_NODE";
json.nodeTypes[56].keys = [];
json.nodeTypes[56].keys[0] = "CODE";
json.nodeTypes[56].keys[1] = "ORDER";
json.nodeTypes[56].keys[2] = "NAME";
json.nodeTypes[56].keys[3] = "EVALUATION_STRATEGY";
json.nodeTypes[56].keys[4] = "TYPE_FULL_NAME";
json.nodeTypes[56].keys[5] = "LINE_NUMBER";
json.nodeTypes[56].keys[6] = "COLUMN_NUMBER";
json.nodeTypes[56].name = "METHOD_PARAMETER_OUT";
json.nodeTypes[56].outEdges = [];
json.nodeTypes[56].outEdges[0] = {};
json.nodeTypes[56].outEdges[0].edgeName = "EVAL_TYPE";
json.nodeTypes[56].outEdges[0].inNodes = [];
json.nodeTypes[56].outEdges[0].inNodes[0] = {};
json.nodeTypes[56].outEdges[0].inNodes[0].name = "TYPE";
json.nodeTypes[56].outEdges[1] = {};
json.nodeTypes[56].outEdges[1].edgeName = "TAGGED_BY";
json.nodeTypes[56].outEdges[1].inNodes = [];
json.nodeTypes[56].outEdges[1].inNodes[0] = {};
json.nodeTypes[56].outEdges[1].inNodes[0].name = "TAG";
json.nodeTypes[56].outEdges[2] = {};
json.nodeTypes[56].outEdges[2].edgeName = "CONTAINS_NODE";
json.nodeTypes[56].outEdges[2].inNodes = [];
json.nodeTypes[56].outEdges[2].inNodes[0] = {};
json.nodeTypes[56].outEdges[2].inNodes[0].name = "NODE";
json.nodeTypes[57] = {};
json.nodeTypes[57].comment = "";
json.nodeTypes[57].containedNodes = [];
json.nodeTypes[57].containedNodes[0] = {};
json.nodeTypes[57].containedNodes[0].cardinality = "list";
json.nodeTypes[57].containedNodes[0].localName = "methods";
json.nodeTypes[57].containedNodes[0].nodeType = "METHOD";
json.nodeTypes[57].containedNodes[1] = {};
json.nodeTypes[57].containedNodes[1].cardinality = "list";
json.nodeTypes[57].containedNodes[1].localName = "calls";
json.nodeTypes[57].containedNodes[1].nodeType = "CALL";
json.nodeTypes[57].id = 204;
json.nodeTypes[57].keys = [];
json.nodeTypes[57].name = "CALL_CHAIN";
json.nodeTypes[57].outEdges = [];
json.nodeTypes[57].outEdges[0] = {};
json.nodeTypes[57].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[57].outEdges[0].inNodes = [];
json.nodeTypes[57].outEdges[0].inNodes[0] = {};
json.nodeTypes[57].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[57].outEdges[0].inNodes[1] = {};
json.nodeTypes[57].outEdges[0].inNodes[1].name = "CALL";
json.nodeTypes[57].outEdges[0].inNodes[2] = {};
json.nodeTypes[57].outEdges[0].inNodes[2].name = "METHOD";
json.nodeTypes[58] = {};
json.nodeTypes[58].comment = "A type which always has to reference a type declaration and may have type argument children if the referred to type declaration is a template";
json.nodeTypes[58].id = 45;
json.nodeTypes[58].keys = [];
json.nodeTypes[58].keys[0] = "NAME";
json.nodeTypes[58].keys[1] = "FULL_NAME";
json.nodeTypes[58].keys[2] = "TYPE_DECL_FULL_NAME";
json.nodeTypes[58].name = "TYPE";
json.nodeTypes[58].outEdges = [];
json.nodeTypes[58].outEdges[0] = {};
json.nodeTypes[58].outEdges[0].edgeName = "REF";
json.nodeTypes[58].outEdges[0].inNodes = [];
json.nodeTypes[58].outEdges[0].inNodes[0] = {};
json.nodeTypes[58].outEdges[0].inNodes[0].name = "TYPE_DECL";
json.nodeTypes[58].outEdges[1] = {};
json.nodeTypes[58].outEdges[1].edgeName = "AST";
json.nodeTypes[58].outEdges[1].inNodes = [];
json.nodeTypes[58].outEdges[1].inNodes[0] = {};
json.nodeTypes[58].outEdges[1].inNodes[0].name = "TYPE_ARGUMENT";
json.nodeTypes[58].outEdges[2] = {};
json.nodeTypes[58].outEdges[2].edgeName = "CONTAINS_NODE";
json.nodeTypes[58].outEdges[2].inNodes = [];
json.nodeTypes[58].outEdges[2].inNodes[0] = {};
json.nodeTypes[58].outEdges[2].inNodes[0].name = "NODE";
json.nodeTypes[59] = {};
json.nodeTypes[59].comment = "Reference to a method instance";
json.nodeTypes[59].id = 333;
json.nodeTypes[59].is = [];
json.nodeTypes[59].is[0] = "EXPRESSION";
json.nodeTypes[59].keys = [];
json.nodeTypes[59].keys[0] = "CODE";
json.nodeTypes[59].keys[1] = "ORDER";
json.nodeTypes[59].keys[2] = "ARGUMENT_INDEX";
json.nodeTypes[59].keys[3] = "TYPE_FULL_NAME";
json.nodeTypes[59].keys[4] = "DYNAMIC_TYPE_HINT_FULL_NAME";
json.nodeTypes[59].keys[5] = "METHOD_INST_FULL_NAME";
json.nodeTypes[59].keys[6] = "METHOD_FULL_NAME";
json.nodeTypes[59].keys[7] = "LINE_NUMBER";
json.nodeTypes[59].keys[8] = "COLUMN_NUMBER";
json.nodeTypes[59].keys[9] = "DEPTH_FIRST_ORDER";
json.nodeTypes[59].keys[10] = "INTERNAL_FLAGS";
json.nodeTypes[59].name = "METHOD_REF";
json.nodeTypes[59].outEdges = [];
json.nodeTypes[59].outEdges[0] = {};
json.nodeTypes[59].outEdges[0].edgeName = "CAPTURE";
json.nodeTypes[59].outEdges[0].inNodes = [];
json.nodeTypes[59].outEdges[0].inNodes[0] = {};
json.nodeTypes[59].outEdges[0].inNodes[0].name = "CLOSURE_BINDING";
json.nodeTypes[59].outEdges[1] = {};
json.nodeTypes[59].outEdges[1].edgeName = "CDG";
json.nodeTypes[59].outEdges[1].inNodes = [];
json.nodeTypes[59].outEdges[1].inNodes[0] = {};
json.nodeTypes[59].outEdges[1].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[59].outEdges[1].inNodes[1] = {};
json.nodeTypes[59].outEdges[1].inNodes[1].name = "METHOD_REF";
json.nodeTypes[59].outEdges[1].inNodes[2] = {};
json.nodeTypes[59].outEdges[1].inNodes[2].name = "CALL";
json.nodeTypes[59].outEdges[1].inNodes[3] = {};
json.nodeTypes[59].outEdges[1].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[59].outEdges[1].inNodes[4] = {};
json.nodeTypes[59].outEdges[1].inNodes[4].name = "RETURN";
json.nodeTypes[59].outEdges[1].inNodes[5] = {};
json.nodeTypes[59].outEdges[1].inNodes[5].name = "LITERAL";
json.nodeTypes[59].outEdges[1].inNodes[6] = {};
json.nodeTypes[59].outEdges[1].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[59].outEdges[1].inNodes[7] = {};
json.nodeTypes[59].outEdges[1].inNodes[7].name = "UNKNOWN";
json.nodeTypes[59].outEdges[1].inNodes[8] = {};
json.nodeTypes[59].outEdges[1].inNodes[8].name = "BLOCK";
json.nodeTypes[59].outEdges[2] = {};
json.nodeTypes[59].outEdges[2].edgeName = "REF";
json.nodeTypes[59].outEdges[2].inNodes = [];
json.nodeTypes[59].outEdges[2].inNodes[0] = {};
json.nodeTypes[59].outEdges[2].inNodes[0].name = "METHOD";
json.nodeTypes[59].outEdges[3] = {};
json.nodeTypes[59].outEdges[3].edgeName = "DYNAMIC_TYPE";
json.nodeTypes[59].outEdges[3].inNodes = [];
json.nodeTypes[59].outEdges[3].inNodes[0] = {};
json.nodeTypes[59].outEdges[3].inNodes[0].name = "METHOD";
json.nodeTypes[59].outEdges[3].inNodes[1] = {};
json.nodeTypes[59].outEdges[3].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[59].outEdges[4] = {};
json.nodeTypes[59].outEdges[4].edgeName = "CFG";
json.nodeTypes[59].outEdges[4].inNodes = [];
json.nodeTypes[59].outEdges[4].inNodes[0] = {};
json.nodeTypes[59].outEdges[4].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[59].outEdges[4].inNodes[1] = {};
json.nodeTypes[59].outEdges[4].inNodes[1].name = "METHOD_REF";
json.nodeTypes[59].outEdges[4].inNodes[2] = {};
json.nodeTypes[59].outEdges[4].inNodes[2].name = "CALL";
json.nodeTypes[59].outEdges[4].inNodes[3] = {};
json.nodeTypes[59].outEdges[4].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[59].outEdges[4].inNodes[4] = {};
json.nodeTypes[59].outEdges[4].inNodes[4].name = "RETURN";
json.nodeTypes[59].outEdges[4].inNodes[5] = {};
json.nodeTypes[59].outEdges[4].inNodes[5].name = "LITERAL";
json.nodeTypes[59].outEdges[4].inNodes[6] = {};
json.nodeTypes[59].outEdges[4].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[59].outEdges[4].inNodes[7] = {};
json.nodeTypes[59].outEdges[4].inNodes[7].name = "UNKNOWN";
json.nodeTypes[59].outEdges[4].inNodes[8] = {};
json.nodeTypes[59].outEdges[4].inNodes[8].name = "BLOCK";
json.nodeTypes[59].outEdges[5] = {};
json.nodeTypes[59].outEdges[5].edgeName = "POST_DOMINATE";
json.nodeTypes[59].outEdges[5].inNodes = [];
json.nodeTypes[59].outEdges[5].inNodes[0] = {};
json.nodeTypes[59].outEdges[5].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[59].outEdges[5].inNodes[1] = {};
json.nodeTypes[59].outEdges[5].inNodes[1].name = "METHOD_REF";
json.nodeTypes[59].outEdges[5].inNodes[2] = {};
json.nodeTypes[59].outEdges[5].inNodes[2].name = "CALL";
json.nodeTypes[59].outEdges[5].inNodes[3] = {};
json.nodeTypes[59].outEdges[5].inNodes[3].name = "METHOD";
json.nodeTypes[59].outEdges[5].inNodes[4] = {};
json.nodeTypes[59].outEdges[5].inNodes[4].name = "FIELD_IDENTIFIER";
json.nodeTypes[59].outEdges[5].inNodes[5] = {};
json.nodeTypes[59].outEdges[5].inNodes[5].name = "RETURN";
json.nodeTypes[59].outEdges[5].inNodes[6] = {};
json.nodeTypes[59].outEdges[5].inNodes[6].name = "LITERAL";
json.nodeTypes[59].outEdges[5].inNodes[7] = {};
json.nodeTypes[59].outEdges[5].inNodes[7].name = "UNKNOWN";
json.nodeTypes[59].outEdges[5].inNodes[8] = {};
json.nodeTypes[59].outEdges[5].inNodes[8].name = "BLOCK";
json.nodeTypes[59].outEdges[6] = {};
json.nodeTypes[59].outEdges[6].edgeName = "DOMINATE";
json.nodeTypes[59].outEdges[6].inNodes = [];
json.nodeTypes[59].outEdges[6].inNodes[0] = {};
json.nodeTypes[59].outEdges[6].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[59].outEdges[6].inNodes[1] = {};
json.nodeTypes[59].outEdges[6].inNodes[1].name = "METHOD_REF";
json.nodeTypes[59].outEdges[6].inNodes[2] = {};
json.nodeTypes[59].outEdges[6].inNodes[2].name = "CALL";
json.nodeTypes[59].outEdges[6].inNodes[3] = {};
json.nodeTypes[59].outEdges[6].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[59].outEdges[6].inNodes[4] = {};
json.nodeTypes[59].outEdges[6].inNodes[4].name = "RETURN";
json.nodeTypes[59].outEdges[6].inNodes[5] = {};
json.nodeTypes[59].outEdges[6].inNodes[5].name = "LITERAL";
json.nodeTypes[59].outEdges[6].inNodes[6] = {};
json.nodeTypes[59].outEdges[6].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[59].outEdges[6].inNodes[7] = {};
json.nodeTypes[59].outEdges[6].inNodes[7].name = "UNKNOWN";
json.nodeTypes[59].outEdges[6].inNodes[8] = {};
json.nodeTypes[59].outEdges[6].inNodes[8].name = "BLOCK";
json.nodeTypes[59].outEdges[7] = {};
json.nodeTypes[59].outEdges[7].edgeName = "CONTAINS_NODE";
json.nodeTypes[59].outEdges[7].inNodes = [];
json.nodeTypes[59].outEdges[7].inNodes[0] = {};
json.nodeTypes[59].outEdges[7].inNodes[0].name = "NODE";
json.nodeTypes[59].outEdges[8] = {};
json.nodeTypes[59].outEdges[8].edgeName = "EVAL_TYPE";
json.nodeTypes[59].outEdges[8].inNodes = [];
json.nodeTypes[59].outEdges[8].inNodes[0] = {};
json.nodeTypes[59].outEdges[8].inNodes[0].name = "TYPE";
json.nodeTypes[60] = {};
json.nodeTypes[60].comment = "A type declaration";
json.nodeTypes[60].id = 46;
json.nodeTypes[60].is = [];
json.nodeTypes[60].is[0] = "AST_NODE";
json.nodeTypes[60].keys = [];
json.nodeTypes[60].keys[0] = "NAME";
json.nodeTypes[60].keys[1] = "FULL_NAME";
json.nodeTypes[60].keys[2] = "IS_EXTERNAL";
json.nodeTypes[60].keys[3] = "INHERITS_FROM_TYPE_FULL_NAME";
json.nodeTypes[60].keys[4] = "AST_PARENT_TYPE";
json.nodeTypes[60].keys[5] = "AST_PARENT_FULL_NAME";
json.nodeTypes[60].keys[6] = "ALIAS_TYPE_FULL_NAME";
json.nodeTypes[60].keys[7] = "ORDER";
json.nodeTypes[60].keys[8] = "FILENAME";
json.nodeTypes[60].name = "TYPE_DECL";
json.nodeTypes[60].outEdges = [];
json.nodeTypes[60].outEdges[0] = {};
json.nodeTypes[60].outEdges[0].edgeName = "VTABLE";
json.nodeTypes[60].outEdges[0].inNodes = [];
json.nodeTypes[60].outEdges[0].inNodes[0] = {};
json.nodeTypes[60].outEdges[0].inNodes[0].name = "METHOD";
json.nodeTypes[60].outEdges[1] = {};
json.nodeTypes[60].outEdges[1].edgeName = "SOURCE_FILE";
json.nodeTypes[60].outEdges[1].inNodes = [];
json.nodeTypes[60].outEdges[1].inNodes[0] = {};
json.nodeTypes[60].outEdges[1].inNodes[0].name = "FILE";
json.nodeTypes[60].outEdges[2] = {};
json.nodeTypes[60].outEdges[2].edgeName = "CONTAINS";
json.nodeTypes[60].outEdges[2].inNodes = [];
json.nodeTypes[60].outEdges[2].inNodes[0] = {};
json.nodeTypes[60].outEdges[2].inNodes[0].name = "METHOD";
json.nodeTypes[60].outEdges[3] = {};
json.nodeTypes[60].outEdges[3].edgeName = "BINDS";
json.nodeTypes[60].outEdges[3].inNodes = [];
json.nodeTypes[60].outEdges[3].inNodes[0] = {};
json.nodeTypes[60].outEdges[3].inNodes[0].name = "BINDING";
json.nodeTypes[60].outEdges[4] = {};
json.nodeTypes[60].outEdges[4].edgeName = "ALIAS_OF";
json.nodeTypes[60].outEdges[4].inNodes = [];
json.nodeTypes[60].outEdges[4].inNodes[0] = {};
json.nodeTypes[60].outEdges[4].inNodes[0].name = "TYPE";
json.nodeTypes[60].outEdges[5] = {};
json.nodeTypes[60].outEdges[5].edgeName = "INHERITS_FROM";
json.nodeTypes[60].outEdges[5].inNodes = [];
json.nodeTypes[60].outEdges[5].inNodes[0] = {};
json.nodeTypes[60].outEdges[5].inNodes[0].name = "TYPE";
json.nodeTypes[60].outEdges[6] = {};
json.nodeTypes[60].outEdges[6].edgeName = "AST";
json.nodeTypes[60].outEdges[6].inNodes = [];
json.nodeTypes[60].outEdges[6].inNodes[0] = {};
json.nodeTypes[60].outEdges[6].inNodes[0].name = "MEMBER";
json.nodeTypes[60].outEdges[6].inNodes[1] = {};
json.nodeTypes[60].outEdges[6].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[60].outEdges[6].inNodes[2] = {};
json.nodeTypes[60].outEdges[6].inNodes[2].name = "MODIFIER";
json.nodeTypes[60].outEdges[6].inNodes[3] = {};
json.nodeTypes[60].outEdges[6].inNodes[3].name = "ANNOTATION";
json.nodeTypes[60].outEdges[6].inNodes[4] = {};
json.nodeTypes[60].outEdges[6].inNodes[4].name = "METHOD";
json.nodeTypes[60].outEdges[6].inNodes[5] = {};
json.nodeTypes[60].outEdges[6].inNodes[5].name = "TYPE_PARAMETER";
json.nodeTypes[60].outEdges[7] = {};
json.nodeTypes[60].outEdges[7].edgeName = "CONTAINS_NODE";
json.nodeTypes[60].outEdges[7].inNodes = [];
json.nodeTypes[60].outEdges[7].inNodes[0] = {};
json.nodeTypes[60].outEdges[7].inNodes[0].name = "NODE";
json.nodeTypes[61] = {};
json.nodeTypes[61].comment = "";
json.nodeTypes[61].containedNodes = [];
json.nodeTypes[61].containedNodes[0] = {};
json.nodeTypes[61].containedNodes[0].cardinality = "one";
json.nodeTypes[61].containedNodes[0].localName = "node";
json.nodeTypes[61].containedNodes[0].nodeType = "TRACKING_POINT";
json.nodeTypes[61].containedNodes[1] = {};
json.nodeTypes[61].containedNodes[1].cardinality = "one";
json.nodeTypes[61].containedNodes[1].localName = "nodeType";
json.nodeTypes[61].containedNodes[1].nodeType = "TYPE";
json.nodeTypes[61].containedNodes[2] = {};
json.nodeTypes[61].containedNodes[2].cardinality = "one";
json.nodeTypes[61].containedNodes[2].localName = "method";
json.nodeTypes[61].containedNodes[2].nodeType = "METHOD";
json.nodeTypes[61].containedNodes[3] = {};
json.nodeTypes[61].containedNodes[3].cardinality = "list";
json.nodeTypes[61].containedNodes[3].localName = "methodTags";
json.nodeTypes[61].containedNodes[3].nodeType = "TAG";
json.nodeTypes[61].containedNodes[4] = {};
json.nodeTypes[61].containedNodes[4].cardinality = "zeroOrOne";
json.nodeTypes[61].containedNodes[4].localName = "callingMethod";
json.nodeTypes[61].containedNodes[4].nodeType = "METHOD";
json.nodeTypes[61].containedNodes[5] = {};
json.nodeTypes[61].containedNodes[5].cardinality = "zeroOrOne";
json.nodeTypes[61].containedNodes[5].localName = "callsite";
json.nodeTypes[61].containedNodes[5].nodeType = "CALL";
json.nodeTypes[61].containedNodes[6] = {};
json.nodeTypes[61].containedNodes[6].cardinality = "zeroOrOne";
json.nodeTypes[61].containedNodes[6].localName = "parameterIn";
json.nodeTypes[61].containedNodes[6].nodeType = "METHOD_PARAMETER_IN";
json.nodeTypes[61].containedNodes[7] = {};
json.nodeTypes[61].containedNodes[7].cardinality = "list";
json.nodeTypes[61].containedNodes[7].comment = "This field also holds tags for output parameters and return parameters";
json.nodeTypes[61].containedNodes[7].localName = "parameterInTags";
json.nodeTypes[61].containedNodes[7].nodeType = "TAG";
json.nodeTypes[61].id = 203;
json.nodeTypes[61].keys = [];
json.nodeTypes[61].keys[0] = "SINK_TYPE";
json.nodeTypes[61].name = "SINK";
json.nodeTypes[61].outEdges = [];
json.nodeTypes[61].outEdges[0] = {};
json.nodeTypes[61].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[61].outEdges[0].inNodes = [];
json.nodeTypes[61].outEdges[0].inNodes[0] = {};
json.nodeTypes[61].outEdges[0].inNodes[0].name = "TRACKING_POINT";
json.nodeTypes[61].outEdges[0].inNodes[1] = {};
json.nodeTypes[61].outEdges[0].inNodes[1].name = "METHOD_PARAMETER_IN";
json.nodeTypes[61].outEdges[0].inNodes[2] = {};
json.nodeTypes[61].outEdges[0].inNodes[2].name = "TAG";
json.nodeTypes[61].outEdges[0].inNodes[3] = {};
json.nodeTypes[61].outEdges[0].inNodes[3].name = "NODE";
json.nodeTypes[61].outEdges[0].inNodes[4] = {};
json.nodeTypes[61].outEdges[0].inNodes[4].name = "CALL";
json.nodeTypes[61].outEdges[0].inNodes[5] = {};
json.nodeTypes[61].outEdges[0].inNodes[5].name = "METHOD";
json.nodeTypes[61].outEdges[0].inNodes[6] = {};
json.nodeTypes[61].outEdges[0].inNodes[6].name = "TYPE";
json.nodeTypes[62] = {};
json.nodeTypes[62].comment = "";
json.nodeTypes[62].id = 200;
json.nodeTypes[62].keys = [];
json.nodeTypes[62].keys[0] = "ANNOTATION_NAME";
json.nodeTypes[62].keys[1] = "ANNOTATION_FULL_NAME";
json.nodeTypes[62].keys[2] = "NAME";
json.nodeTypes[62].keys[3] = "VALUE";
json.nodeTypes[62].name = "SP_ANNOTATION_PARAMETER";
json.nodeTypes[62].outEdges = [];
json.nodeTypes[62].outEdges[0] = {};
json.nodeTypes[62].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[62].outEdges[0].inNodes = [];
json.nodeTypes[62].outEdges[0].inNodes[0] = {};
json.nodeTypes[62].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[63] = {};
json.nodeTypes[63].comment = "";
json.nodeTypes[63].containedNodes = [];
json.nodeTypes[63].containedNodes[0] = {};
json.nodeTypes[63].containedNodes[0].cardinality = "list";
json.nodeTypes[63].containedNodes[0].localName = "evidence";
json.nodeTypes[63].containedNodes[0].nodeType = "NODE";
json.nodeTypes[63].containedNodes[1] = {};
json.nodeTypes[63].containedNodes[1].cardinality = "list";
json.nodeTypes[63].containedNodes[1].localName = "keyValuePairs";
json.nodeTypes[63].containedNodes[1].nodeType = "KEY_VALUE_PAIR";
json.nodeTypes[63].id = 214;
json.nodeTypes[63].keys = [];
json.nodeTypes[63].name = "FINDING";
json.nodeTypes[63].outEdges = [];
json.nodeTypes[63].outEdges[0] = {};
json.nodeTypes[63].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[63].outEdges[0].inNodes = [];
json.nodeTypes[63].outEdges[0].inNodes[0] = {};
json.nodeTypes[63].outEdges[0].inNodes[0].name = "KEY_VALUE_PAIR";
json.nodeTypes[63].outEdges[0].inNodes[1] = {};
json.nodeTypes[63].outEdges[0].inNodes[1].name = "NODE";
json.nodeTypes[64] = {};
json.nodeTypes[64].comment = "A (method)-call";
json.nodeTypes[64].id = 15;
json.nodeTypes[64].is = [];
json.nodeTypes[64].is[0] = "EXPRESSION";
json.nodeTypes[64].is[1] = "CALL_REPR";
json.nodeTypes[64].keys = [];
json.nodeTypes[64].keys[0] = "CODE";
json.nodeTypes[64].keys[1] = "NAME";
json.nodeTypes[64].keys[2] = "ORDER";
json.nodeTypes[64].keys[3] = "METHOD_INST_FULL_NAME";
json.nodeTypes[64].keys[4] = "METHOD_FULL_NAME";
json.nodeTypes[64].keys[5] = "ARGUMENT_INDEX";
json.nodeTypes[64].keys[6] = "DISPATCH_TYPE";
json.nodeTypes[64].keys[7] = "SIGNATURE";
json.nodeTypes[64].keys[8] = "TYPE_FULL_NAME";
json.nodeTypes[64].keys[9] = "DYNAMIC_TYPE_HINT_FULL_NAME";
json.nodeTypes[64].keys[10] = "LINE_NUMBER";
json.nodeTypes[64].keys[11] = "COLUMN_NUMBER";
json.nodeTypes[64].keys[12] = "RESOLVED";
json.nodeTypes[64].keys[13] = "DEPTH_FIRST_ORDER";
json.nodeTypes[64].keys[14] = "INTERNAL_FLAGS";
json.nodeTypes[64].name = "CALL";
json.nodeTypes[64].outEdges = [];
json.nodeTypes[64].outEdges[0] = {};
json.nodeTypes[64].outEdges[0].edgeName = "RECEIVER";
json.nodeTypes[64].outEdges[0].inNodes = [];
json.nodeTypes[64].outEdges[0].inNodes[0] = {};
json.nodeTypes[64].outEdges[0].inNodes[0].cardinality = "0-1:0-1";
json.nodeTypes[64].outEdges[0].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[64].outEdges[0].inNodes[1] = {};
json.nodeTypes[64].outEdges[0].inNodes[1].cardinality = "0-1:0-1";
json.nodeTypes[64].outEdges[0].inNodes[1].name = "METHOD_REF";
json.nodeTypes[64].outEdges[0].inNodes[2] = {};
json.nodeTypes[64].outEdges[0].inNodes[2].cardinality = "0-1:0-1";
json.nodeTypes[64].outEdges[0].inNodes[2].name = "CALL";
json.nodeTypes[64].outEdges[0].inNodes[3] = {};
json.nodeTypes[64].outEdges[0].inNodes[3].cardinality = "0-1:0-1";
json.nodeTypes[64].outEdges[0].inNodes[3].name = "LITERAL";
json.nodeTypes[64].outEdges[0].inNodes[4] = {};
json.nodeTypes[64].outEdges[0].inNodes[4].name = "UNKNOWN";
json.nodeTypes[64].outEdges[0].inNodes[5] = {};
json.nodeTypes[64].outEdges[0].inNodes[5].cardinality = "0-1:0-1";
json.nodeTypes[64].outEdges[0].inNodes[5].name = "BLOCK";
json.nodeTypes[64].outEdges[1] = {};
json.nodeTypes[64].outEdges[1].edgeName = "CDG";
json.nodeTypes[64].outEdges[1].inNodes = [];
json.nodeTypes[64].outEdges[1].inNodes[0] = {};
json.nodeTypes[64].outEdges[1].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[64].outEdges[1].inNodes[1] = {};
json.nodeTypes[64].outEdges[1].inNodes[1].name = "METHOD_REF";
json.nodeTypes[64].outEdges[1].inNodes[2] = {};
json.nodeTypes[64].outEdges[1].inNodes[2].name = "CALL";
json.nodeTypes[64].outEdges[1].inNodes[3] = {};
json.nodeTypes[64].outEdges[1].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[64].outEdges[1].inNodes[4] = {};
json.nodeTypes[64].outEdges[1].inNodes[4].name = "RETURN";
json.nodeTypes[64].outEdges[1].inNodes[5] = {};
json.nodeTypes[64].outEdges[1].inNodes[5].name = "LITERAL";
json.nodeTypes[64].outEdges[1].inNodes[6] = {};
json.nodeTypes[64].outEdges[1].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[64].outEdges[1].inNodes[7] = {};
json.nodeTypes[64].outEdges[1].inNodes[7].name = "UNKNOWN";
json.nodeTypes[64].outEdges[1].inNodes[8] = {};
json.nodeTypes[64].outEdges[1].inNodes[8].name = "BLOCK";
json.nodeTypes[64].outEdges[2] = {};
json.nodeTypes[64].outEdges[2].edgeName = "ARGUMENT";
json.nodeTypes[64].outEdges[2].inNodes = [];
json.nodeTypes[64].outEdges[2].inNodes[0] = {};
json.nodeTypes[64].outEdges[2].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[64].outEdges[2].inNodes[1] = {};
json.nodeTypes[64].outEdges[2].inNodes[1].name = "METHOD_REF";
json.nodeTypes[64].outEdges[2].inNodes[2] = {};
json.nodeTypes[64].outEdges[2].inNodes[2].name = "CALL";
json.nodeTypes[64].outEdges[2].inNodes[3] = {};
json.nodeTypes[64].outEdges[2].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[64].outEdges[2].inNodes[4] = {};
json.nodeTypes[64].outEdges[2].inNodes[4].name = "LITERAL";
json.nodeTypes[64].outEdges[2].inNodes[5] = {};
json.nodeTypes[64].outEdges[2].inNodes[5].name = "UNKNOWN";
json.nodeTypes[64].outEdges[2].inNodes[6] = {};
json.nodeTypes[64].outEdges[2].inNodes[6].name = "BLOCK";
json.nodeTypes[64].outEdges[3] = {};
json.nodeTypes[64].outEdges[3].edgeName = "REF";
json.nodeTypes[64].outEdges[3].inNodes = [];
json.nodeTypes[64].outEdges[3].inNodes[0] = {};
json.nodeTypes[64].outEdges[3].inNodes[0].name = "MEMBER";
json.nodeTypes[64].outEdges[4] = {};
json.nodeTypes[64].outEdges[4].edgeName = "TAGGED_BY";
json.nodeTypes[64].outEdges[4].inNodes = [];
json.nodeTypes[64].outEdges[4].inNodes[0] = {};
json.nodeTypes[64].outEdges[4].inNodes[0].name = "TAG";
json.nodeTypes[64].outEdges[5] = {};
json.nodeTypes[64].outEdges[5].edgeName = "REACHING_DEF";
json.nodeTypes[64].outEdges[5].inNodes = [];
json.nodeTypes[64].outEdges[5].inNodes[0] = {};
json.nodeTypes[64].outEdges[5].inNodes[0].name = "CALL";
json.nodeTypes[64].outEdges[5].inNodes[1] = {};
json.nodeTypes[64].outEdges[5].inNodes[1].name = "RETURN";
json.nodeTypes[64].outEdges[6] = {};
json.nodeTypes[64].outEdges[6].edgeName = "CALL";
json.nodeTypes[64].outEdges[6].inNodes = [];
json.nodeTypes[64].outEdges[6].inNodes[0] = {};
json.nodeTypes[64].outEdges[6].inNodes[0].name = "METHOD";
json.nodeTypes[64].outEdges[7] = {};
json.nodeTypes[64].outEdges[7].edgeName = "DYNAMIC_TYPE";
json.nodeTypes[64].outEdges[7].inNodes = [];
json.nodeTypes[64].outEdges[7].inNodes[0] = {};
json.nodeTypes[64].outEdges[7].inNodes[0].name = "METHOD";
json.nodeTypes[64].outEdges[7].inNodes[1] = {};
json.nodeTypes[64].outEdges[7].inNodes[1].name = "TYPE_DECL";
json.nodeTypes[64].outEdges[8] = {};
json.nodeTypes[64].outEdges[8].edgeName = "CFG";
json.nodeTypes[64].outEdges[8].inNodes = [];
json.nodeTypes[64].outEdges[8].inNodes[0] = {};
json.nodeTypes[64].outEdges[8].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[64].outEdges[8].inNodes[1] = {};
json.nodeTypes[64].outEdges[8].inNodes[1].name = "METHOD_REF";
json.nodeTypes[64].outEdges[8].inNodes[2] = {};
json.nodeTypes[64].outEdges[8].inNodes[2].name = "CALL";
json.nodeTypes[64].outEdges[8].inNodes[3] = {};
json.nodeTypes[64].outEdges[8].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[64].outEdges[8].inNodes[4] = {};
json.nodeTypes[64].outEdges[8].inNodes[4].name = "RETURN";
json.nodeTypes[64].outEdges[8].inNodes[5] = {};
json.nodeTypes[64].outEdges[8].inNodes[5].name = "LITERAL";
json.nodeTypes[64].outEdges[8].inNodes[6] = {};
json.nodeTypes[64].outEdges[8].inNodes[6].name = "UNKNOWN";
json.nodeTypes[64].outEdges[8].inNodes[7] = {};
json.nodeTypes[64].outEdges[8].inNodes[7].name = "BLOCK";
json.nodeTypes[64].outEdges[9] = {};
json.nodeTypes[64].outEdges[9].edgeName = "POST_DOMINATE";
json.nodeTypes[64].outEdges[9].inNodes = [];
json.nodeTypes[64].outEdges[9].inNodes[0] = {};
json.nodeTypes[64].outEdges[9].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[64].outEdges[9].inNodes[1] = {};
json.nodeTypes[64].outEdges[9].inNodes[1].name = "METHOD_REF";
json.nodeTypes[64].outEdges[9].inNodes[2] = {};
json.nodeTypes[64].outEdges[9].inNodes[2].name = "CALL";
json.nodeTypes[64].outEdges[9].inNodes[3] = {};
json.nodeTypes[64].outEdges[9].inNodes[3].name = "METHOD";
json.nodeTypes[64].outEdges[9].inNodes[4] = {};
json.nodeTypes[64].outEdges[9].inNodes[4].name = "FIELD_IDENTIFIER";
json.nodeTypes[64].outEdges[9].inNodes[5] = {};
json.nodeTypes[64].outEdges[9].inNodes[5].name = "RETURN";
json.nodeTypes[64].outEdges[9].inNodes[6] = {};
json.nodeTypes[64].outEdges[9].inNodes[6].name = "LITERAL";
json.nodeTypes[64].outEdges[9].inNodes[7] = {};
json.nodeTypes[64].outEdges[9].inNodes[7].name = "UNKNOWN";
json.nodeTypes[64].outEdges[9].inNodes[8] = {};
json.nodeTypes[64].outEdges[9].inNodes[8].name = "BLOCK";
json.nodeTypes[64].outEdges[10] = {};
json.nodeTypes[64].outEdges[10].edgeName = "AST";
json.nodeTypes[64].outEdges[10].inNodes = [];
json.nodeTypes[64].outEdges[10].inNodes[0] = {};
json.nodeTypes[64].outEdges[10].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[64].outEdges[10].inNodes[1] = {};
json.nodeTypes[64].outEdges[10].inNodes[1].name = "METHOD_REF";
json.nodeTypes[64].outEdges[10].inNodes[2] = {};
json.nodeTypes[64].outEdges[10].inNodes[2].name = "CALL";
json.nodeTypes[64].outEdges[10].inNodes[3] = {};
json.nodeTypes[64].outEdges[10].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[64].outEdges[10].inNodes[4] = {};
json.nodeTypes[64].outEdges[10].inNodes[4].name = "RETURN";
json.nodeTypes[64].outEdges[10].inNodes[5] = {};
json.nodeTypes[64].outEdges[10].inNodes[5].name = "LITERAL";
json.nodeTypes[64].outEdges[10].inNodes[6] = {};
json.nodeTypes[64].outEdges[10].inNodes[6].name = "CONTROL_STRUCTURE";
json.nodeTypes[64].outEdges[10].inNodes[7] = {};
json.nodeTypes[64].outEdges[10].inNodes[7].name = "BLOCK";
json.nodeTypes[64].outEdges[11] = {};
json.nodeTypes[64].outEdges[11].edgeName = "DOMINATE";
json.nodeTypes[64].outEdges[11].inNodes = [];
json.nodeTypes[64].outEdges[11].inNodes[0] = {};
json.nodeTypes[64].outEdges[11].inNodes[0].name = "IDENTIFIER";
json.nodeTypes[64].outEdges[11].inNodes[1] = {};
json.nodeTypes[64].outEdges[11].inNodes[1].name = "METHOD_REF";
json.nodeTypes[64].outEdges[11].inNodes[2] = {};
json.nodeTypes[64].outEdges[11].inNodes[2].name = "CALL";
json.nodeTypes[64].outEdges[11].inNodes[3] = {};
json.nodeTypes[64].outEdges[11].inNodes[3].name = "FIELD_IDENTIFIER";
json.nodeTypes[64].outEdges[11].inNodes[4] = {};
json.nodeTypes[64].outEdges[11].inNodes[4].name = "RETURN";
json.nodeTypes[64].outEdges[11].inNodes[5] = {};
json.nodeTypes[64].outEdges[11].inNodes[5].name = "LITERAL";
json.nodeTypes[64].outEdges[11].inNodes[6] = {};
json.nodeTypes[64].outEdges[11].inNodes[6].name = "METHOD_RETURN";
json.nodeTypes[64].outEdges[11].inNodes[7] = {};
json.nodeTypes[64].outEdges[11].inNodes[7].name = "UNKNOWN";
json.nodeTypes[64].outEdges[11].inNodes[8] = {};
json.nodeTypes[64].outEdges[11].inNodes[8].name = "BLOCK";
json.nodeTypes[64].outEdges[12] = {};
json.nodeTypes[64].outEdges[12].edgeName = "CONTAINS_NODE";
json.nodeTypes[64].outEdges[12].inNodes = [];
json.nodeTypes[64].outEdges[12].inNodes[0] = {};
json.nodeTypes[64].outEdges[12].inNodes[0].name = "NODE";
json.nodeTypes[64].outEdges[13] = {};
json.nodeTypes[64].outEdges[13].edgeName = "EVAL_TYPE";
json.nodeTypes[64].outEdges[13].inNodes = [];
json.nodeTypes[64].outEdges[13].inNodes[0] = {};
json.nodeTypes[64].outEdges[13].inNodes[0].name = "TYPE";
json.nodeTypes[65] = {};
json.nodeTypes[65].comment = "Type parameter of TYPE_DECL or METHOD";
json.nodeTypes[65].id = 47;
json.nodeTypes[65].is = [];
json.nodeTypes[65].is[0] = "AST_NODE";
json.nodeTypes[65].keys = [];
json.nodeTypes[65].keys[0] = "NAME";
json.nodeTypes[65].keys[1] = "ORDER";
json.nodeTypes[65].name = "TYPE_PARAMETER";
json.nodeTypes[65].outEdges = [];
json.nodeTypes[65].outEdges[0] = {};
json.nodeTypes[65].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[65].outEdges[0].inNodes = [];
json.nodeTypes[65].outEdges[0].inNodes[0] = {};
json.nodeTypes[65].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[66] = {};
json.nodeTypes[66].comment = "Multiple tags";
json.nodeTypes[66].containedNodes = [];
json.nodeTypes[66].containedNodes[0] = {};
json.nodeTypes[66].containedNodes[0].cardinality = "list";
json.nodeTypes[66].containedNodes[0].localName = "tags";
json.nodeTypes[66].containedNodes[0].nodeType = "TAG";
json.nodeTypes[66].id = 301;
json.nodeTypes[66].keys = [];
json.nodeTypes[66].name = "TAGS";
json.nodeTypes[66].outEdges = [];
json.nodeTypes[66].outEdges[0] = {};
json.nodeTypes[66].outEdges[0].edgeName = "CONTAINS_NODE";
json.nodeTypes[66].outEdges[0].inNodes = [];
json.nodeTypes[66].outEdges[0].inNodes[0] = {};
json.nodeTypes[66].outEdges[0].inNodes[0].name = "NODE";
json.nodeTypes[66].outEdges[0].inNodes[1] = {};
json.nodeTypes[66].outEdges[0].inNodes[1].name = "TAG";
json.nodeTypes[67] = {};
json.nodeTypes[67].comment = "Assignment of annotation argument to annotation parameter";
json.nodeTypes[67].id = 6;
json.nodeTypes[67].is = [];
json.nodeTypes[67].is[0] = "AST_NODE";
json.nodeTypes[67].keys = [];
json.nodeTypes[67].keys[0] = "CODE";
json.nodeTypes[67].keys[1] = "ORDER";
json.nodeTypes[67].name = "ANNOTATION_PARAMETER_ASSIGN";
json.nodeTypes[67].outEdges = [];
json.nodeTypes[67].outEdges[0] = {};
json.nodeTypes[67].outEdges[0].edgeName = "AST";
json.nodeTypes[67].outEdges[0].inNodes = [];
json.nodeTypes[67].outEdges[0].inNodes[0] = {};
json.nodeTypes[67].outEdges[0].inNodes[0].name = "ANNOTATION_PARAMETER";
json.nodeTypes[67].outEdges[0].inNodes[1] = {};
json.nodeTypes[67].outEdges[0].inNodes[1].name = "ANNOTATION_LITERAL";
json.nodeTypes[67].outEdges[0].inNodes[2] = {};
json.nodeTypes[67].outEdges[0].inNodes[2].name = "ARRAY_INITIALIZER";
json.nodeTypes[67].outEdges[0].inNodes[3] = {};
json.nodeTypes[67].outEdges[0].inNodes[3].name = "ANNOTATION";
json.nodeTypes[67].outEdges[1] = {};
json.nodeTypes[67].outEdges[1].edgeName = "CONTAINS_NODE";
json.nodeTypes[67].outEdges[1].inNodes = [];
json.nodeTypes[67].outEdges[1].inNodes[0] = {};
json.nodeTypes[67].outEdges[1].inNodes[0].name = "NODE";
json.nodeTypes[68] = {};
json.nodeTypes[68].comment = "A binding of a METHOD into a TYPE_DECL";
json.nodeTypes[68].id = 146;
json.nodeTypes[68].keys = [];
json.nodeTypes[68].keys[0] = "NAME";
json.nodeTypes[68].keys[1] = "SIGNATURE";
json.nodeTypes[68].keys[2] = "IS_METHOD_NEVER_OVERRIDDEN";
json.nodeTypes[68].name = "BINDING";
json.nodeTypes[68].outEdges = [];
json.nodeTypes[68].outEdges[0] = {};
json.nodeTypes[68].outEdges[0].edgeName = "REF";
json.nodeTypes[68].outEdges[0].inNodes = [];
json.nodeTypes[68].outEdges[0].inNodes[0] = {};
json.nodeTypes[68].outEdges[0].inNodes[0].cardinality = "n:1";
json.nodeTypes[68].outEdges[0].inNodes[0].name = "METHOD";
json.nodeTypes[68].outEdges[1] = {};
json.nodeTypes[68].outEdges[1].edgeName = "CONTAINS_NODE";
json.nodeTypes[68].outEdges[1].inNodes = [];
json.nodeTypes[68].outEdges[1].inNodes[0] = {};
json.nodeTypes[68].outEdges[1].inNodes[0].name = "NODE";
json.operatorNames = [];
json.operatorNames[0] = {};
json.operatorNames[0].comment = "Accesses (loads/stores) to a field/member through a pointer to a struct/class. Typically, C/C++ arrow-operator. The field selection works the same way as for fieldAccess. For the sake of data-flow tracking, this is the same as first dereferencing the pointer and then accessing the field. Handling of this operator is special-cased in the back-end";
json.operatorNames[0].name = "<operator>.indirectFieldAccess";
json.operatorNames[0].operator = "indirectFieldAccess";
json.operatorNames[1] = {};
json.operatorNames[1].name = "<operator>.addition";
json.operatorNames[1].operator = "addition";
json.operatorNames[2] = {};
json.operatorNames[2].name = "<operators>.assignmentAnd";
json.operatorNames[2].operator = "assignmentAnd";
json.operatorNames[3] = {};
json.operatorNames[3].name = "<operator>.division";
json.operatorNames[3].operator = "division";
json.operatorNames[4] = {};
json.operatorNames[4].comment = "Derives a pointer to a field of a struct from a pointer to the entire struct. This corresponds to the C idiom &(ptr->field), which does not access memory. The field selection works the same way as for fieldAccess. This operator is currently only used directly by the LLVM language. Handling of this operator is special-cased in the back-end";
json.operatorNames[4].name = "<operator>.getElementPtr";
json.operatorNames[4].operator = "getElementPtr";
json.operatorNames[5] = {};
json.operatorNames[5].name = "<operator>.assignmentDivision";
json.operatorNames[5].operator = "assignmentDivision";
json.operatorNames[6] = {};
json.operatorNames[6].name = "<operator>.assignmentPlus";
json.operatorNames[6].operator = "assignmentPlus";
json.operatorNames[7] = {};
json.operatorNames[7].name = "<operators>.assignmentExponentiation";
json.operatorNames[7].operator = "assignmentExponentiation";
json.operatorNames[8] = {};
json.operatorNames[8].comment = "Accesses an element of an Array through a pointer. The index selection works similar as for fieldAccess: However, the index must be an integer. If the second argument is a FIELD_ACCESS resp. LITERAL then its CANONICAL_NAME resp. CODE field is parsed as an integer; on parsing failure, the access is considered unpredictable and we overtaint. This is equivalent to a pointerShift followed by an indirection. This operator is currently only used by C-style languages. This behavior allows the backend to infer that ptr[0] and *ptr refer to the same object. Handling of this operator is special-cased in the back-end";
json.operatorNames[8].name = "<operator>.indirectIndexAccess";
json.operatorNames[8].operator = "indirectIndexAccess";
json.operatorNames[9] = {};
json.operatorNames[9].comment = "Shifts a pointer. In terms of CPG, the first argument is the pointer and the second argument is the index. The index selection works the same way as for indirectIndexAccess. This operator is currently only used directly by the LLVM language, but it is also used internally for C. For example, pointerShift(ptr, 7) is equivalent to &(ptr[7]). Handling of this operator is special-cased in the back-end";
json.operatorNames[9].name = "<operator>.pointerShift";
json.operatorNames[9].operator = "pointerShift";
json.operatorNames[10] = {};
json.operatorNames[10].name = "<operator>.xor";
json.operatorNames[10].operator = "xor";
json.operatorNames[11] = {};
json.operatorNames[11].name = "<operator>.preDecrement";
json.operatorNames[11].operator = "preDecrement";
json.operatorNames[12] = {};
json.operatorNames[12].comment = "Deprecated. Formerly in C++: `a->*b` and a[b] in Java";
json.operatorNames[12].name = "<operator>.indirectComputedMemberAccess";
json.operatorNames[12].operator = "indirectComputedMemberAccess";
json.operatorNames[13] = {};
json.operatorNames[13].name = "<operators>.assignmentModulo";
json.operatorNames[13].operator = "assignmentModulo";
json.operatorNames[14] = {};
json.operatorNames[14].comment = "E.g. `a ? consequent : alternate`. In future probably also used for if statements";
json.operatorNames[14].name = "<operator>.conditional";
json.operatorNames[14].operator = "conditional";
json.operatorNames[15] = {};
json.operatorNames[15].comment = "Deprecated. Formerly in C: `a.b` but not! in Java";
json.operatorNames[15].name = "<operator>.memberAccess";
json.operatorNames[15].operator = "memberAccess";
json.operatorNames[16] = {};
json.operatorNames[16].name = "<operator>.multiplication";
json.operatorNames[16].operator = "multiplication";
json.operatorNames[17] = {};
json.operatorNames[17].name = "<operators>.assignmentShiftLeft";
json.operatorNames[17].operator = "assignmentShiftLeft";
json.operatorNames[18] = {};
json.operatorNames[18].name = "<operators>.assignmentLogicalShiftRight";
json.operatorNames[18].operator = "assignmentLogicalShiftRight";
json.operatorNames[19] = {};
json.operatorNames[19].name = "<operators>.assignmentXor";
json.operatorNames[19].operator = "assignmentXor";
json.operatorNames[20] = {};
json.operatorNames[20].name = "<operator>.logicalAnd";
json.operatorNames[20].operator = "logicalAnd";
json.operatorNames[21] = {};
json.operatorNames[21].comment = "Deprecated. Formerly in C: `a->b` and `a.b` in Java";
json.operatorNames[21].name = "<operator>.indirectMemberAccess";
json.operatorNames[21].operator = "indirectMemberAccess";
json.operatorNames[22] = {};
json.operatorNames[22].comment = "Deletes a property from a namespace. E.g. `a=3; delete a; a == undefined;";
json.operatorNames[22].name = "<operator>.delete";
json.operatorNames[22].operator = "delete";
json.operatorNames[23] = {};
json.operatorNames[23].name = "<operator>.postIncrement";
json.operatorNames[23].operator = "postIncrement";
json.operatorNames[24] = {};
json.operatorNames[24].comment = "Accesses a container (e.g. array or associative array / dict / map) at an index. The index selection works the same way as for fieldAccess. Handling of this operator is special-cased in the back-end";
json.operatorNames[24].name = "<operator>.indexAccess";
json.operatorNames[24].operator = "indexAccess";
json.operatorNames[25] = {};
json.operatorNames[25].comment = "E.g. `a = +b`";
json.operatorNames[25].name = "<operator>.plus";
json.operatorNames[25].operator = "plus";
json.operatorNames[26] = {};
json.operatorNames[26].name = "<operator>.lessEqualsThan";
json.operatorNames[26].operator = "lessEqualsThan";
json.operatorNames[27] = {};
json.operatorNames[27].comment = "Deprecated. Formerly in C: `a[b]` but not! in Java";
json.operatorNames[27].name = "<operator>.computedMemberAccess";
json.operatorNames[27].operator = "computedMemberAccess";
json.operatorNames[28] = {};
json.operatorNames[28].name = "<operator>.logicalNot";
json.operatorNames[28].operator = "logicalNot";
json.operatorNames[29] = {};
json.operatorNames[29].name = "<operators>.assignmentArithmeticShiftRight";
json.operatorNames[29].operator = "assignmentArithmeticShiftRight";
json.operatorNames[30] = {};
json.operatorNames[30].name = "<operator>.logicalOr";
json.operatorNames[30].operator = "logicalOr";
json.operatorNames[31] = {};
json.operatorNames[31].comment = "Shift right preserving the sign";
json.operatorNames[31].name = "<operator>.arithmeticShiftRight";
json.operatorNames[31].operator = "arithmeticShiftRight";
json.operatorNames[32] = {};
json.operatorNames[32].name = "<operator>.lessThan";
json.operatorNames[32].operator = "lessThan";
json.operatorNames[33] = {};
json.operatorNames[33].name = "<operators>.assignmentOr";
json.operatorNames[33].operator = "assignmentOr";
json.operatorNames[34] = {};
json.operatorNames[34].name = "<operator>.postDecrement";
json.operatorNames[34].operator = "postDecrement";
json.operatorNames[35] = {};
json.operatorNames[35].name = "<operator>.assignment";
json.operatorNames[35].operator = "assignment";
json.operatorNames[36] = {};
json.operatorNames[36].name = "<operator>.not";
json.operatorNames[36].operator = "not";
json.operatorNames[37] = {};
json.operatorNames[37].name = "<operator>.assignmentMinus";
json.operatorNames[37].operator = "assignmentMinus";
json.operatorNames[38] = {};
json.operatorNames[38].name = "<operator>.shiftLeft";
json.operatorNames[38].operator = "shiftLeft";
json.operatorNames[39] = {};
json.operatorNames[39].comment = "Type casts of any sort";
json.operatorNames[39].name = "<operator>.cast";
json.operatorNames[39].operator = "cast";
json.operatorNames[40] = {};
json.operatorNames[40].name = "<operator>.subtraction";
json.operatorNames[40].operator = "subtraction";
json.operatorNames[41] = {};
json.operatorNames[41].name = "<operator>.preIncrement";
json.operatorNames[41].operator = "preIncrement";
json.operatorNames[42] = {};
json.operatorNames[42].name = "<operator>.modulo";
json.operatorNames[42].operator = "modulo";
json.operatorNames[43] = {};
json.operatorNames[43].comment = "E.g. `a = -b`";
json.operatorNames[43].name = "<operator>.minus";
json.operatorNames[43].operator = "minus";
json.operatorNames[44] = {};
json.operatorNames[44].comment = "Accesses through a pointer (load/store), i.e. dereferences it. Typically the star-operator in C/C++. Pairs of addressOf and indirection operators cancel each other. Handling of this operator is special-cased in the back-end";
json.operatorNames[44].name = "<operator>.indirection";
json.operatorNames[44].operator = "indirection";
json.operatorNames[45] = {};
json.operatorNames[45].name = "<operator>.exponentiation";
json.operatorNames[45].operator = "exponentiation";
json.operatorNames[46] = {};
json.operatorNames[46].name = "<operator>.assignmentMultiplication";
json.operatorNames[46].operator = "assignmentMultiplication";
json.operatorNames[47] = {};
json.operatorNames[47].comment = "Shift right padding with zeros";
json.operatorNames[47].name = "<operator>.logicalShiftRight";
json.operatorNames[47].operator = "logicalShiftRight";
json.operatorNames[48] = {};
json.operatorNames[48].name = "<operator>.or";
json.operatorNames[48].operator = "or";
json.operatorNames[49] = {};
json.operatorNames[49].name = "<operator>.greaterThan";
json.operatorNames[49].operator = "greaterThan";
json.operatorNames[50] = {};
json.operatorNames[50].comment = "Returns the size of a given object";
json.operatorNames[50].name = "<operator>.sizeOf";
json.operatorNames[50].operator = "sizeOf";
json.operatorNames[51] = {};
json.operatorNames[51].name = "<operator>.equals";
json.operatorNames[51].operator = "equals";
json.operatorNames[52] = {};
json.operatorNames[52].name = "<operator>.notEquals";
json.operatorNames[52].operator = "notEquals";
json.operatorNames[53] = {};
json.operatorNames[53].name = "<operator>.greaterEqualsThan";
json.operatorNames[53].operator = "greaterEqualsThan";
json.operatorNames[54] = {};
json.operatorNames[54].name = "<operator>.instanceOf";
json.operatorNames[54].operator = "instanceOf";
json.operatorNames[55] = {};
json.operatorNames[55].comment = "Comparison between two arguments with the results: 0 == equal, negative == left < right, positive == left > right";
json.operatorNames[55].name = "<operator>.compare";
json.operatorNames[55].operator = "compare";
json.operatorNames[56] = {};
json.operatorNames[56].comment = "Returns or sets a field/member of a struct/class. Typically, the dot-operator. In terms of CPG, the first argument is the struct/class and the second argument is either a FIELD_IDENTIFIER node, a LITERAL node or an arbitrary expression. If it is a FIELD_IDENTIFIER, then the string contained in the CANONICAL_NAME field of this FIELD_IDENTIFIER node selects which field/member is accessed. If it is a LITERAL node, then its CODE selects which field/member is selected. In any other case the access is considered unpredictable by the backend, and we overtaint. indexAccess and fieldAccess live in the same space, such that e.g. obj.field and obj[\"field\"] refer to the same target (as is correct in e.g. javascript). Handling of this operator is special-cased in the back-end";
json.operatorNames[56].name = "<operator>.fieldAccess";
json.operatorNames[56].operator = "fieldAccess";
json.operatorNames[57] = {};
json.operatorNames[57].comment = "Returns the address of a given object. Pairs of addressOf and indirection operators cancel each other. Handling of this operator is special-cased in the back-end";
json.operatorNames[57].name = "<operator>.addressOf";
json.operatorNames[57].operator = "addressOf";
json.operatorNames[58] = {};
json.operatorNames[58].name = "<operator>.and";
json.operatorNames[58].operator = "and";
