{
        "operatorNames" : [
        {
            "operator":"addition",
            "name":"<operator>.addition"
        },
        {
            "operator":"subtraction",
            "name":"<operator>.subtraction"
        },
        {
            "operator":"multiplication",
            "name":"<operator>.multiplication"
        },
        {
            "operator":"division",
            "name":"<operator>.division"
        },
        {
            "operator":"exponentiation",
            "name":"<operator>.exponentiation"
        },
        {
            "operator":"modulo",
            "name":"<operator>.modulo"
        },
        {
            "operator":"shiftLeft",
            "name":"<operator>.shiftLeft"
        },
        {
            "operator":"logicalShiftRight",
            "name":"<operator>.logicalShiftRight",
            "comment":"Shift right padding with zeros"
        },
        {
            "operator":"arithmeticShiftRight",
            "name":"<operator>.arithmeticShiftRight",
            "comment":"Shift right preserving the sign"
        },
        {
            "operator":"not",
            "name":"<operator>.not"
        },
        {
            "operator":"and",
            "name":"<operator>.and"
        },
        {
            "operator":"or",
            "name":"<operator>.or"
        },
        {
            "operator":"xor",
            "name":"<operator>.xor"
        },
        {
            "operator":"assignmentPlus",
            "name":"<operator>.assignmentPlus"
        },
        {
            "operator":"assignmentMinus",
            "name":"<operator>.assignmentMinus"
        },
        {
            "operator":"assignmentMultiplication",
            "name":"<operator>.assignmentMultiplication"
        },
        {
            "operator":"assignmentDivision",
            "name":"<operator>.assignmentDivision"
        },
        {
            "operator":"assignmentExponentiation",
            "name":"<operators>.assignmentExponentiation"
        },
        {
            "operator":"assignmentModulo",
            "name":"<operators>.assignmentModulo"
        },
        {
            "operator":"assignmentShiftLeft",
            "name":"<operators>.assignmentShiftLeft"
        },
        {
            "operator":"assignmentLogicalShiftRight",
            "name":"<operators>.assignmentLogicalShiftRight"
        },
        {
            "operator":"assignmentArithmeticShiftRight",
            "name":"<operators>.assignmentArithmeticShiftRight"
        },
        {
            "operator":"assignmentAnd",
            "name":"<operators>.assignmentAnd"
        },
        {
            "operator":"assignmentOr",
            "name":"<operators>.assignmentOr"
        },
        {
            "operator":"assignmentXor",
            "name":"<operators>.assignmentXor"
        },
        {
            "operator":"assignment",
            "name":"<operator>.assignment"
        },
        {
            "operator":"minus",
            "name":"<operator>.minus",
            "comment":"E.g. `a = -b`"
        },
        {
            "operator":"plus",
            "name":"<operator>.plus",
            "comment":"E.g. `a = +b`"
        },
        {
            "operator":"preIncrement",
            "name":"<operator>.preIncrement"
        },
        {
            "operator":"preDecrement",
            "name":"<operator>.preDecrement"
        },
        {
            "operator":"postIncrement",
            "name":"<operator>.postIncrement"
        },
        {
            "operator":"postDecrement",
            "name":"<operator>.postDecrement"
        },
        {
            "operator":"logicalNot",
            "name":"<operator>.logicalNot"
        },
        {
            "operator":"logicalOr",
            "name":"<operator>.logicalOr"
        },
        {
            "operator":"logicalAnd",
            "name":"<operator>.logicalAnd"
        },
        {
            "operator":"equals",
            "name":"<operator>.equals"
        },
        {
            "operator":"notEquals",
            "name":"<operator>.notEquals"
        },
        {
            "operator":"greaterThan",
            "name":"<operator>.greaterThan"
        },
        {
            "operator":"lessThan",
            "name":"<operator>.lessThan"
        },
        {
            "operator":"greaterEqualsThan",
            "name":"<operator>.greaterEqualsThan"
        },
        {
            "operator":"lessEqualsThan",
            "name":"<operator>.lessEqualsThan"
        },
        {
            "operator":"instanceOf",
            "name":"<operator>.instanceOf"
        },
        {
            "operator":"memberAccess",
            "name":"<operator>.memberAccess",
            "comment":"E.g. in C: `a.b` but not! in Java"
        },
        {
            "operator":"indirectMemberAccess",
            "name":"<operator>.indirectMemberAccess",
            "comment":"E.g. in C: `a->b` and `a.b` in Java"
        },
        {
          "operator":"computedMemberAccess",
          "name":"<operator>.computedMemberAccess",
          "comment":"E.g. in C: `a[b]` but not! in Java"
        },
        {
          "operator":"indirectComputedMemberAccess",
          "name":"<operator>.indirectComputedMemberAccess",
          "comment":"E.g. in C++: `a->*b` and a[b] in Java"
        },
        {
          "operator":"indirection",
          "name":"<operator>.indirection",
          "comment":"E.g. in C: `*a`"
        },
        {
          "operator":"delete",
            "name":"<operator>.delete",
            "comment":"Deletes a property from a namespace. E.g. `a=3; delete a; a == undefined;"
        },
        {
            "operator":"conditional",
            "name":"<operator>.conditional",
            "comment": "E.g. `a ? consequent : alternate`. In future probably also used for if statements"
        },
        {
            "operator":"cast",
            "name":"<operator>.cast",
            "comment": "Type casts of any sort"
        },
        {
            "operator":"compare",
            "name":"<operator>.compare",
            "comment": "Comparison between two arguments with the results: 0 == equal, negative == left < right, positive == left > right"
        },
        {
            "operator":"addressOf",
            "name":"<operator>.addressOf",
            "comment": "Returns the address of a given object"
        },
        {
            "operator":"sizeOf",
            "name":"<operator>.sizeOf",
            "comment": "Returns the size of a given object"
        }
    ]
}
