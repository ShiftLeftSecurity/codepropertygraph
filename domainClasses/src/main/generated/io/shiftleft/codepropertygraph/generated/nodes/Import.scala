package io.shiftleft.codepropertygraph.generated.nodes

import io.shiftleft.codepropertygraph.generated.Language.*
import scala.collection.immutable.{IndexedSeq, ArraySeq}

trait ImportEMT extends AnyRef with AstNodeEMT with HasExplicitAsEMT with HasImportedAsEMT with HasImportedEntityEMT with HasIsExplicitEMT with HasIsWildcardEMT

trait ImportBase extends AbstractNode with AstNodeBase with StaticType[ImportEMT] {
  
  override def propertiesMap: java.util.Map[String, Any] = {
 import io.shiftleft.codepropertygraph.generated.accessors.Lang.*
 val res = new java.util.HashMap[String, Any]()
res.put("CODE", this.code )
this.columnNumber.foreach{p => res.put("COLUMN_NUMBER", p )}
this.explicitAs.foreach{p => res.put("EXPLICIT_AS", p )}
this.importedAs.foreach{p => res.put("IMPORTED_AS", p )}
this.importedEntity.foreach{p => res.put("IMPORTED_ENTITY", p )}
this.isExplicit.foreach{p => res.put("IS_EXPLICIT", p )}
this.isWildcard.foreach{p => res.put("IS_WILDCARD", p )}
this.lineNumber.foreach{p => res.put("LINE_NUMBER", p )}
res.put("ORDER", this.order )
 res
}
}

object Import {
  val Label = "IMPORT"
  object PropertyNames {
    val Code = io.shiftleft.codepropertygraph.generated.PropertyNames.CODE
val ColumnNumber = io.shiftleft.codepropertygraph.generated.PropertyNames.COLUMN_NUMBER
val ExplicitAs = io.shiftleft.codepropertygraph.generated.PropertyNames.EXPLICIT_AS
val ImportedAs = io.shiftleft.codepropertygraph.generated.PropertyNames.IMPORTED_AS
val ImportedEntity = io.shiftleft.codepropertygraph.generated.PropertyNames.IMPORTED_ENTITY
val IsExplicit = io.shiftleft.codepropertygraph.generated.PropertyNames.IS_EXPLICIT
val IsWildcard = io.shiftleft.codepropertygraph.generated.PropertyNames.IS_WILDCARD
val LineNumber = io.shiftleft.codepropertygraph.generated.PropertyNames.LINE_NUMBER
val Order = io.shiftleft.codepropertygraph.generated.PropertyNames.ORDER
  }
  object PropertyDefaults {
    val Code = "<empty>"
val Order = -1: Int
  }
}

class Import(graph_4762: flatgraph.Graph, seq_4762: Int) extends StoredNode(graph_4762, 17.toShort , seq_4762) with ImportBase with AstNode with StaticType[ImportEMT] {
  

  override def productElementName(n: Int): String =
    n match {
      case 0 => "code"
case 1 => "columnNumber"
case 2 => "explicitAs"
case 3 => "importedAs"
case 4 => "importedEntity"
case 5 => "isExplicit"
case 6 => "isWildcard"
case 7 => "lineNumber"
case 8 => "order"
      case _ => ""
    }

  override def productElement(n: Int): Any =
    n match {
      case 0 => this.code
case 1 => this.columnNumber
case 2 => this.explicitAs
case 3 => this.importedAs
case 4 => this.importedEntity
case 5 => this.isExplicit
case 6 => this.isWildcard
case 7 => this.lineNumber
case 8 => this.order
      case _ => null
    }

  override def productPrefix = "Import"
  override def productArity = 9

  override def canEqual(that: Any): Boolean = that != null && that.isInstanceOf[Import]
}

object NewImport {
  def apply(): NewImport = new NewImport
  private val outNeighbors: Map[String, Set[String]] = Map("ALIAS_OF" -> Set("TYPE"), "ARGUMENT" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "AST" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "BINDS" -> Set("BINDING"), "BINDS_TO" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "CALL" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "CAPTURE" -> Set("CLOSURE_BINDING"), "CAPTURED_BY" -> Set("CLOSURE_BINDING"), "CDG" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "CFG" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "CONDITION" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "CONTAINS" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "DOMINATE" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "EVAL_TYPE" -> Set("TYPE"), "IMPORTS" -> Set("DEPENDENCY"), "INHERITS_FROM" -> Set("TYPE"), "IS_CALL_FOR_IMPORT" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "PARAMETER_LINK" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "POST_DOMINATE" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "REACHING_DEF" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "RECEIVER" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "REF" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "SOURCE_FILE" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "TAGGED_BY" -> Set("TAG"))
  private val inNeighbors: Map[String, Set[String]] = Map("ARGUMENT" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "AST" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "BINDS_TO" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "CALL" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "CDG" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "CFG" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "CONDITION" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "CONTAINS" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "DOMINATE" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "IS_CALL_FOR_IMPORT" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "PARAMETER_LINK" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "POST_DOMINATE" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "REACHING_DEF" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "RECEIVER" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "REF" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BINDING", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "CLOSURE_BINDING", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"), "SOURCE_FILE" -> Set("ANNOTATION", "ANNOTATION_LITERAL", "ANNOTATION_PARAMETER", "ANNOTATION_PARAMETER_ASSIGN", "ARRAY_INITIALIZER", "BLOCK", "CALL", "CALL_REPR", "CFG_NODE", "COMMENT", "CONTROL_STRUCTURE", "EXPRESSION", "FIELD_IDENTIFIER", "FILE", "IDENTIFIER", "IMPORT", "JUMP_LABEL", "JUMP_TARGET", "LITERAL", "LOCAL", "MEMBER", "METHOD", "METHOD_PARAMETER_IN", "METHOD_PARAMETER_OUT", "METHOD_REF", "METHOD_RETURN", "MODIFIER", "NAMESPACE", "NAMESPACE_BLOCK", "RETURN", "TEMPLATE_DOM", "TYPE_ARGUMENT", "TYPE_DECL", "TYPE_PARAMETER", "TYPE_REF", "UNKNOWN"))
}
class NewImport extends NewNode(17.toShort) with ImportBase with AstNodeNew {
  override type StoredNodeType = Import
  override def label: String = "IMPORT"

  override def isValidOutNeighbor(edgeLabel: String, n: NewNode): Boolean = {
    NewImport.outNeighbors.getOrElse(edgeLabel, Set.empty).contains(n.label)
  }
  override def isValidInNeighbor(edgeLabel: String, n: NewNode): Boolean = {
    NewImport.inNeighbors.getOrElse(edgeLabel, Set.empty).contains(n.label)
  }

  var code: String = "<empty>": String
var columnNumber: Option[Int] = None
var explicitAs: Option[Boolean] = None
var importedAs: Option[String] = None
var importedEntity: Option[String] = None
var isExplicit: Option[Boolean] = None
var isWildcard: Option[Boolean] = None
var lineNumber: Option[Int] = None
var order: Int = -1: Int
  def code(value: String): this.type = {this.code = value; this }
def columnNumber(value: Int): this.type = {this.columnNumber = Option(value); this }
def columnNumber(value: Option[Int]): this.type = {this.columnNumber = value; this }
def explicitAs(value: Boolean): this.type = {this.explicitAs = Option(value); this }
def explicitAs(value: Option[Boolean]): this.type = {this.explicitAs = value; this }
def importedAs(value: Option[String]): this.type = {this.importedAs = value; this }
def importedAs(value: String): this.type = {this.importedAs = Option(value); this }
def importedEntity(value: Option[String]): this.type = {this.importedEntity = value; this }
def importedEntity(value: String): this.type = {this.importedEntity = Option(value); this }
def isExplicit(value: Boolean): this.type = {this.isExplicit = Option(value); this }
def isExplicit(value: Option[Boolean]): this.type = {this.isExplicit = value; this }
def isWildcard(value: Boolean): this.type = {this.isWildcard = Option(value); this }
def isWildcard(value: Option[Boolean]): this.type = {this.isWildcard = value; this }
def lineNumber(value: Int): this.type = {this.lineNumber = Option(value); this }
def lineNumber(value: Option[Int]): this.type = {this.lineNumber = value; this }
def order(value: Int): this.type = {this.order = value; this }
  override def flattenProperties(interface: flatgraph.BatchedUpdateInterface): Unit = {
interface.insertProperty(this, 10, Iterator(this.code))
if(columnNumber.nonEmpty) interface.insertProperty(this, 11, this.columnNumber)
if(explicitAs.nonEmpty) interface.insertProperty(this, 20, this.explicitAs)
if(importedAs.nonEmpty) interface.insertProperty(this, 24, this.importedAs)
if(importedEntity.nonEmpty) interface.insertProperty(this, 25, this.importedEntity)
if(isExplicit.nonEmpty) interface.insertProperty(this, 28, this.isExplicit)
if(isWildcard.nonEmpty) interface.insertProperty(this, 31, this.isWildcard)
if(lineNumber.nonEmpty) interface.insertProperty(this, 34, this.lineNumber)
interface.insertProperty(this, 43, Iterator(this.order))
}

  override def copy(): this.type = {
    val newInstance = new NewImport
    newInstance.code = this.code
newInstance.columnNumber = this.columnNumber
newInstance.explicitAs = this.explicitAs
newInstance.importedAs = this.importedAs
newInstance.importedEntity = this.importedEntity
newInstance.isExplicit = this.isExplicit
newInstance.isWildcard = this.isWildcard
newInstance.lineNumber = this.lineNumber
newInstance.order = this.order
    newInstance.asInstanceOf[this.type]
  }

  override def productElementName(n: Int): String =
    n match {
      case 0 => "code"
case 1 => "columnNumber"
case 2 => "explicitAs"
case 3 => "importedAs"
case 4 => "importedEntity"
case 5 => "isExplicit"
case 6 => "isWildcard"
case 7 => "lineNumber"
case 8 => "order"
      case _ => ""
    }

  override def productElement(n: Int): Any =
    n match {
      case 0 => this.code
case 1 => this.columnNumber
case 2 => this.explicitAs
case 3 => this.importedAs
case 4 => this.importedEntity
case 5 => this.isExplicit
case 6 => this.isWildcard
case 7 => this.lineNumber
case 8 => this.order
      case _ => null
    }

  override def productPrefix = "NewImport"
  override def productArity = 9
  override def canEqual(that: Any): Boolean = that != null && that.isInstanceOf[NewImport]
}
